// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RdsPacket.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RdsPacket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace RdsProtobuf {

void protobuf_ShutdownFile_RdsPacket_2eproto() {
  delete Prm300::default_instance_;
  delete SmolenskRpu::default_instance_;
  delete ReceiverOptions::default_instance_;
  delete ChannelOptions::default_instance_;
  delete DeviceOptions::default_instance_;
  delete TimeFreqArea::default_instance_;
  delete Mode::default_instance_;
  delete System::default_instance_;
  delete System_SystemOptions::default_instance_;
  delete System_Device::default_instance_;
  delete System_Receiver::default_instance_;
  delete System_SeparateReceiver::default_instance_;
  delete Location::default_instance_;
  delete Location_LocationOptions::default_instance_;
  delete Location_FilterOptions::default_instance_;
  delete Detector::default_instance_;
  delete Detector_DetectorOptions::default_instance_;
  delete Analysis::default_instance_;
  delete Analysis_AnalysisOptions::default_instance_;
  delete DataStatus::default_instance_;
  delete LocationSpectrum::default_instance_;
  delete LocationXCov::default_instance_;
  delete DetectorSpectrum::default_instance_;
  delete AnalysisSpectrogram::default_instance_;
  delete ClientMessage::default_instance_;
  delete ClientMessage_GetMessage::default_instance_;
  delete ClientMessage_SetMessage::default_instance_;
  delete ServerMessage::default_instance_;
  delete ServerMessage_CurrentMessage::default_instance_;
  delete ServerMessage_DataMessage::default_instance_;
  delete ServerMessage_AnswerMessage::default_instance_;
  delete ServerMessage_AnswerMessage_Error::default_instance_;
  delete ServerMessage_AnswerMessage_Confirmation::default_instance_;
  delete Packet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_RdsPacket_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_RdsPacket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Prm300::default_instance_ = new Prm300();
  SmolenskRpu::default_instance_ = new SmolenskRpu();
  ReceiverOptions::default_instance_ = new ReceiverOptions();
  ChannelOptions::default_instance_ = new ChannelOptions();
  DeviceOptions::default_instance_ = new DeviceOptions();
  TimeFreqArea::default_instance_ = new TimeFreqArea();
  Mode::default_instance_ = new Mode();
  System::default_instance_ = new System();
  System_SystemOptions::default_instance_ = new System_SystemOptions();
  System_Device::default_instance_ = new System_Device();
  System_Receiver::default_instance_ = new System_Receiver();
  System_SeparateReceiver::default_instance_ = new System_SeparateReceiver();
  Location::default_instance_ = new Location();
  Location_LocationOptions::default_instance_ = new Location_LocationOptions();
  Location_FilterOptions::default_instance_ = new Location_FilterOptions();
  Detector::default_instance_ = new Detector();
  Detector_DetectorOptions::default_instance_ = new Detector_DetectorOptions();
  Analysis::default_instance_ = new Analysis();
  Analysis_AnalysisOptions::default_instance_ = new Analysis_AnalysisOptions();
  DataStatus::default_instance_ = new DataStatus();
  LocationSpectrum::default_instance_ = new LocationSpectrum();
  LocationXCov::default_instance_ = new LocationXCov();
  DetectorSpectrum::default_instance_ = new DetectorSpectrum();
  AnalysisSpectrogram::default_instance_ = new AnalysisSpectrogram();
  ClientMessage::default_instance_ = new ClientMessage();
  ClientMessage_GetMessage::default_instance_ = new ClientMessage_GetMessage();
  ClientMessage_SetMessage::default_instance_ = new ClientMessage_SetMessage();
  ServerMessage::default_instance_ = new ServerMessage();
  ServerMessage_CurrentMessage::default_instance_ = new ServerMessage_CurrentMessage();
  ServerMessage_DataMessage::default_instance_ = new ServerMessage_DataMessage();
  ServerMessage_AnswerMessage::default_instance_ = new ServerMessage_AnswerMessage();
  ServerMessage_AnswerMessage_Error::default_instance_ = new ServerMessage_AnswerMessage_Error();
  ServerMessage_AnswerMessage_Confirmation::default_instance_ = new ServerMessage_AnswerMessage_Confirmation();
  Packet::default_instance_ = new Packet();
  Prm300::default_instance_->InitAsDefaultInstance();
  SmolenskRpu::default_instance_->InitAsDefaultInstance();
  ReceiverOptions::default_instance_->InitAsDefaultInstance();
  ChannelOptions::default_instance_->InitAsDefaultInstance();
  DeviceOptions::default_instance_->InitAsDefaultInstance();
  TimeFreqArea::default_instance_->InitAsDefaultInstance();
  Mode::default_instance_->InitAsDefaultInstance();
  System::default_instance_->InitAsDefaultInstance();
  System_SystemOptions::default_instance_->InitAsDefaultInstance();
  System_Device::default_instance_->InitAsDefaultInstance();
  System_Receiver::default_instance_->InitAsDefaultInstance();
  System_SeparateReceiver::default_instance_->InitAsDefaultInstance();
  Location::default_instance_->InitAsDefaultInstance();
  Location_LocationOptions::default_instance_->InitAsDefaultInstance();
  Location_FilterOptions::default_instance_->InitAsDefaultInstance();
  Detector::default_instance_->InitAsDefaultInstance();
  Detector_DetectorOptions::default_instance_->InitAsDefaultInstance();
  Analysis::default_instance_->InitAsDefaultInstance();
  Analysis_AnalysisOptions::default_instance_->InitAsDefaultInstance();
  DataStatus::default_instance_->InitAsDefaultInstance();
  LocationSpectrum::default_instance_->InitAsDefaultInstance();
  LocationXCov::default_instance_->InitAsDefaultInstance();
  DetectorSpectrum::default_instance_->InitAsDefaultInstance();
  AnalysisSpectrogram::default_instance_->InitAsDefaultInstance();
  ClientMessage::default_instance_->InitAsDefaultInstance();
  ClientMessage_GetMessage::default_instance_->InitAsDefaultInstance();
  ClientMessage_SetMessage::default_instance_->InitAsDefaultInstance();
  ServerMessage::default_instance_->InitAsDefaultInstance();
  ServerMessage_CurrentMessage::default_instance_->InitAsDefaultInstance();
  ServerMessage_DataMessage::default_instance_->InitAsDefaultInstance();
  ServerMessage_AnswerMessage::default_instance_->InitAsDefaultInstance();
  ServerMessage_AnswerMessage_Error::default_instance_->InitAsDefaultInstance();
  ServerMessage_AnswerMessage_Confirmation::default_instance_->InitAsDefaultInstance();
  Packet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RdsPacket_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_RdsPacket_2eproto_once_);
void protobuf_AddDesc_RdsPacket_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_RdsPacket_2eproto_once_,
                 &protobuf_AddDesc_RdsPacket_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RdsPacket_2eproto {
  StaticDescriptorInitializer_RdsPacket_2eproto() {
    protobuf_AddDesc_RdsPacket_2eproto();
  }
} static_descriptor_initializer_RdsPacket_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Prm300::kFreqFieldNumber;
const int Prm300::kFilterFieldNumber;
const int Prm300::kAttenuator1FieldNumber;
const int Prm300::kAttenuator2FieldNumber;
const int Prm300::kChanNumFieldNumber;
const int Prm300::kGeneratorFieldNumber;
#endif  // !_MSC_VER

Prm300::Prm300()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.Prm300)
}

void Prm300::InitAsDefaultInstance() {
}

Prm300::Prm300(const Prm300& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.Prm300)
}

void Prm300::SharedCtor() {
  _cached_size_ = 0;
  freq_ = 0;
  filter_ = 0;
  attenuator1_ = 0;
  attenuator2_ = 0;
  channum_ = 0;
  generator_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Prm300::~Prm300() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.Prm300)
  SharedDtor();
}

void Prm300::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Prm300::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Prm300& Prm300::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

Prm300* Prm300::default_instance_ = NULL;

Prm300* Prm300::New() const {
  return new Prm300;
}

void Prm300::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Prm300*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(freq_, generator_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Prm300::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.Prm300)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 freq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freq_)));
          set_has_freq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_filter;
        break;
      }

      // required int32 filter = 2;
      case 2: {
        if (tag == 16) {
         parse_filter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filter_)));
          set_has_filter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_attenuator1;
        break;
      }

      // required int32 attenuator1 = 3;
      case 3: {
        if (tag == 24) {
         parse_attenuator1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attenuator1_)));
          set_has_attenuator1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_attenuator2;
        break;
      }

      // required int32 attenuator2 = 4;
      case 4: {
        if (tag == 32) {
         parse_attenuator2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attenuator2_)));
          set_has_attenuator2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_chanNum;
        break;
      }

      // required int32 chanNum = 5;
      case 5: {
        if (tag == 40) {
         parse_chanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channum_)));
          set_has_channum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_generator;
        break;
      }

      // required int32 generator = 6;
      case 6: {
        if (tag == 48) {
         parse_generator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &generator_)));
          set_has_generator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.Prm300)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.Prm300)
  return false;
#undef DO_
}

void Prm300::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.Prm300)
  // required int32 freq = 1;
  if (has_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->freq(), output);
  }

  // required int32 filter = 2;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->filter(), output);
  }

  // required int32 attenuator1 = 3;
  if (has_attenuator1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attenuator1(), output);
  }

  // required int32 attenuator2 = 4;
  if (has_attenuator2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attenuator2(), output);
  }

  // required int32 chanNum = 5;
  if (has_channum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->channum(), output);
  }

  // required int32 generator = 6;
  if (has_generator()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->generator(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.Prm300)
}

int Prm300::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 freq = 1;
    if (has_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freq());
    }

    // required int32 filter = 2;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filter());
    }

    // required int32 attenuator1 = 3;
    if (has_attenuator1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attenuator1());
    }

    // required int32 attenuator2 = 4;
    if (has_attenuator2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attenuator2());
    }

    // required int32 chanNum = 5;
    if (has_channum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channum());
    }

    // required int32 generator = 6;
    if (has_generator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->generator());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Prm300::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Prm300*>(&from));
}

void Prm300::MergeFrom(const Prm300& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_freq()) {
      set_freq(from.freq());
    }
    if (from.has_filter()) {
      set_filter(from.filter());
    }
    if (from.has_attenuator1()) {
      set_attenuator1(from.attenuator1());
    }
    if (from.has_attenuator2()) {
      set_attenuator2(from.attenuator2());
    }
    if (from.has_channum()) {
      set_channum(from.channum());
    }
    if (from.has_generator()) {
      set_generator(from.generator());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Prm300::CopyFrom(const Prm300& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prm300::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Prm300::Swap(Prm300* other) {
  if (other != this) {
    std::swap(freq_, other->freq_);
    std::swap(filter_, other->filter_);
    std::swap(attenuator1_, other->attenuator1_);
    std::swap(attenuator2_, other->attenuator2_);
    std::swap(channum_, other->channum_);
    std::swap(generator_, other->generator_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Prm300::GetTypeName() const {
  return "RdsProtobuf.Prm300";
}


// ===================================================================

#ifndef _MSC_VER
const int SmolenskRpu::kFreqFieldNumber;
#endif  // !_MSC_VER

SmolenskRpu::SmolenskRpu()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.SmolenskRpu)
}

void SmolenskRpu::InitAsDefaultInstance() {
}

SmolenskRpu::SmolenskRpu(const SmolenskRpu& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.SmolenskRpu)
}

void SmolenskRpu::SharedCtor() {
  _cached_size_ = 0;
  freq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmolenskRpu::~SmolenskRpu() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.SmolenskRpu)
  SharedDtor();
}

void SmolenskRpu::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SmolenskRpu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SmolenskRpu& SmolenskRpu::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

SmolenskRpu* SmolenskRpu::default_instance_ = NULL;

SmolenskRpu* SmolenskRpu::New() const {
  return new SmolenskRpu;
}

void SmolenskRpu::Clear() {
  freq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool SmolenskRpu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.SmolenskRpu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 freq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freq_)));
          set_has_freq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.SmolenskRpu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.SmolenskRpu)
  return false;
#undef DO_
}

void SmolenskRpu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.SmolenskRpu)
  // required int32 freq = 1;
  if (has_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->freq(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.SmolenskRpu)
}

int SmolenskRpu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 freq = 1;
    if (has_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freq());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmolenskRpu::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SmolenskRpu*>(&from));
}

void SmolenskRpu::MergeFrom(const SmolenskRpu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_freq()) {
      set_freq(from.freq());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SmolenskRpu::CopyFrom(const SmolenskRpu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmolenskRpu::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SmolenskRpu::Swap(SmolenskRpu* other) {
  if (other != this) {
    std::swap(freq_, other->freq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SmolenskRpu::GetTypeName() const {
  return "RdsProtobuf.SmolenskRpu";
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiverOptions::kTitleFieldNumber;
const int ReceiverOptions::kStatusFieldNumber;
const int ReceiverOptions::kIpFieldNumber;
const int ReceiverOptions::kPortFieldNumber;
const int ReceiverOptions::kTypeFieldNumber;
const int ReceiverOptions::kSettingsPrm300FieldNumber;
const int ReceiverOptions::kSettingsSmolenskRpuFieldNumber;
#endif  // !_MSC_VER

ReceiverOptions::ReceiverOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.ReceiverOptions)
}

void ReceiverOptions::InitAsDefaultInstance() {
}

ReceiverOptions::ReceiverOptions(const ReceiverOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.ReceiverOptions)
}

void ReceiverOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = false;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_ReceiverType();
}

ReceiverOptions::~ReceiverOptions() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.ReceiverOptions)
  SharedDtor();
}

void ReceiverOptions::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (has_ReceiverType()) {
    clear_ReceiverType();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReceiverOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReceiverOptions& ReceiverOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

ReceiverOptions* ReceiverOptions::default_instance_ = NULL;

ReceiverOptions* ReceiverOptions::New() const {
  return new ReceiverOptions;
}

void ReceiverOptions::clear_ReceiverType() {
  switch(ReceiverType_case()) {
    case kSettingsPrm300: {
      delete ReceiverType_.settingsprm300_;
      break;
    }
    case kSettingsSmolenskRpu: {
      delete ReceiverType_.settingssmolenskrpu_;
      break;
    }
    case RECEIVERTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RECEIVERTYPE_NOT_SET;
}


void ReceiverOptions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReceiverOptions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(status_, type_);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  clear_ReceiverType();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ReceiverOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.ReceiverOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // required int32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // required int32 type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_settingsPrm300;
        break;
      }

      // optional .RdsProtobuf.Prm300 settingsPrm300 = 6;
      case 6: {
        if (tag == 50) {
         parse_settingsPrm300:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settingsprm300()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_settingsSmolenskRpu;
        break;
      }

      // optional .RdsProtobuf.SmolenskRpu settingsSmolenskRpu = 7;
      case 7: {
        if (tag == 58) {
         parse_settingsSmolenskRpu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settingssmolenskrpu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.ReceiverOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.ReceiverOptions)
  return false;
#undef DO_
}

void ReceiverOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.ReceiverOptions)
  // required string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // required int32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // required int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // optional .RdsProtobuf.Prm300 settingsPrm300 = 6;
  if (has_settingsprm300()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->settingsprm300(), output);
  }

  // optional .RdsProtobuf.SmolenskRpu settingsSmolenskRpu = 7;
  if (has_settingssmolenskrpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->settingssmolenskrpu(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.ReceiverOptions)
}

int ReceiverOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // required string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // required int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  switch (ReceiverType_case()) {
    // optional .RdsProtobuf.Prm300 settingsPrm300 = 6;
    case kSettingsPrm300: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settingsprm300());
      break;
    }
    // optional .RdsProtobuf.SmolenskRpu settingsSmolenskRpu = 7;
    case kSettingsSmolenskRpu: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settingssmolenskrpu());
      break;
    }
    case RECEIVERTYPE_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiverOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReceiverOptions*>(&from));
}

void ReceiverOptions::MergeFrom(const ReceiverOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.ReceiverType_case()) {
    case kSettingsPrm300: {
      mutable_settingsprm300()->::RdsProtobuf::Prm300::MergeFrom(from.settingsprm300());
      break;
    }
    case kSettingsSmolenskRpu: {
      mutable_settingssmolenskrpu()->::RdsProtobuf::SmolenskRpu::MergeFrom(from.settingssmolenskrpu());
      break;
    }
    case RECEIVERTYPE_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ReceiverOptions::CopyFrom(const ReceiverOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiverOptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_settingsprm300()) {
    if (!this->settingsprm300().IsInitialized()) return false;
  }
  if (has_settingssmolenskrpu()) {
    if (!this->settingssmolenskrpu().IsInitialized()) return false;
  }
  return true;
}

void ReceiverOptions::Swap(ReceiverOptions* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(status_, other->status_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(type_, other->type_);
    std::swap(ReceiverType_, other->ReceiverType_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ReceiverOptions::GetTypeName() const {
  return "RdsProtobuf.ReceiverOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int ChannelOptions::kTitleFieldNumber;
const int ChannelOptions::kInversionFieldNumber;
const int ChannelOptions::kReceiverFieldNumber;
#endif  // !_MSC_VER

ChannelOptions::ChannelOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.ChannelOptions)
}

void ChannelOptions::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  receiver_ = const_cast< ::RdsProtobuf::ReceiverOptions*>(
      ::RdsProtobuf::ReceiverOptions::internal_default_instance());
#else
  receiver_ = const_cast< ::RdsProtobuf::ReceiverOptions*>(&::RdsProtobuf::ReceiverOptions::default_instance());
#endif
}

ChannelOptions::ChannelOptions(const ChannelOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.ChannelOptions)
}

void ChannelOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inversion_ = false;
  receiver_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChannelOptions::~ChannelOptions() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.ChannelOptions)
  SharedDtor();
}

void ChannelOptions::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete receiver_;
  }
}

void ChannelOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChannelOptions& ChannelOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

ChannelOptions* ChannelOptions::default_instance_ = NULL;

ChannelOptions* ChannelOptions::New() const {
  return new ChannelOptions;
}

void ChannelOptions::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    inversion_ = false;
    if (has_receiver()) {
      if (receiver_ != NULL) receiver_->::RdsProtobuf::ReceiverOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ChannelOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.ChannelOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_inversion;
        break;
      }

      // required bool inversion = 2;
      case 2: {
        if (tag == 16) {
         parse_inversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inversion_)));
          set_has_inversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_receiver;
        break;
      }

      // required .RdsProtobuf.ReceiverOptions receiver = 3;
      case 3: {
        if (tag == 26) {
         parse_receiver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.ChannelOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.ChannelOptions)
  return false;
#undef DO_
}

void ChannelOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.ChannelOptions)
  // required string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // required bool inversion = 2;
  if (has_inversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->inversion(), output);
  }

  // required .RdsProtobuf.ReceiverOptions receiver = 3;
  if (has_receiver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->receiver(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.ChannelOptions)
}

int ChannelOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required bool inversion = 2;
    if (has_inversion()) {
      total_size += 1 + 1;
    }

    // required .RdsProtobuf.ReceiverOptions receiver = 3;
    if (has_receiver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiver());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChannelOptions*>(&from));
}

void ChannelOptions::MergeFrom(const ChannelOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_inversion()) {
      set_inversion(from.inversion());
    }
    if (from.has_receiver()) {
      mutable_receiver()->::RdsProtobuf::ReceiverOptions::MergeFrom(from.receiver());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ChannelOptions::CopyFrom(const ChannelOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelOptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_receiver()) {
    if (!this->receiver().IsInitialized()) return false;
  }
  return true;
}

void ChannelOptions::Swap(ChannelOptions* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(inversion_, other->inversion_);
    std::swap(receiver_, other->receiver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ChannelOptions::GetTypeName() const {
  return "RdsProtobuf.ChannelOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceOptions::kTitleFieldNumber;
const int DeviceOptions::kStatusFieldNumber;
const int DeviceOptions::kIpFieldNumber;
const int DeviceOptions::kPortSCTPFieldNumber;
const int DeviceOptions::kPortHTTPFieldNumber;
const int DeviceOptions::kChannelsNumFieldNumber;
const int DeviceOptions::kSyncFieldNumber;
const int DeviceOptions::kBoardFieldNumber;
const int DeviceOptions::kChannelsFieldNumber;
#endif  // !_MSC_VER

DeviceOptions::DeviceOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.DeviceOptions)
}

void DeviceOptions::InitAsDefaultInstance() {
}

DeviceOptions::DeviceOptions(const DeviceOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.DeviceOptions)
}

void DeviceOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = false;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  portsctp_ = 0;
  porthttp_ = 0;
  channelsnum_ = 0;
  sync_ = 0;
  board_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceOptions::~DeviceOptions() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.DeviceOptions)
  SharedDtor();
}

void DeviceOptions::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeviceOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceOptions& DeviceOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

DeviceOptions* DeviceOptions::default_instance_ = NULL;

DeviceOptions* DeviceOptions::New() const {
  return new DeviceOptions;
}

void DeviceOptions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeviceOptions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(status_, board_);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  channels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeviceOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.DeviceOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_portSCTP;
        break;
      }

      // required int32 portSCTP = 4;
      case 4: {
        if (tag == 32) {
         parse_portSCTP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &portsctp_)));
          set_has_portsctp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_portHTTP;
        break;
      }

      // required int32 portHTTP = 5;
      case 5: {
        if (tag == 40) {
         parse_portHTTP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &porthttp_)));
          set_has_porthttp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_channelsNum;
        break;
      }

      // required int32 channelsNum = 6;
      case 6: {
        if (tag == 48) {
         parse_channelsNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelsnum_)));
          set_has_channelsnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sync;
        break;
      }

      // required int32 sync = 7;
      case 7: {
        if (tag == 56) {
         parse_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sync_)));
          set_has_sync();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_board;
        break;
      }

      // required int32 board = 8;
      case 8: {
        if (tag == 64) {
         parse_board:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &board_)));
          set_has_board();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_channels;
        break;
      }

      // repeated .RdsProtobuf.ChannelOptions channels = 9;
      case 9: {
        if (tag == 74) {
         parse_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_channels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_channels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.DeviceOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.DeviceOptions)
  return false;
#undef DO_
}

void DeviceOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.DeviceOptions)
  // required string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // required int32 portSCTP = 4;
  if (has_portsctp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->portsctp(), output);
  }

  // required int32 portHTTP = 5;
  if (has_porthttp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->porthttp(), output);
  }

  // required int32 channelsNum = 6;
  if (has_channelsnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->channelsnum(), output);
  }

  // required int32 sync = 7;
  if (has_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sync(), output);
  }

  // required int32 board = 8;
  if (has_board()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->board(), output);
  }

  // repeated .RdsProtobuf.ChannelOptions channels = 9;
  for (int i = 0; i < this->channels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->channels(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.DeviceOptions)
}

int DeviceOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // required string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 portSCTP = 4;
    if (has_portsctp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->portsctp());
    }

    // required int32 portHTTP = 5;
    if (has_porthttp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->porthttp());
    }

    // required int32 channelsNum = 6;
    if (has_channelsnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channelsnum());
    }

    // required int32 sync = 7;
    if (has_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sync());
    }

    // required int32 board = 8;
    if (has_board()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->board());
    }

  }
  // repeated .RdsProtobuf.ChannelOptions channels = 9;
  total_size += 1 * this->channels_size();
  for (int i = 0; i < this->channels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->channels(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceOptions*>(&from));
}

void DeviceOptions::MergeFrom(const DeviceOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  channels_.MergeFrom(from.channels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_portsctp()) {
      set_portsctp(from.portsctp());
    }
    if (from.has_porthttp()) {
      set_porthttp(from.porthttp());
    }
    if (from.has_channelsnum()) {
      set_channelsnum(from.channelsnum());
    }
    if (from.has_sync()) {
      set_sync(from.sync());
    }
    if (from.has_board()) {
      set_board(from.board());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeviceOptions::CopyFrom(const DeviceOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceOptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->channels())) return false;
  return true;
}

void DeviceOptions::Swap(DeviceOptions* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(status_, other->status_);
    std::swap(ip_, other->ip_);
    std::swap(portsctp_, other->portsctp_);
    std::swap(porthttp_, other->porthttp_);
    std::swap(channelsnum_, other->channelsnum_);
    std::swap(sync_, other->sync_);
    std::swap(board_, other->board_);
    channels_.Swap(&other->channels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeviceOptions::GetTypeName() const {
  return "RdsProtobuf.DeviceOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int TimeFreqArea::kTimeStartFieldNumber;
const int TimeFreqArea::kTimeEndFieldNumber;
const int TimeFreqArea::kFreqStartFieldNumber;
const int TimeFreqArea::kFreqEndFieldNumber;
#endif  // !_MSC_VER

TimeFreqArea::TimeFreqArea()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.TimeFreqArea)
}

void TimeFreqArea::InitAsDefaultInstance() {
}

TimeFreqArea::TimeFreqArea(const TimeFreqArea& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.TimeFreqArea)
}

void TimeFreqArea::SharedCtor() {
  _cached_size_ = 0;
  time_start_ = 0;
  time_end_ = 0;
  freq_start_ = 0;
  freq_end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeFreqArea::~TimeFreqArea() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.TimeFreqArea)
  SharedDtor();
}

void TimeFreqArea::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TimeFreqArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TimeFreqArea& TimeFreqArea::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

TimeFreqArea* TimeFreqArea::default_instance_ = NULL;

TimeFreqArea* TimeFreqArea::New() const {
  return new TimeFreqArea;
}

void TimeFreqArea::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TimeFreqArea*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(time_start_, freq_end_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TimeFreqArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.TimeFreqArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float time_start = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_start_)));
          set_has_time_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_time_end;
        break;
      }

      // required float time_end = 2;
      case 2: {
        if (tag == 21) {
         parse_time_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_end_)));
          set_has_time_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_freq_start;
        break;
      }

      // required float freq_start = 3;
      case 3: {
        if (tag == 29) {
         parse_freq_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &freq_start_)));
          set_has_freq_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_freq_end;
        break;
      }

      // required float freq_end = 4;
      case 4: {
        if (tag == 37) {
         parse_freq_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &freq_end_)));
          set_has_freq_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.TimeFreqArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.TimeFreqArea)
  return false;
#undef DO_
}

void TimeFreqArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.TimeFreqArea)
  // required float time_start = 1;
  if (has_time_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->time_start(), output);
  }

  // required float time_end = 2;
  if (has_time_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->time_end(), output);
  }

  // required float freq_start = 3;
  if (has_freq_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->freq_start(), output);
  }

  // required float freq_end = 4;
  if (has_freq_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->freq_end(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.TimeFreqArea)
}

int TimeFreqArea::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float time_start = 1;
    if (has_time_start()) {
      total_size += 1 + 4;
    }

    // required float time_end = 2;
    if (has_time_end()) {
      total_size += 1 + 4;
    }

    // required float freq_start = 3;
    if (has_freq_start()) {
      total_size += 1 + 4;
    }

    // required float freq_end = 4;
    if (has_freq_end()) {
      total_size += 1 + 4;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeFreqArea::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TimeFreqArea*>(&from));
}

void TimeFreqArea::MergeFrom(const TimeFreqArea& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_start()) {
      set_time_start(from.time_start());
    }
    if (from.has_time_end()) {
      set_time_end(from.time_end());
    }
    if (from.has_freq_start()) {
      set_freq_start(from.freq_start());
    }
    if (from.has_freq_end()) {
      set_freq_end(from.freq_end());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TimeFreqArea::CopyFrom(const TimeFreqArea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeFreqArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TimeFreqArea::Swap(TimeFreqArea* other) {
  if (other != this) {
    std::swap(time_start_, other->time_start_);
    std::swap(time_end_, other->time_end_);
    std::swap(freq_start_, other->freq_start_);
    std::swap(freq_end_, other->freq_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TimeFreqArea::GetTypeName() const {
  return "RdsProtobuf.TimeFreqArea";
}


// ===================================================================

#ifndef _MSC_VER
const int Mode::kIndexFieldNumber;
const int Mode::kStatusFieldNumber;
#endif  // !_MSC_VER

Mode::Mode()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.Mode)
}

void Mode::InitAsDefaultInstance() {
}

Mode::Mode(const Mode& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.Mode)
}

void Mode::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_Message();
}

Mode::~Mode() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.Mode)
  SharedDtor();
}

void Mode::SharedDtor() {
  if (has_Message()) {
    clear_Message();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Mode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Mode& Mode::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

Mode* Mode::default_instance_ = NULL;

Mode* Mode::New() const {
  return new Mode;
}

void Mode::clear_Message() {
  switch(Message_case()) {
    case kIndex: {
      // No need to clear
      break;
    }
    case kStatus: {
      // No need to clear
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void Mode::Clear() {
  clear_Message();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Mode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.Mode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (tag == 8) {
          clear_Message();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &Message_.index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional bool status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          clear_Message();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Message_.status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.Mode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.Mode)
  return false;
#undef DO_
}

void Mode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.Mode)
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.Mode)
}

int Mode::ByteSize() const {
  int total_size = 0;

  switch (Message_case()) {
    // optional int32 index = 1;
    case kIndex: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
      break;
    }
    // optional bool status = 2;
    case kStatus: {
      total_size += 1 + 1;
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Mode*>(&from));
}

void Mode::MergeFrom(const Mode& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.Message_case()) {
    case kIndex: {
      set_index(from.index());
      break;
    }
    case kStatus: {
      set_status(from.status());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Mode::CopyFrom(const Mode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mode::IsInitialized() const {

  return true;
}

void Mode::Swap(Mode* other) {
  if (other != this) {
    std::swap(Message_, other->Message_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Mode::GetTypeName() const {
  return "RdsProtobuf.Mode";
}


// ===================================================================

#ifndef _MSC_VER
const int System_SystemOptions::kTitleFieldNumber;
const int System_SystemOptions::kDevicesNumFieldNumber;
const int System_SystemOptions::kDevicesFieldNumber;
const int System_SystemOptions::kSeparateReceiversNumFieldNumber;
const int System_SystemOptions::kSeparateReceiversFieldNumber;
#endif  // !_MSC_VER

System_SystemOptions::System_SystemOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.System.SystemOptions)
}

void System_SystemOptions::InitAsDefaultInstance() {
}

System_SystemOptions::System_SystemOptions(const System_SystemOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.System.SystemOptions)
}

void System_SystemOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devices_num_ = 0;
  separate_receivers_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

System_SystemOptions::~System_SystemOptions() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.System.SystemOptions)
  SharedDtor();
}

void System_SystemOptions::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void System_SystemOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const System_SystemOptions& System_SystemOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

System_SystemOptions* System_SystemOptions::default_instance_ = NULL;

System_SystemOptions* System_SystemOptions::New() const {
  return new System_SystemOptions;
}

void System_SystemOptions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<System_SystemOptions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(devices_num_, separate_receivers_num_);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  devices_.Clear();
  separate_receivers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool System_SystemOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.System.SystemOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_devices_Num;
        break;
      }

      // required int32 devices_Num = 2;
      case 2: {
        if (tag == 16) {
         parse_devices_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devices_num_)));
          set_has_devices_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_devices;
        break;
      }

      // repeated .RdsProtobuf.DeviceOptions devices = 3;
      case 3: {
        if (tag == 26) {
         parse_devices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_devices;
        if (input->ExpectTag(32)) goto parse_separate_Receivers_Num;
        break;
      }

      // required int32 separate_Receivers_Num = 4;
      case 4: {
        if (tag == 32) {
         parse_separate_Receivers_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &separate_receivers_num_)));
          set_has_separate_receivers_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_separate_Receivers;
        break;
      }

      // repeated .RdsProtobuf.ReceiverOptions separate_Receivers = 5;
      case 5: {
        if (tag == 42) {
         parse_separate_Receivers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_separate_receivers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_separate_Receivers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.System.SystemOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.System.SystemOptions)
  return false;
#undef DO_
}

void System_SystemOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.System.SystemOptions)
  // required string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // required int32 devices_Num = 2;
  if (has_devices_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->devices_num(), output);
  }

  // repeated .RdsProtobuf.DeviceOptions devices = 3;
  for (int i = 0; i < this->devices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->devices(i), output);
  }

  // required int32 separate_Receivers_Num = 4;
  if (has_separate_receivers_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->separate_receivers_num(), output);
  }

  // repeated .RdsProtobuf.ReceiverOptions separate_Receivers = 5;
  for (int i = 0; i < this->separate_receivers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->separate_receivers(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.System.SystemOptions)
}

int System_SystemOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required int32 devices_Num = 2;
    if (has_devices_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devices_num());
    }

    // required int32 separate_Receivers_Num = 4;
    if (has_separate_receivers_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->separate_receivers_num());
    }

  }
  // repeated .RdsProtobuf.DeviceOptions devices = 3;
  total_size += 1 * this->devices_size();
  for (int i = 0; i < this->devices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->devices(i));
  }

  // repeated .RdsProtobuf.ReceiverOptions separate_Receivers = 5;
  total_size += 1 * this->separate_receivers_size();
  for (int i = 0; i < this->separate_receivers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->separate_receivers(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void System_SystemOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const System_SystemOptions*>(&from));
}

void System_SystemOptions::MergeFrom(const System_SystemOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  devices_.MergeFrom(from.devices_);
  separate_receivers_.MergeFrom(from.separate_receivers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_devices_num()) {
      set_devices_num(from.devices_num());
    }
    if (from.has_separate_receivers_num()) {
      set_separate_receivers_num(from.separate_receivers_num());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void System_SystemOptions::CopyFrom(const System_SystemOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool System_SystemOptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->devices())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->separate_receivers())) return false;
  return true;
}

void System_SystemOptions::Swap(System_SystemOptions* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(devices_num_, other->devices_num_);
    devices_.Swap(&other->devices_);
    std::swap(separate_receivers_num_, other->separate_receivers_num_);
    separate_receivers_.Swap(&other->separate_receivers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string System_SystemOptions::GetTypeName() const {
  return "RdsProtobuf.System.SystemOptions";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int System_Device::kDeviceIndexFieldNumber;
const int System_Device::kStatusFieldNumber;
#endif  // !_MSC_VER

System_Device::System_Device()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.System.Device)
}

void System_Device::InitAsDefaultInstance() {
}

System_Device::System_Device(const System_Device& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.System.Device)
}

void System_Device::SharedCtor() {
  _cached_size_ = 0;
  device_index_ = 0;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

System_Device::~System_Device() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.System.Device)
  SharedDtor();
}

void System_Device::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void System_Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const System_Device& System_Device::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

System_Device* System_Device::default_instance_ = NULL;

System_Device* System_Device::New() const {
  return new System_Device;
}

void System_Device::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<System_Device*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(device_index_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool System_Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.System.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 device_Index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_index_)));
          set_has_device_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.System.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.System.Device)
  return false;
#undef DO_
}

void System_Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.System.Device)
  // required int32 device_Index = 1;
  if (has_device_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->device_index(), output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.System.Device)
}

int System_Device::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 device_Index = 1;
    if (has_device_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_index());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void System_Device::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const System_Device*>(&from));
}

void System_Device::MergeFrom(const System_Device& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_index()) {
      set_device_index(from.device_index());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void System_Device::CopyFrom(const System_Device& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool System_Device::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void System_Device::Swap(System_Device* other) {
  if (other != this) {
    std::swap(device_index_, other->device_index_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string System_Device::GetTypeName() const {
  return "RdsProtobuf.System.Device";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int System_Receiver::kDeviceIndexFieldNumber;
const int System_Receiver::kChannelIndexFieldNumber;
const int System_Receiver::kStatusFieldNumber;
const int System_Receiver::kSettingsPrm300FieldNumber;
const int System_Receiver::kSettingsSmolenskRpuFieldNumber;
#endif  // !_MSC_VER

System_Receiver::System_Receiver()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.System.Receiver)
}

void System_Receiver::InitAsDefaultInstance() {
}

System_Receiver::System_Receiver(const System_Receiver& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.System.Receiver)
}

void System_Receiver::SharedCtor() {
  _cached_size_ = 0;
  device_index_ = 0;
  channel_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_messageType();
}

System_Receiver::~System_Receiver() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.System.Receiver)
  SharedDtor();
}

void System_Receiver::SharedDtor() {
  if (has_messageType()) {
    clear_messageType();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void System_Receiver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const System_Receiver& System_Receiver::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

System_Receiver* System_Receiver::default_instance_ = NULL;

System_Receiver* System_Receiver::New() const {
  return new System_Receiver;
}

void System_Receiver::clear_messageType() {
  switch(messageType_case()) {
    case kStatus: {
      // No need to clear
      break;
    }
    case kSettingsPrm300: {
      delete messageType_.settingsprm300_;
      break;
    }
    case kSettingsSmolenskRpu: {
      delete messageType_.settingssmolenskrpu_;
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGETYPE_NOT_SET;
}


void System_Receiver::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<System_Receiver*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(device_index_, channel_index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  clear_messageType();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool System_Receiver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.System.Receiver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 device_Index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_index_)));
          set_has_device_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channel_Index;
        break;
      }

      // required int32 channel_Index = 2;
      case 2: {
        if (tag == 16) {
         parse_channel_Index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_index_)));
          set_has_channel_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional bool status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          clear_messageType();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &messageType_.status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_settingsPrm300;
        break;
      }

      // optional .RdsProtobuf.Prm300 settingsPrm300 = 4;
      case 4: {
        if (tag == 34) {
         parse_settingsPrm300:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settingsprm300()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_settingsSmolenskRpu;
        break;
      }

      // optional .RdsProtobuf.SmolenskRpu settingsSmolenskRpu = 5;
      case 5: {
        if (tag == 42) {
         parse_settingsSmolenskRpu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settingssmolenskrpu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.System.Receiver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.System.Receiver)
  return false;
#undef DO_
}

void System_Receiver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.System.Receiver)
  // required int32 device_Index = 1;
  if (has_device_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->device_index(), output);
  }

  // required int32 channel_Index = 2;
  if (has_channel_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel_index(), output);
  }

  // optional bool status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->status(), output);
  }

  // optional .RdsProtobuf.Prm300 settingsPrm300 = 4;
  if (has_settingsprm300()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->settingsprm300(), output);
  }

  // optional .RdsProtobuf.SmolenskRpu settingsSmolenskRpu = 5;
  if (has_settingssmolenskrpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->settingssmolenskrpu(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.System.Receiver)
}

int System_Receiver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 device_Index = 1;
    if (has_device_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_index());
    }

    // required int32 channel_Index = 2;
    if (has_channel_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel_index());
    }

  }
  switch (messageType_case()) {
    // optional bool status = 3;
    case kStatus: {
      total_size += 1 + 1;
      break;
    }
    // optional .RdsProtobuf.Prm300 settingsPrm300 = 4;
    case kSettingsPrm300: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settingsprm300());
      break;
    }
    // optional .RdsProtobuf.SmolenskRpu settingsSmolenskRpu = 5;
    case kSettingsSmolenskRpu: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settingssmolenskrpu());
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void System_Receiver::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const System_Receiver*>(&from));
}

void System_Receiver::MergeFrom(const System_Receiver& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.messageType_case()) {
    case kStatus: {
      set_status(from.status());
      break;
    }
    case kSettingsPrm300: {
      mutable_settingsprm300()->::RdsProtobuf::Prm300::MergeFrom(from.settingsprm300());
      break;
    }
    case kSettingsSmolenskRpu: {
      mutable_settingssmolenskrpu()->::RdsProtobuf::SmolenskRpu::MergeFrom(from.settingssmolenskrpu());
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_index()) {
      set_device_index(from.device_index());
    }
    if (from.has_channel_index()) {
      set_channel_index(from.channel_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void System_Receiver::CopyFrom(const System_Receiver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool System_Receiver::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_settingsprm300()) {
    if (!this->settingsprm300().IsInitialized()) return false;
  }
  if (has_settingssmolenskrpu()) {
    if (!this->settingssmolenskrpu().IsInitialized()) return false;
  }
  return true;
}

void System_Receiver::Swap(System_Receiver* other) {
  if (other != this) {
    std::swap(device_index_, other->device_index_);
    std::swap(channel_index_, other->channel_index_);
    std::swap(messageType_, other->messageType_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string System_Receiver::GetTypeName() const {
  return "RdsProtobuf.System.Receiver";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int System_SeparateReceiver::kReceiverIndexFieldNumber;
const int System_SeparateReceiver::kStatusFieldNumber;
const int System_SeparateReceiver::kSettingsPrm300FieldNumber;
const int System_SeparateReceiver::kSettingsSmolenskRpuFieldNumber;
#endif  // !_MSC_VER

System_SeparateReceiver::System_SeparateReceiver()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.System.SeparateReceiver)
}

void System_SeparateReceiver::InitAsDefaultInstance() {
}

System_SeparateReceiver::System_SeparateReceiver(const System_SeparateReceiver& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.System.SeparateReceiver)
}

void System_SeparateReceiver::SharedCtor() {
  _cached_size_ = 0;
  receiver_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_messageType();
}

System_SeparateReceiver::~System_SeparateReceiver() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.System.SeparateReceiver)
  SharedDtor();
}

void System_SeparateReceiver::SharedDtor() {
  if (has_messageType()) {
    clear_messageType();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void System_SeparateReceiver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const System_SeparateReceiver& System_SeparateReceiver::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

System_SeparateReceiver* System_SeparateReceiver::default_instance_ = NULL;

System_SeparateReceiver* System_SeparateReceiver::New() const {
  return new System_SeparateReceiver;
}

void System_SeparateReceiver::clear_messageType() {
  switch(messageType_case()) {
    case kStatus: {
      // No need to clear
      break;
    }
    case kSettingsPrm300: {
      delete messageType_.settingsprm300_;
      break;
    }
    case kSettingsSmolenskRpu: {
      delete messageType_.settingssmolenskrpu_;
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGETYPE_NOT_SET;
}


void System_SeparateReceiver::Clear() {
  receiver_index_ = 0;
  clear_messageType();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool System_SeparateReceiver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.System.SeparateReceiver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 receiver_Index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receiver_index_)));
          set_has_receiver_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional bool status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          clear_messageType();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &messageType_.status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_settingsPrm300;
        break;
      }

      // optional .RdsProtobuf.Prm300 settingsPrm300 = 4;
      case 4: {
        if (tag == 34) {
         parse_settingsPrm300:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settingsprm300()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_settingsSmolenskRpu;
        break;
      }

      // optional .RdsProtobuf.SmolenskRpu settingsSmolenskRpu = 5;
      case 5: {
        if (tag == 42) {
         parse_settingsSmolenskRpu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settingssmolenskrpu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.System.SeparateReceiver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.System.SeparateReceiver)
  return false;
#undef DO_
}

void System_SeparateReceiver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.System.SeparateReceiver)
  // required int32 receiver_Index = 1;
  if (has_receiver_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->receiver_index(), output);
  }

  // optional bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  // optional .RdsProtobuf.Prm300 settingsPrm300 = 4;
  if (has_settingsprm300()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->settingsprm300(), output);
  }

  // optional .RdsProtobuf.SmolenskRpu settingsSmolenskRpu = 5;
  if (has_settingssmolenskrpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->settingssmolenskrpu(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.System.SeparateReceiver)
}

int System_SeparateReceiver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 receiver_Index = 1;
    if (has_receiver_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receiver_index());
    }

  }
  switch (messageType_case()) {
    // optional bool status = 2;
    case kStatus: {
      total_size += 1 + 1;
      break;
    }
    // optional .RdsProtobuf.Prm300 settingsPrm300 = 4;
    case kSettingsPrm300: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settingsprm300());
      break;
    }
    // optional .RdsProtobuf.SmolenskRpu settingsSmolenskRpu = 5;
    case kSettingsSmolenskRpu: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settingssmolenskrpu());
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void System_SeparateReceiver::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const System_SeparateReceiver*>(&from));
}

void System_SeparateReceiver::MergeFrom(const System_SeparateReceiver& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.messageType_case()) {
    case kStatus: {
      set_status(from.status());
      break;
    }
    case kSettingsPrm300: {
      mutable_settingsprm300()->::RdsProtobuf::Prm300::MergeFrom(from.settingsprm300());
      break;
    }
    case kSettingsSmolenskRpu: {
      mutable_settingssmolenskrpu()->::RdsProtobuf::SmolenskRpu::MergeFrom(from.settingssmolenskrpu());
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_receiver_index()) {
      set_receiver_index(from.receiver_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void System_SeparateReceiver::CopyFrom(const System_SeparateReceiver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool System_SeparateReceiver::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_settingsprm300()) {
    if (!this->settingsprm300().IsInitialized()) return false;
  }
  if (has_settingssmolenskrpu()) {
    if (!this->settingssmolenskrpu().IsInitialized()) return false;
  }
  return true;
}

void System_SeparateReceiver::Swap(System_SeparateReceiver* other) {
  if (other != this) {
    std::swap(receiver_index_, other->receiver_index_);
    std::swap(messageType_, other->messageType_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string System_SeparateReceiver::GetTypeName() const {
  return "RdsProtobuf.System.SeparateReceiver";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int System::kOptionsFieldNumber;
const int System::kDeviceFieldNumber;
const int System::kReceiverFieldNumber;
const int System::kSeparateReceiverFieldNumber;
#endif  // !_MSC_VER

System::System()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.System)
}

void System::InitAsDefaultInstance() {
}

System::System(const System& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.System)
}

void System::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_Message();
}

System::~System() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.System)
  SharedDtor();
}

void System::SharedDtor() {
  if (has_Message()) {
    clear_Message();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void System::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const System& System::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

System* System::default_instance_ = NULL;

System* System::New() const {
  return new System;
}

void System::clear_Message() {
  switch(Message_case()) {
    case kOptions: {
      delete Message_.options_;
      break;
    }
    case kDevice: {
      delete Message_.device_;
      break;
    }
    case kReceiver: {
      delete Message_.receiver_;
      break;
    }
    case kSeparateReceiver: {
      delete Message_.separate_receiver_;
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void System::Clear() {
  clear_Message();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool System::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.System)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RdsProtobuf.System.SystemOptions options = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_device;
        break;
      }

      // optional .RdsProtobuf.System.Device device = 2;
      case 2: {
        if (tag == 18) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_receiver;
        break;
      }

      // optional .RdsProtobuf.System.Receiver receiver = 3;
      case 3: {
        if (tag == 26) {
         parse_receiver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_separate_Receiver;
        break;
      }

      // optional .RdsProtobuf.System.SeparateReceiver separate_Receiver = 4;
      case 4: {
        if (tag == 34) {
         parse_separate_Receiver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_separate_receiver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.System)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.System)
  return false;
#undef DO_
}

void System::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.System)
  // optional .RdsProtobuf.System.SystemOptions options = 1;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->options(), output);
  }

  // optional .RdsProtobuf.System.Device device = 2;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->device(), output);
  }

  // optional .RdsProtobuf.System.Receiver receiver = 3;
  if (has_receiver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->receiver(), output);
  }

  // optional .RdsProtobuf.System.SeparateReceiver separate_Receiver = 4;
  if (has_separate_receiver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->separate_receiver(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.System)
}

int System::ByteSize() const {
  int total_size = 0;

  switch (Message_case()) {
    // optional .RdsProtobuf.System.SystemOptions options = 1;
    case kOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
      break;
    }
    // optional .RdsProtobuf.System.Device device = 2;
    case kDevice: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device());
      break;
    }
    // optional .RdsProtobuf.System.Receiver receiver = 3;
    case kReceiver: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receiver());
      break;
    }
    // optional .RdsProtobuf.System.SeparateReceiver separate_Receiver = 4;
    case kSeparateReceiver: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->separate_receiver());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void System::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const System*>(&from));
}

void System::MergeFrom(const System& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.Message_case()) {
    case kOptions: {
      mutable_options()->::RdsProtobuf::System_SystemOptions::MergeFrom(from.options());
      break;
    }
    case kDevice: {
      mutable_device()->::RdsProtobuf::System_Device::MergeFrom(from.device());
      break;
    }
    case kReceiver: {
      mutable_receiver()->::RdsProtobuf::System_Receiver::MergeFrom(from.receiver());
      break;
    }
    case kSeparateReceiver: {
      mutable_separate_receiver()->::RdsProtobuf::System_SeparateReceiver::MergeFrom(from.separate_receiver());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void System::CopyFrom(const System& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool System::IsInitialized() const {

  if (has_options()) {
    if (!this->options().IsInitialized()) return false;
  }
  if (has_device()) {
    if (!this->device().IsInitialized()) return false;
  }
  if (has_receiver()) {
    if (!this->receiver().IsInitialized()) return false;
  }
  if (has_separate_receiver()) {
    if (!this->separate_receiver().IsInitialized()) return false;
  }
  return true;
}

void System::Swap(System* other) {
  if (other != this) {
    std::swap(Message_, other->Message_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string System::GetTypeName() const {
  return "RdsProtobuf.System";
}


// ===================================================================

#ifndef _MSC_VER
const int Location_LocationOptions::kChanNumFieldNumber;
const int Location_LocationOptions::kModeFieldNumber;
const int Location_LocationOptions::kBaseIndexFieldNumber;
const int Location_LocationOptions::kConvolutionFieldNumber;
const int Location_LocationOptions::kSpectrumMeanFieldNumber;
const int Location_LocationOptions::kTuningModeFieldNumber;
const int Location_LocationOptions::kDurationFieldNumber;
const int Location_LocationOptions::kCentralFreqFieldNumber;
#endif  // !_MSC_VER

Location_LocationOptions::Location_LocationOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.Location.LocationOptions)
}

void Location_LocationOptions::InitAsDefaultInstance() {
}

Location_LocationOptions::Location_LocationOptions(const Location_LocationOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.Location.LocationOptions)
}

void Location_LocationOptions::SharedCtor() {
  _cached_size_ = 0;
  channum_ = 0;
  mode_ = 0;
  baseindex_ = 0;
  convolution_ = false;
  spectrummean_ = 0;
  tuningmode_ = 0;
  duration_ = 0;
  centralfreq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Location_LocationOptions::~Location_LocationOptions() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.Location.LocationOptions)
  SharedDtor();
}

void Location_LocationOptions::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Location_LocationOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Location_LocationOptions& Location_LocationOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

Location_LocationOptions* Location_LocationOptions::default_instance_ = NULL;

Location_LocationOptions* Location_LocationOptions::New() const {
  return new Location_LocationOptions;
}

void Location_LocationOptions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Location_LocationOptions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(channum_, centralfreq_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Location_LocationOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.Location.LocationOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chanNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channum_)));
          set_has_channum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // required int32 mode = 2;
      case 2: {
        if (tag == 16) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_baseIndex;
        break;
      }

      // required int32 baseIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_baseIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseindex_)));
          set_has_baseindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_convolution;
        break;
      }

      // required bool convolution = 4;
      case 4: {
        if (tag == 32) {
         parse_convolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &convolution_)));
          set_has_convolution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_spectrumMean;
        break;
      }

      // required int32 spectrumMean = 5;
      case 5: {
        if (tag == 40) {
         parse_spectrumMean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spectrummean_)));
          set_has_spectrummean();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tuningMode;
        break;
      }

      // required int32 tuningMode = 6;
      case 6: {
        if (tag == 48) {
         parse_tuningMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tuningmode_)));
          set_has_tuningmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_duration;
        break;
      }

      // required int32 duration = 7;
      case 7: {
        if (tag == 56) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_centralFreq;
        break;
      }

      // required int32 centralFreq = 8;
      case 8: {
        if (tag == 64) {
         parse_centralFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &centralfreq_)));
          set_has_centralfreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.Location.LocationOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.Location.LocationOptions)
  return false;
#undef DO_
}

void Location_LocationOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.Location.LocationOptions)
  // required int32 chanNum = 1;
  if (has_channum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channum(), output);
  }

  // required int32 mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mode(), output);
  }

  // required int32 baseIndex = 3;
  if (has_baseindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->baseindex(), output);
  }

  // required bool convolution = 4;
  if (has_convolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->convolution(), output);
  }

  // required int32 spectrumMean = 5;
  if (has_spectrummean()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->spectrummean(), output);
  }

  // required int32 tuningMode = 6;
  if (has_tuningmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tuningmode(), output);
  }

  // required int32 duration = 7;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->duration(), output);
  }

  // required int32 centralFreq = 8;
  if (has_centralfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->centralfreq(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.Location.LocationOptions)
}

int Location_LocationOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chanNum = 1;
    if (has_channum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channum());
    }

    // required int32 mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // required int32 baseIndex = 3;
    if (has_baseindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseindex());
    }

    // required bool convolution = 4;
    if (has_convolution()) {
      total_size += 1 + 1;
    }

    // required int32 spectrumMean = 5;
    if (has_spectrummean()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spectrummean());
    }

    // required int32 tuningMode = 6;
    if (has_tuningmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tuningmode());
    }

    // required int32 duration = 7;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // required int32 centralFreq = 8;
    if (has_centralfreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->centralfreq());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location_LocationOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Location_LocationOptions*>(&from));
}

void Location_LocationOptions::MergeFrom(const Location_LocationOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channum()) {
      set_channum(from.channum());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_baseindex()) {
      set_baseindex(from.baseindex());
    }
    if (from.has_convolution()) {
      set_convolution(from.convolution());
    }
    if (from.has_spectrummean()) {
      set_spectrummean(from.spectrummean());
    }
    if (from.has_tuningmode()) {
      set_tuningmode(from.tuningmode());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_centralfreq()) {
      set_centralfreq(from.centralfreq());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Location_LocationOptions::CopyFrom(const Location_LocationOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location_LocationOptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void Location_LocationOptions::Swap(Location_LocationOptions* other) {
  if (other != this) {
    std::swap(channum_, other->channum_);
    std::swap(mode_, other->mode_);
    std::swap(baseindex_, other->baseindex_);
    std::swap(convolution_, other->convolution_);
    std::swap(spectrummean_, other->spectrummean_);
    std::swap(tuningmode_, other->tuningmode_);
    std::swap(duration_, other->duration_);
    std::swap(centralfreq_, other->centralfreq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Location_LocationOptions::GetTypeName() const {
  return "RdsProtobuf.Location.LocationOptions";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Location_FilterOptions::kRangeFieldNumber;
const int Location_FilterOptions::kShiftFieldNumber;
#endif  // !_MSC_VER

Location_FilterOptions::Location_FilterOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.Location.FilterOptions)
}

void Location_FilterOptions::InitAsDefaultInstance() {
}

Location_FilterOptions::Location_FilterOptions(const Location_FilterOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.Location.FilterOptions)
}

void Location_FilterOptions::SharedCtor() {
  _cached_size_ = 0;
  range_ = 0;
  shift_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Location_FilterOptions::~Location_FilterOptions() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.Location.FilterOptions)
  SharedDtor();
}

void Location_FilterOptions::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Location_FilterOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Location_FilterOptions& Location_FilterOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

Location_FilterOptions* Location_FilterOptions::default_instance_ = NULL;

Location_FilterOptions* Location_FilterOptions::New() const {
  return new Location_FilterOptions;
}

void Location_FilterOptions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Location_FilterOptions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(range_, shift_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Location_FilterOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.Location.FilterOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 range = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shift;
        break;
      }

      // required int32 shift = 2;
      case 2: {
        if (tag == 16) {
         parse_shift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shift_)));
          set_has_shift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.Location.FilterOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.Location.FilterOptions)
  return false;
#undef DO_
}

void Location_FilterOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.Location.FilterOptions)
  // required int32 range = 1;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->range(), output);
  }

  // required int32 shift = 2;
  if (has_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shift(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.Location.FilterOptions)
}

int Location_FilterOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 range = 1;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range());
    }

    // required int32 shift = 2;
    if (has_shift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shift());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location_FilterOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Location_FilterOptions*>(&from));
}

void Location_FilterOptions::MergeFrom(const Location_FilterOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_shift()) {
      set_shift(from.shift());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Location_FilterOptions::CopyFrom(const Location_FilterOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location_FilterOptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Location_FilterOptions::Swap(Location_FilterOptions* other) {
  if (other != this) {
    std::swap(range_, other->range_);
    std::swap(shift_, other->shift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Location_FilterOptions::GetTypeName() const {
  return "RdsProtobuf.Location.FilterOptions";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Location::kOptionsFieldNumber;
const int Location::kFilterFieldNumber;
#endif  // !_MSC_VER

Location::Location()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.Location)
}

void Location::InitAsDefaultInstance() {
}

Location::Location(const Location& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.Location)
}

void Location::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_Message();
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.Location)
  SharedDtor();
}

void Location::SharedDtor() {
  if (has_Message()) {
    clear_Message();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Location& Location::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

Location* Location::default_instance_ = NULL;

Location* Location::New() const {
  return new Location;
}

void Location::clear_Message() {
  switch(Message_case()) {
    case kOptions: {
      delete Message_.options_;
      break;
    }
    case kFilter: {
      delete Message_.filter_;
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void Location::Clear() {
  clear_Message();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RdsProtobuf.Location.LocationOptions options = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filter;
        break;
      }

      // optional .RdsProtobuf.Location.FilterOptions filter = 2;
      case 2: {
        if (tag == 18) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.Location)
  return false;
#undef DO_
}

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.Location)
  // optional .RdsProtobuf.Location.LocationOptions options = 1;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->options(), output);
  }

  // optional .RdsProtobuf.Location.FilterOptions filter = 2;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->filter(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.Location)
}

int Location::ByteSize() const {
  int total_size = 0;

  switch (Message_case()) {
    // optional .RdsProtobuf.Location.LocationOptions options = 1;
    case kOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
      break;
    }
    // optional .RdsProtobuf.Location.FilterOptions filter = 2;
    case kFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Location*>(&from));
}

void Location::MergeFrom(const Location& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.Message_case()) {
    case kOptions: {
      mutable_options()->::RdsProtobuf::Location_LocationOptions::MergeFrom(from.options());
      break;
    }
    case kFilter: {
      mutable_filter()->::RdsProtobuf::Location_FilterOptions::MergeFrom(from.filter());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Location::CopyFrom(const Location& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {

  if (has_options()) {
    if (!this->options().IsInitialized()) return false;
  }
  if (has_filter()) {
    if (!this->filter().IsInitialized()) return false;
  }
  return true;
}

void Location::Swap(Location* other) {
  if (other != this) {
    std::swap(Message_, other->Message_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Location::GetTypeName() const {
  return "RdsProtobuf.Location";
}


// ===================================================================

#ifndef _MSC_VER
const int Detector_DetectorOptions::kChanNumFieldNumber;
const int Detector_DetectorOptions::kDurationFieldNumber;
const int Detector_DetectorOptions::kStartScanFreqFieldNumber;
const int Detector_DetectorOptions::kEndScanFreqFieldNumber;
const int Detector_DetectorOptions::kLoopNumFieldNumber;
const int Detector_DetectorOptions::kSpectrumMeanFieldNumber;
const int Detector_DetectorOptions::kConvolutionFieldNumber;
const int Detector_DetectorOptions::kVeracityThresholdFieldNumber;
#endif  // !_MSC_VER

Detector_DetectorOptions::Detector_DetectorOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.Detector.DetectorOptions)
}

void Detector_DetectorOptions::InitAsDefaultInstance() {
}

Detector_DetectorOptions::Detector_DetectorOptions(const Detector_DetectorOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.Detector.DetectorOptions)
}

void Detector_DetectorOptions::SharedCtor() {
  _cached_size_ = 0;
  channum_ = 0;
  duration_ = 0;
  startscanfreq_ = 0;
  endscanfreq_ = 0;
  loopnum_ = 0;
  spectrummean_ = 0;
  convolution_ = false;
  veracitythreshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Detector_DetectorOptions::~Detector_DetectorOptions() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.Detector.DetectorOptions)
  SharedDtor();
}

void Detector_DetectorOptions::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Detector_DetectorOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Detector_DetectorOptions& Detector_DetectorOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

Detector_DetectorOptions* Detector_DetectorOptions::default_instance_ = NULL;

Detector_DetectorOptions* Detector_DetectorOptions::New() const {
  return new Detector_DetectorOptions;
}

void Detector_DetectorOptions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Detector_DetectorOptions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(channum_, veracitythreshold_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Detector_DetectorOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.Detector.DetectorOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chanNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channum_)));
          set_has_channum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // required int32 duration = 2;
      case 2: {
        if (tag == 16) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_startScanFreq;
        break;
      }

      // required int32 startScanFreq = 3;
      case 3: {
        if (tag == 24) {
         parse_startScanFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startscanfreq_)));
          set_has_startscanfreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_endScanFreq;
        break;
      }

      // required int32 endScanFreq = 4;
      case 4: {
        if (tag == 32) {
         parse_endScanFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endscanfreq_)));
          set_has_endscanfreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_loopNum;
        break;
      }

      // required int32 loopNum = 5;
      case 5: {
        if (tag == 40) {
         parse_loopNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loopnum_)));
          set_has_loopnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_spectrumMean;
        break;
      }

      // required int32 spectrumMean = 6;
      case 6: {
        if (tag == 48) {
         parse_spectrumMean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spectrummean_)));
          set_has_spectrummean();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_convolution;
        break;
      }

      // required bool convolution = 7;
      case 7: {
        if (tag == 56) {
         parse_convolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &convolution_)));
          set_has_convolution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_veracityThreshold;
        break;
      }

      // required int32 veracityThreshold = 8;
      case 8: {
        if (tag == 64) {
         parse_veracityThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &veracitythreshold_)));
          set_has_veracitythreshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.Detector.DetectorOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.Detector.DetectorOptions)
  return false;
#undef DO_
}

void Detector_DetectorOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.Detector.DetectorOptions)
  // required int32 chanNum = 1;
  if (has_channum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channum(), output);
  }

  // required int32 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  // required int32 startScanFreq = 3;
  if (has_startscanfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->startscanfreq(), output);
  }

  // required int32 endScanFreq = 4;
  if (has_endscanfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->endscanfreq(), output);
  }

  // required int32 loopNum = 5;
  if (has_loopnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->loopnum(), output);
  }

  // required int32 spectrumMean = 6;
  if (has_spectrummean()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->spectrummean(), output);
  }

  // required bool convolution = 7;
  if (has_convolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->convolution(), output);
  }

  // required int32 veracityThreshold = 8;
  if (has_veracitythreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->veracitythreshold(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.Detector.DetectorOptions)
}

int Detector_DetectorOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chanNum = 1;
    if (has_channum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channum());
    }

    // required int32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // required int32 startScanFreq = 3;
    if (has_startscanfreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startscanfreq());
    }

    // required int32 endScanFreq = 4;
    if (has_endscanfreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endscanfreq());
    }

    // required int32 loopNum = 5;
    if (has_loopnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loopnum());
    }

    // required int32 spectrumMean = 6;
    if (has_spectrummean()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spectrummean());
    }

    // required bool convolution = 7;
    if (has_convolution()) {
      total_size += 1 + 1;
    }

    // required int32 veracityThreshold = 8;
    if (has_veracitythreshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->veracitythreshold());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Detector_DetectorOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Detector_DetectorOptions*>(&from));
}

void Detector_DetectorOptions::MergeFrom(const Detector_DetectorOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channum()) {
      set_channum(from.channum());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_startscanfreq()) {
      set_startscanfreq(from.startscanfreq());
    }
    if (from.has_endscanfreq()) {
      set_endscanfreq(from.endscanfreq());
    }
    if (from.has_loopnum()) {
      set_loopnum(from.loopnum());
    }
    if (from.has_spectrummean()) {
      set_spectrummean(from.spectrummean());
    }
    if (from.has_convolution()) {
      set_convolution(from.convolution());
    }
    if (from.has_veracitythreshold()) {
      set_veracitythreshold(from.veracitythreshold());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Detector_DetectorOptions::CopyFrom(const Detector_DetectorOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detector_DetectorOptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void Detector_DetectorOptions::Swap(Detector_DetectorOptions* other) {
  if (other != this) {
    std::swap(channum_, other->channum_);
    std::swap(duration_, other->duration_);
    std::swap(startscanfreq_, other->startscanfreq_);
    std::swap(endscanfreq_, other->endscanfreq_);
    std::swap(loopnum_, other->loopnum_);
    std::swap(spectrummean_, other->spectrummean_);
    std::swap(convolution_, other->convolution_);
    std::swap(veracitythreshold_, other->veracitythreshold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Detector_DetectorOptions::GetTypeName() const {
  return "RdsProtobuf.Detector.DetectorOptions";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Detector::kOptionsFieldNumber;
#endif  // !_MSC_VER

Detector::Detector()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.Detector)
}

void Detector::InitAsDefaultInstance() {
}

Detector::Detector(const Detector& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.Detector)
}

void Detector::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_Message();
}

Detector::~Detector() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.Detector)
  SharedDtor();
}

void Detector::SharedDtor() {
  if (has_Message()) {
    clear_Message();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Detector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Detector& Detector::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

Detector* Detector::default_instance_ = NULL;

Detector* Detector::New() const {
  return new Detector;
}

void Detector::clear_Message() {
  switch(Message_case()) {
    case kOptions: {
      delete Message_.options_;
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void Detector::Clear() {
  clear_Message();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Detector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.Detector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RdsProtobuf.Detector.DetectorOptions options = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.Detector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.Detector)
  return false;
#undef DO_
}

void Detector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.Detector)
  // optional .RdsProtobuf.Detector.DetectorOptions options = 1;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->options(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.Detector)
}

int Detector::ByteSize() const {
  int total_size = 0;

  switch (Message_case()) {
    // optional .RdsProtobuf.Detector.DetectorOptions options = 1;
    case kOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Detector::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Detector*>(&from));
}

void Detector::MergeFrom(const Detector& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.Message_case()) {
    case kOptions: {
      mutable_options()->::RdsProtobuf::Detector_DetectorOptions::MergeFrom(from.options());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Detector::CopyFrom(const Detector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detector::IsInitialized() const {

  if (has_options()) {
    if (!this->options().IsInitialized()) return false;
  }
  return true;
}

void Detector::Swap(Detector* other) {
  if (other != this) {
    std::swap(Message_, other->Message_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Detector::GetTypeName() const {
  return "RdsProtobuf.Detector";
}


// ===================================================================

#ifndef _MSC_VER
const int Analysis_AnalysisOptions::kChanIndexFieldNumber;
const int Analysis_AnalysisOptions::kDurationFieldNumber;
const int Analysis_AnalysisOptions::kCentralFreqFieldNumber;
const int Analysis_AnalysisOptions::kSelectedFieldNumber;
const int Analysis_AnalysisOptions::kZoomedFieldNumber;
#endif  // !_MSC_VER

Analysis_AnalysisOptions::Analysis_AnalysisOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.Analysis.AnalysisOptions)
}

void Analysis_AnalysisOptions::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  selected_ = const_cast< ::RdsProtobuf::TimeFreqArea*>(
      ::RdsProtobuf::TimeFreqArea::internal_default_instance());
#else
  selected_ = const_cast< ::RdsProtobuf::TimeFreqArea*>(&::RdsProtobuf::TimeFreqArea::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  zoomed_ = const_cast< ::RdsProtobuf::TimeFreqArea*>(
      ::RdsProtobuf::TimeFreqArea::internal_default_instance());
#else
  zoomed_ = const_cast< ::RdsProtobuf::TimeFreqArea*>(&::RdsProtobuf::TimeFreqArea::default_instance());
#endif
}

Analysis_AnalysisOptions::Analysis_AnalysisOptions(const Analysis_AnalysisOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.Analysis.AnalysisOptions)
}

void Analysis_AnalysisOptions::SharedCtor() {
  _cached_size_ = 0;
  chanindex_ = 0;
  duration_ = 0;
  centralfreq_ = 0;
  selected_ = NULL;
  zoomed_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Analysis_AnalysisOptions::~Analysis_AnalysisOptions() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.Analysis.AnalysisOptions)
  SharedDtor();
}

void Analysis_AnalysisOptions::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete selected_;
    delete zoomed_;
  }
}

void Analysis_AnalysisOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Analysis_AnalysisOptions& Analysis_AnalysisOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

Analysis_AnalysisOptions* Analysis_AnalysisOptions::default_instance_ = NULL;

Analysis_AnalysisOptions* Analysis_AnalysisOptions::New() const {
  return new Analysis_AnalysisOptions;
}

void Analysis_AnalysisOptions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Analysis_AnalysisOptions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(chanindex_, duration_);
    centralfreq_ = 0;
    if (has_selected()) {
      if (selected_ != NULL) selected_->::RdsProtobuf::TimeFreqArea::Clear();
    }
    if (has_zoomed()) {
      if (zoomed_ != NULL) zoomed_->::RdsProtobuf::TimeFreqArea::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Analysis_AnalysisOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.Analysis.AnalysisOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chanIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chanindex_)));
          set_has_chanindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // required int32 duration = 2;
      case 2: {
        if (tag == 16) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_centralFreq;
        break;
      }

      // required int32 centralFreq = 3;
      case 3: {
        if (tag == 24) {
         parse_centralFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &centralfreq_)));
          set_has_centralfreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_selected;
        break;
      }

      // required .RdsProtobuf.TimeFreqArea selected = 4;
      case 4: {
        if (tag == 34) {
         parse_selected:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selected()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_zoomed;
        break;
      }

      // required .RdsProtobuf.TimeFreqArea zoomed = 5;
      case 5: {
        if (tag == 42) {
         parse_zoomed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zoomed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.Analysis.AnalysisOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.Analysis.AnalysisOptions)
  return false;
#undef DO_
}

void Analysis_AnalysisOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.Analysis.AnalysisOptions)
  // required int32 chanIndex = 1;
  if (has_chanindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chanindex(), output);
  }

  // required int32 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  // required int32 centralFreq = 3;
  if (has_centralfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->centralfreq(), output);
  }

  // required .RdsProtobuf.TimeFreqArea selected = 4;
  if (has_selected()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->selected(), output);
  }

  // required .RdsProtobuf.TimeFreqArea zoomed = 5;
  if (has_zoomed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->zoomed(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.Analysis.AnalysisOptions)
}

int Analysis_AnalysisOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chanIndex = 1;
    if (has_chanindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chanindex());
    }

    // required int32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // required int32 centralFreq = 3;
    if (has_centralfreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->centralfreq());
    }

    // required .RdsProtobuf.TimeFreqArea selected = 4;
    if (has_selected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selected());
    }

    // required .RdsProtobuf.TimeFreqArea zoomed = 5;
    if (has_zoomed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zoomed());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Analysis_AnalysisOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Analysis_AnalysisOptions*>(&from));
}

void Analysis_AnalysisOptions::MergeFrom(const Analysis_AnalysisOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chanindex()) {
      set_chanindex(from.chanindex());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_centralfreq()) {
      set_centralfreq(from.centralfreq());
    }
    if (from.has_selected()) {
      mutable_selected()->::RdsProtobuf::TimeFreqArea::MergeFrom(from.selected());
    }
    if (from.has_zoomed()) {
      mutable_zoomed()->::RdsProtobuf::TimeFreqArea::MergeFrom(from.zoomed());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Analysis_AnalysisOptions::CopyFrom(const Analysis_AnalysisOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Analysis_AnalysisOptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_selected()) {
    if (!this->selected().IsInitialized()) return false;
  }
  if (has_zoomed()) {
    if (!this->zoomed().IsInitialized()) return false;
  }
  return true;
}

void Analysis_AnalysisOptions::Swap(Analysis_AnalysisOptions* other) {
  if (other != this) {
    std::swap(chanindex_, other->chanindex_);
    std::swap(duration_, other->duration_);
    std::swap(centralfreq_, other->centralfreq_);
    std::swap(selected_, other->selected_);
    std::swap(zoomed_, other->zoomed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Analysis_AnalysisOptions::GetTypeName() const {
  return "RdsProtobuf.Analysis.AnalysisOptions";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Analysis::kOptionsFieldNumber;
#endif  // !_MSC_VER

Analysis::Analysis()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.Analysis)
}

void Analysis::InitAsDefaultInstance() {
}

Analysis::Analysis(const Analysis& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.Analysis)
}

void Analysis::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_Message();
}

Analysis::~Analysis() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.Analysis)
  SharedDtor();
}

void Analysis::SharedDtor() {
  if (has_Message()) {
    clear_Message();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Analysis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Analysis& Analysis::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

Analysis* Analysis::default_instance_ = NULL;

Analysis* Analysis::New() const {
  return new Analysis;
}

void Analysis::clear_Message() {
  switch(Message_case()) {
    case kOptions: {
      delete Message_.options_;
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void Analysis::Clear() {
  clear_Message();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Analysis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.Analysis)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RdsProtobuf.Analysis.AnalysisOptions options = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.Analysis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.Analysis)
  return false;
#undef DO_
}

void Analysis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.Analysis)
  // optional .RdsProtobuf.Analysis.AnalysisOptions options = 1;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->options(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.Analysis)
}

int Analysis::ByteSize() const {
  int total_size = 0;

  switch (Message_case()) {
    // optional .RdsProtobuf.Analysis.AnalysisOptions options = 1;
    case kOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Analysis::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Analysis*>(&from));
}

void Analysis::MergeFrom(const Analysis& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.Message_case()) {
    case kOptions: {
      mutable_options()->::RdsProtobuf::Analysis_AnalysisOptions::MergeFrom(from.options());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Analysis::CopyFrom(const Analysis& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Analysis::IsInitialized() const {

  if (has_options()) {
    if (!this->options().IsInitialized()) return false;
  }
  return true;
}

void Analysis::Swap(Analysis* other) {
  if (other != this) {
    std::swap(Message_, other->Message_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Analysis::GetTypeName() const {
  return "RdsProtobuf.Analysis";
}


// ===================================================================

#ifndef _MSC_VER
const int DataStatus::kStatusFieldNumber;
const int DataStatus::kLengthFieldNumber;
#endif  // !_MSC_VER

DataStatus::DataStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.DataStatus)
}

void DataStatus::InitAsDefaultInstance() {
}

DataStatus::DataStatus(const DataStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.DataStatus)
}

void DataStatus::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataStatus::~DataStatus() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.DataStatus)
  SharedDtor();
}

void DataStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DataStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataStatus& DataStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

DataStatus* DataStatus::default_instance_ = NULL;

DataStatus* DataStatus::New() const {
  return new DataStatus;
}

void DataStatus::Clear() {
  length_ = 0;
  status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DataStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.DataStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool status = 1;
      case 1: {
        if (tag == 8) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 8, input, this->mutable_status())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_status())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_status;
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // required int32 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.DataStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.DataStatus)
  return false;
#undef DO_
}

void DataStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.DataStatus)
  // repeated bool status = 1;
  for (int i = 0; i < this->status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      1, this->status(i), output);
  }

  // required int32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.DataStatus)
}

int DataStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

  }
  // repeated bool status = 1;
  {
    int data_size = 0;
    data_size = 1 * this->status_size();
    total_size += 1 * this->status_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataStatus*>(&from));
}

void DataStatus::MergeFrom(const DataStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  status_.MergeFrom(from.status_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DataStatus::CopyFrom(const DataStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void DataStatus::Swap(DataStatus* other) {
  if (other != this) {
    status_.Swap(&other->status_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DataStatus::GetTypeName() const {
  return "RdsProtobuf.DataStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int LocationSpectrum::kIndexFieldNumber;
const int LocationSpectrum::kDataFieldNumber;
const int LocationSpectrum::kLengthFieldNumber;
const int LocationSpectrum::kStartFreqFieldNumber;
const int LocationSpectrum::kStepFreqFieldNumber;
const int LocationSpectrum::kFreqShiftFieldNumber;
const int LocationSpectrum::kSignalRangeFieldNumber;
#endif  // !_MSC_VER

LocationSpectrum::LocationSpectrum()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.LocationSpectrum)
}

void LocationSpectrum::InitAsDefaultInstance() {
}

LocationSpectrum::LocationSpectrum(const LocationSpectrum& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.LocationSpectrum)
}

void LocationSpectrum::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  length_ = 0;
  startfreq_ = 0;
  stepfreq_ = 0;
  freqshift_ = 0;
  signalrange_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocationSpectrum::~LocationSpectrum() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.LocationSpectrum)
  SharedDtor();
}

void LocationSpectrum::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LocationSpectrum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LocationSpectrum& LocationSpectrum::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

LocationSpectrum* LocationSpectrum::default_instance_ = NULL;

LocationSpectrum* LocationSpectrum::New() const {
  return new LocationSpectrum;
}

void LocationSpectrum::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LocationSpectrum*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 125) {
    ZR_(index_, signalrange_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LocationSpectrum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.LocationSpectrum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_data;
        break;
      }

      // repeated float data = 2;
      case 2: {
        if (tag == 21) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_data())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_data;
        if (input->ExpectTag(24)) goto parse_length;
        break;
      }

      // required int32 length = 3;
      case 3: {
        if (tag == 24) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_startFreq;
        break;
      }

      // required double startFreq = 4;
      case 4: {
        if (tag == 33) {
         parse_startFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startfreq_)));
          set_has_startfreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_stepFreq;
        break;
      }

      // required double stepFreq = 5;
      case 5: {
        if (tag == 41) {
         parse_stepFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stepfreq_)));
          set_has_stepfreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_freqShift;
        break;
      }

      // required int32 freqShift = 6;
      case 6: {
        if (tag == 48) {
         parse_freqShift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freqshift_)));
          set_has_freqshift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_signalRange;
        break;
      }

      // required int32 signalRange = 7;
      case 7: {
        if (tag == 56) {
         parse_signalRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signalrange_)));
          set_has_signalrange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.LocationSpectrum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.LocationSpectrum)
  return false;
#undef DO_
}

void LocationSpectrum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.LocationSpectrum)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // repeated float data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->data(i), output);
  }

  // required int32 length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->length(), output);
  }

  // required double startFreq = 4;
  if (has_startfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->startfreq(), output);
  }

  // required double stepFreq = 5;
  if (has_stepfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->stepfreq(), output);
  }

  // required int32 freqShift = 6;
  if (has_freqshift()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->freqshift(), output);
  }

  // required int32 signalRange = 7;
  if (has_signalrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->signalrange(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.LocationSpectrum)
}

int LocationSpectrum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 length = 3;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // required double startFreq = 4;
    if (has_startfreq()) {
      total_size += 1 + 8;
    }

    // required double stepFreq = 5;
    if (has_stepfreq()) {
      total_size += 1 + 8;
    }

    // required int32 freqShift = 6;
    if (has_freqshift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freqshift());
    }

    // required int32 signalRange = 7;
    if (has_signalrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signalrange());
    }

  }
  // repeated float data = 2;
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationSpectrum::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LocationSpectrum*>(&from));
}

void LocationSpectrum::MergeFrom(const LocationSpectrum& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_startfreq()) {
      set_startfreq(from.startfreq());
    }
    if (from.has_stepfreq()) {
      set_stepfreq(from.stepfreq());
    }
    if (from.has_freqshift()) {
      set_freqshift(from.freqshift());
    }
    if (from.has_signalrange()) {
      set_signalrange(from.signalrange());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LocationSpectrum::CopyFrom(const LocationSpectrum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationSpectrum::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007d) != 0x0000007d) return false;

  return true;
}

void LocationSpectrum::Swap(LocationSpectrum* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    data_.Swap(&other->data_);
    std::swap(length_, other->length_);
    std::swap(startfreq_, other->startfreq_);
    std::swap(stepfreq_, other->stepfreq_);
    std::swap(freqshift_, other->freqshift_);
    std::swap(signalrange_, other->signalrange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LocationSpectrum::GetTypeName() const {
  return "RdsProtobuf.LocationSpectrum";
}


// ===================================================================

#ifndef _MSC_VER
const int LocationXCov::kIndexFieldNumber;
const int LocationXCov::kDataFieldNumber;
const int LocationXCov::kTimeDiffFieldNumber;
const int LocationXCov::kVeracityFieldNumber;
#endif  // !_MSC_VER

LocationXCov::LocationXCov()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.LocationXCov)
}

void LocationXCov::InitAsDefaultInstance() {
}

LocationXCov::LocationXCov(const LocationXCov& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.LocationXCov)
}

void LocationXCov::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  timediff_ = 0;
  veracity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocationXCov::~LocationXCov() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.LocationXCov)
  SharedDtor();
}

void LocationXCov::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LocationXCov::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LocationXCov& LocationXCov::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

LocationXCov* LocationXCov::default_instance_ = NULL;

LocationXCov* LocationXCov::New() const {
  return new LocationXCov;
}

void LocationXCov::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LocationXCov*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, veracity_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool LocationXCov::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.LocationXCov)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_data;
        break;
      }

      // repeated float data = 2;
      case 2: {
        if (tag == 21) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_data())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_data;
        if (input->ExpectTag(29)) goto parse_timeDiff;
        break;
      }

      // required float timeDiff = 3;
      case 3: {
        if (tag == 29) {
         parse_timeDiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timediff_)));
          set_has_timediff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_veracity;
        break;
      }

      // required float veracity = 4;
      case 4: {
        if (tag == 37) {
         parse_veracity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &veracity_)));
          set_has_veracity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.LocationXCov)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.LocationXCov)
  return false;
#undef DO_
}

void LocationXCov::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.LocationXCov)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // repeated float data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->data(i), output);
  }

  // required float timeDiff = 3;
  if (has_timediff()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->timediff(), output);
  }

  // required float veracity = 4;
  if (has_veracity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->veracity(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.LocationXCov)
}

int LocationXCov::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required float timeDiff = 3;
    if (has_timediff()) {
      total_size += 1 + 4;
    }

    // required float veracity = 4;
    if (has_veracity()) {
      total_size += 1 + 4;
    }

  }
  // repeated float data = 2;
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationXCov::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LocationXCov*>(&from));
}

void LocationXCov::MergeFrom(const LocationXCov& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_timediff()) {
      set_timediff(from.timediff());
    }
    if (from.has_veracity()) {
      set_veracity(from.veracity());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LocationXCov::CopyFrom(const LocationXCov& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationXCov::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void LocationXCov::Swap(LocationXCov* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    data_.Swap(&other->data_);
    std::swap(timediff_, other->timediff_);
    std::swap(veracity_, other->veracity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LocationXCov::GetTypeName() const {
  return "RdsProtobuf.LocationXCov";
}


// ===================================================================

#ifndef _MSC_VER
const int DetectorSpectrum::kIndexFieldNumber;
const int DetectorSpectrum::kDataFieldNumber;
const int DetectorSpectrum::kLengthFieldNumber;
const int DetectorSpectrum::kStartFreqFieldNumber;
const int DetectorSpectrum::kStepFreqFieldNumber;
const int DetectorSpectrum::kFreqShiftFieldNumber;
const int DetectorSpectrum::kSignalRangeFieldNumber;
const int DetectorSpectrum::kFirstIndexFieldNumber;
const int DetectorSpectrum::kLastIndexFieldNumber;
const int DetectorSpectrum::kDetectedNumFieldNumber;
const int DetectorSpectrum::kCentralFreqFieldNumber;
#endif  // !_MSC_VER

DetectorSpectrum::DetectorSpectrum()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.DetectorSpectrum)
}

void DetectorSpectrum::InitAsDefaultInstance() {
}

DetectorSpectrum::DetectorSpectrum(const DetectorSpectrum& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.DetectorSpectrum)
}

void DetectorSpectrum::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  length_ = 0;
  startfreq_ = 0;
  stepfreq_ = 0;
  freqshift_ = 0;
  signalrange_ = 0;
  detectednum_ = 0;
  centralfreq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectorSpectrum::~DetectorSpectrum() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.DetectorSpectrum)
  SharedDtor();
}

void DetectorSpectrum::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DetectorSpectrum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DetectorSpectrum& DetectorSpectrum::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

DetectorSpectrum* DetectorSpectrum::default_instance_ = NULL;

DetectorSpectrum* DetectorSpectrum::New() const {
  return new DetectorSpectrum;
}

void DetectorSpectrum::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DetectorSpectrum*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 125) {
    ZR_(index_, signalrange_);
  }
  ZR_(detectednum_, centralfreq_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  firstindex_.Clear();
  lastindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DetectorSpectrum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.DetectorSpectrum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_data;
        break;
      }

      // repeated float data = 2;
      case 2: {
        if (tag == 21) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_data())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_data;
        if (input->ExpectTag(24)) goto parse_length;
        break;
      }

      // required int32 length = 3;
      case 3: {
        if (tag == 24) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_startFreq;
        break;
      }

      // required double startFreq = 4;
      case 4: {
        if (tag == 33) {
         parse_startFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startfreq_)));
          set_has_startfreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_stepFreq;
        break;
      }

      // required double stepFreq = 5;
      case 5: {
        if (tag == 41) {
         parse_stepFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stepfreq_)));
          set_has_stepfreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_freqShift;
        break;
      }

      // required int32 freqShift = 6;
      case 6: {
        if (tag == 48) {
         parse_freqShift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freqshift_)));
          set_has_freqshift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_signalRange;
        break;
      }

      // required int32 signalRange = 7;
      case 7: {
        if (tag == 56) {
         parse_signalRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signalrange_)));
          set_has_signalrange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_firstIndex;
        break;
      }

      // repeated int32 firstIndex = 8;
      case 8: {
        if (tag == 64) {
         parse_firstIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_firstindex())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_firstindex())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_firstIndex;
        if (input->ExpectTag(72)) goto parse_lastIndex;
        break;
      }

      // repeated int32 lastIndex = 9;
      case 9: {
        if (tag == 72) {
         parse_lastIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_lastindex())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lastindex())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_lastIndex;
        if (input->ExpectTag(80)) goto parse_detectedNum;
        break;
      }

      // required int32 detectedNum = 10;
      case 10: {
        if (tag == 80) {
         parse_detectedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &detectednum_)));
          set_has_detectednum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_centralFreq;
        break;
      }

      // required int32 centralFreq = 11;
      case 11: {
        if (tag == 88) {
         parse_centralFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &centralfreq_)));
          set_has_centralfreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.DetectorSpectrum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.DetectorSpectrum)
  return false;
#undef DO_
}

void DetectorSpectrum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.DetectorSpectrum)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // repeated float data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->data(i), output);
  }

  // required int32 length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->length(), output);
  }

  // required double startFreq = 4;
  if (has_startfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->startfreq(), output);
  }

  // required double stepFreq = 5;
  if (has_stepfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->stepfreq(), output);
  }

  // required int32 freqShift = 6;
  if (has_freqshift()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->freqshift(), output);
  }

  // required int32 signalRange = 7;
  if (has_signalrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->signalrange(), output);
  }

  // repeated int32 firstIndex = 8;
  for (int i = 0; i < this->firstindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->firstindex(i), output);
  }

  // repeated int32 lastIndex = 9;
  for (int i = 0; i < this->lastindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->lastindex(i), output);
  }

  // required int32 detectedNum = 10;
  if (has_detectednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->detectednum(), output);
  }

  // required int32 centralFreq = 11;
  if (has_centralfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->centralfreq(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.DetectorSpectrum)
}

int DetectorSpectrum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 length = 3;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // required double startFreq = 4;
    if (has_startfreq()) {
      total_size += 1 + 8;
    }

    // required double stepFreq = 5;
    if (has_stepfreq()) {
      total_size += 1 + 8;
    }

    // required int32 freqShift = 6;
    if (has_freqshift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freqshift());
    }

    // required int32 signalRange = 7;
    if (has_signalrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signalrange());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required int32 detectedNum = 10;
    if (has_detectednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->detectednum());
    }

    // required int32 centralFreq = 11;
    if (has_centralfreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->centralfreq());
    }

  }
  // repeated float data = 2;
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  // repeated int32 firstIndex = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->firstindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->firstindex(i));
    }
    total_size += 1 * this->firstindex_size() + data_size;
  }

  // repeated int32 lastIndex = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->lastindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lastindex(i));
    }
    total_size += 1 * this->lastindex_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectorSpectrum::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DetectorSpectrum*>(&from));
}

void DetectorSpectrum::MergeFrom(const DetectorSpectrum& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  firstindex_.MergeFrom(from.firstindex_);
  lastindex_.MergeFrom(from.lastindex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_startfreq()) {
      set_startfreq(from.startfreq());
    }
    if (from.has_stepfreq()) {
      set_stepfreq(from.stepfreq());
    }
    if (from.has_freqshift()) {
      set_freqshift(from.freqshift());
    }
    if (from.has_signalrange()) {
      set_signalrange(from.signalrange());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_detectednum()) {
      set_detectednum(from.detectednum());
    }
    if (from.has_centralfreq()) {
      set_centralfreq(from.centralfreq());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DetectorSpectrum::CopyFrom(const DetectorSpectrum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectorSpectrum::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000067d) != 0x0000067d) return false;

  return true;
}

void DetectorSpectrum::Swap(DetectorSpectrum* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    data_.Swap(&other->data_);
    std::swap(length_, other->length_);
    std::swap(startfreq_, other->startfreq_);
    std::swap(stepfreq_, other->stepfreq_);
    std::swap(freqshift_, other->freqshift_);
    std::swap(signalrange_, other->signalrange_);
    firstindex_.Swap(&other->firstindex_);
    lastindex_.Swap(&other->lastindex_);
    std::swap(detectednum_, other->detectednum_);
    std::swap(centralfreq_, other->centralfreq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DetectorSpectrum::GetTypeName() const {
  return "RdsProtobuf.DetectorSpectrum";
}


// ===================================================================

#ifndef _MSC_VER
const int AnalysisSpectrogram::kDataFieldNumber;
const int AnalysisSpectrogram::kLengthFieldNumber;
const int AnalysisSpectrogram::kColumnsFieldNumber;
const int AnalysisSpectrogram::kAreaFieldNumber;
#endif  // !_MSC_VER

AnalysisSpectrogram::AnalysisSpectrogram()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.AnalysisSpectrogram)
}

void AnalysisSpectrogram::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  area_ = const_cast< ::RdsProtobuf::TimeFreqArea*>(
      ::RdsProtobuf::TimeFreqArea::internal_default_instance());
#else
  area_ = const_cast< ::RdsProtobuf::TimeFreqArea*>(&::RdsProtobuf::TimeFreqArea::default_instance());
#endif
}

AnalysisSpectrogram::AnalysisSpectrogram(const AnalysisSpectrogram& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.AnalysisSpectrogram)
}

void AnalysisSpectrogram::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0;
  columns_ = 0;
  area_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnalysisSpectrogram::~AnalysisSpectrogram() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.AnalysisSpectrogram)
  SharedDtor();
}

void AnalysisSpectrogram::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete area_;
  }
}

void AnalysisSpectrogram::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AnalysisSpectrogram& AnalysisSpectrogram::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

AnalysisSpectrogram* AnalysisSpectrogram::default_instance_ = NULL;

AnalysisSpectrogram* AnalysisSpectrogram::New() const {
  return new AnalysisSpectrogram;
}

void AnalysisSpectrogram::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AnalysisSpectrogram*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 14) {
    ZR_(length_, columns_);
    if (has_area()) {
      if (area_ != NULL) area_->::RdsProtobuf::TimeFreqArea::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AnalysisSpectrogram::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.AnalysisSpectrogram)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float data = 1;
      case 1: {
        if (tag == 13) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_data())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(13)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // required int32 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_columns;
        break;
      }

      // required int32 columns = 3;
      case 3: {
        if (tag == 24) {
         parse_columns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &columns_)));
          set_has_columns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_area;
        break;
      }

      // required .RdsProtobuf.TimeFreqArea area = 4;
      case 4: {
        if (tag == 34) {
         parse_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.AnalysisSpectrogram)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.AnalysisSpectrogram)
  return false;
#undef DO_
}

void AnalysisSpectrogram::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.AnalysisSpectrogram)
  // repeated float data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->data(i), output);
  }

  // required int32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }

  // required int32 columns = 3;
  if (has_columns()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->columns(), output);
  }

  // required .RdsProtobuf.TimeFreqArea area = 4;
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->area(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.AnalysisSpectrogram)
}

int AnalysisSpectrogram::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // required int32 columns = 3;
    if (has_columns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->columns());
    }

    // required .RdsProtobuf.TimeFreqArea area = 4;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->area());
    }

  }
  // repeated float data = 1;
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalysisSpectrogram::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AnalysisSpectrogram*>(&from));
}

void AnalysisSpectrogram::MergeFrom(const AnalysisSpectrogram& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_columns()) {
      set_columns(from.columns());
    }
    if (from.has_area()) {
      mutable_area()->::RdsProtobuf::TimeFreqArea::MergeFrom(from.area());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AnalysisSpectrogram::CopyFrom(const AnalysisSpectrogram& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalysisSpectrogram::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  if (has_area()) {
    if (!this->area().IsInitialized()) return false;
  }
  return true;
}

void AnalysisSpectrogram::Swap(AnalysisSpectrogram* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(length_, other->length_);
    std::swap(columns_, other->columns_);
    std::swap(area_, other->area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AnalysisSpectrogram::GetTypeName() const {
  return "RdsProtobuf.AnalysisSpectrogram";
}


// ===================================================================

#ifndef _MSC_VER
const int ClientMessage_GetMessage::kModeFieldNumber;
const int ClientMessage_GetMessage::kSystemFieldNumber;
const int ClientMessage_GetMessage::kLocationFieldNumber;
const int ClientMessage_GetMessage::kDetectorFieldNumber;
const int ClientMessage_GetMessage::kAnalysisFieldNumber;
#endif  // !_MSC_VER

ClientMessage_GetMessage::ClientMessage_GetMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.ClientMessage.GetMessage)
}

void ClientMessage_GetMessage::InitAsDefaultInstance() {
}

ClientMessage_GetMessage::ClientMessage_GetMessage(const ClientMessage_GetMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.ClientMessage.GetMessage)
}

void ClientMessage_GetMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_Message();
}

ClientMessage_GetMessage::~ClientMessage_GetMessage() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.ClientMessage.GetMessage)
  SharedDtor();
}

void ClientMessage_GetMessage::SharedDtor() {
  if (has_Message()) {
    clear_Message();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientMessage_GetMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientMessage_GetMessage& ClientMessage_GetMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

ClientMessage_GetMessage* ClientMessage_GetMessage::default_instance_ = NULL;

ClientMessage_GetMessage* ClientMessage_GetMessage::New() const {
  return new ClientMessage_GetMessage;
}

void ClientMessage_GetMessage::clear_Message() {
  switch(Message_case()) {
    case kMode: {
      delete Message_.mode_;
      break;
    }
    case kSystem: {
      delete Message_.system_;
      break;
    }
    case kLocation: {
      delete Message_.location_;
      break;
    }
    case kDetector: {
      delete Message_.detector_;
      break;
    }
    case kAnalysis: {
      delete Message_.analysis_;
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void ClientMessage_GetMessage::Clear() {
  clear_Message();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientMessage_GetMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.ClientMessage.GetMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RdsProtobuf.Mode mode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_system;
        break;
      }

      // optional .RdsProtobuf.System system = 2;
      case 2: {
        if (tag == 18) {
         parse_system:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_system()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_location;
        break;
      }

      // optional .RdsProtobuf.Location location = 3;
      case 3: {
        if (tag == 26) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_detector;
        break;
      }

      // optional .RdsProtobuf.Detector detector = 4;
      case 4: {
        if (tag == 34) {
         parse_detector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detector()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_analysis;
        break;
      }

      // optional .RdsProtobuf.Analysis analysis = 5;
      case 5: {
        if (tag == 42) {
         parse_analysis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_analysis()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.ClientMessage.GetMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.ClientMessage.GetMessage)
  return false;
#undef DO_
}

void ClientMessage_GetMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.ClientMessage.GetMessage)
  // optional .RdsProtobuf.Mode mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->mode(), output);
  }

  // optional .RdsProtobuf.System system = 2;
  if (has_system()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->system(), output);
  }

  // optional .RdsProtobuf.Location location = 3;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->location(), output);
  }

  // optional .RdsProtobuf.Detector detector = 4;
  if (has_detector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->detector(), output);
  }

  // optional .RdsProtobuf.Analysis analysis = 5;
  if (has_analysis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->analysis(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.ClientMessage.GetMessage)
}

int ClientMessage_GetMessage::ByteSize() const {
  int total_size = 0;

  switch (Message_case()) {
    // optional .RdsProtobuf.Mode mode = 1;
    case kMode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mode());
      break;
    }
    // optional .RdsProtobuf.System system = 2;
    case kSystem: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->system());
      break;
    }
    // optional .RdsProtobuf.Location location = 3;
    case kLocation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
      break;
    }
    // optional .RdsProtobuf.Detector detector = 4;
    case kDetector: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detector());
      break;
    }
    // optional .RdsProtobuf.Analysis analysis = 5;
    case kAnalysis: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->analysis());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage_GetMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientMessage_GetMessage*>(&from));
}

void ClientMessage_GetMessage::MergeFrom(const ClientMessage_GetMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.Message_case()) {
    case kMode: {
      mutable_mode()->::RdsProtobuf::Mode::MergeFrom(from.mode());
      break;
    }
    case kSystem: {
      mutable_system()->::RdsProtobuf::System::MergeFrom(from.system());
      break;
    }
    case kLocation: {
      mutable_location()->::RdsProtobuf::Location::MergeFrom(from.location());
      break;
    }
    case kDetector: {
      mutable_detector()->::RdsProtobuf::Detector::MergeFrom(from.detector());
      break;
    }
    case kAnalysis: {
      mutable_analysis()->::RdsProtobuf::Analysis::MergeFrom(from.analysis());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientMessage_GetMessage::CopyFrom(const ClientMessage_GetMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_GetMessage::IsInitialized() const {

  if (has_system()) {
    if (!this->system().IsInitialized()) return false;
  }
  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  if (has_detector()) {
    if (!this->detector().IsInitialized()) return false;
  }
  if (has_analysis()) {
    if (!this->analysis().IsInitialized()) return false;
  }
  return true;
}

void ClientMessage_GetMessage::Swap(ClientMessage_GetMessage* other) {
  if (other != this) {
    std::swap(Message_, other->Message_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientMessage_GetMessage::GetTypeName() const {
  return "RdsProtobuf.ClientMessage.GetMessage";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientMessage_SetMessage::kModeFieldNumber;
const int ClientMessage_SetMessage::kSystemFieldNumber;
const int ClientMessage_SetMessage::kLocationFieldNumber;
const int ClientMessage_SetMessage::kDetectorFieldNumber;
const int ClientMessage_SetMessage::kAnalysisFieldNumber;
#endif  // !_MSC_VER

ClientMessage_SetMessage::ClientMessage_SetMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.ClientMessage.SetMessage)
}

void ClientMessage_SetMessage::InitAsDefaultInstance() {
}

ClientMessage_SetMessage::ClientMessage_SetMessage(const ClientMessage_SetMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.ClientMessage.SetMessage)
}

void ClientMessage_SetMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_Message();
}

ClientMessage_SetMessage::~ClientMessage_SetMessage() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.ClientMessage.SetMessage)
  SharedDtor();
}

void ClientMessage_SetMessage::SharedDtor() {
  if (has_Message()) {
    clear_Message();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientMessage_SetMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientMessage_SetMessage& ClientMessage_SetMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

ClientMessage_SetMessage* ClientMessage_SetMessage::default_instance_ = NULL;

ClientMessage_SetMessage* ClientMessage_SetMessage::New() const {
  return new ClientMessage_SetMessage;
}

void ClientMessage_SetMessage::clear_Message() {
  switch(Message_case()) {
    case kMode: {
      delete Message_.mode_;
      break;
    }
    case kSystem: {
      delete Message_.system_;
      break;
    }
    case kLocation: {
      delete Message_.location_;
      break;
    }
    case kDetector: {
      delete Message_.detector_;
      break;
    }
    case kAnalysis: {
      delete Message_.analysis_;
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void ClientMessage_SetMessage::Clear() {
  clear_Message();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientMessage_SetMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.ClientMessage.SetMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RdsProtobuf.Mode mode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_system;
        break;
      }

      // optional .RdsProtobuf.System system = 2;
      case 2: {
        if (tag == 18) {
         parse_system:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_system()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_location;
        break;
      }

      // optional .RdsProtobuf.Location location = 3;
      case 3: {
        if (tag == 26) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_detector;
        break;
      }

      // optional .RdsProtobuf.Detector detector = 4;
      case 4: {
        if (tag == 34) {
         parse_detector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detector()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_analysis;
        break;
      }

      // optional .RdsProtobuf.Analysis analysis = 5;
      case 5: {
        if (tag == 42) {
         parse_analysis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_analysis()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.ClientMessage.SetMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.ClientMessage.SetMessage)
  return false;
#undef DO_
}

void ClientMessage_SetMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.ClientMessage.SetMessage)
  // optional .RdsProtobuf.Mode mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->mode(), output);
  }

  // optional .RdsProtobuf.System system = 2;
  if (has_system()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->system(), output);
  }

  // optional .RdsProtobuf.Location location = 3;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->location(), output);
  }

  // optional .RdsProtobuf.Detector detector = 4;
  if (has_detector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->detector(), output);
  }

  // optional .RdsProtobuf.Analysis analysis = 5;
  if (has_analysis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->analysis(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.ClientMessage.SetMessage)
}

int ClientMessage_SetMessage::ByteSize() const {
  int total_size = 0;

  switch (Message_case()) {
    // optional .RdsProtobuf.Mode mode = 1;
    case kMode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mode());
      break;
    }
    // optional .RdsProtobuf.System system = 2;
    case kSystem: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->system());
      break;
    }
    // optional .RdsProtobuf.Location location = 3;
    case kLocation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
      break;
    }
    // optional .RdsProtobuf.Detector detector = 4;
    case kDetector: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detector());
      break;
    }
    // optional .RdsProtobuf.Analysis analysis = 5;
    case kAnalysis: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->analysis());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage_SetMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientMessage_SetMessage*>(&from));
}

void ClientMessage_SetMessage::MergeFrom(const ClientMessage_SetMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.Message_case()) {
    case kMode: {
      mutable_mode()->::RdsProtobuf::Mode::MergeFrom(from.mode());
      break;
    }
    case kSystem: {
      mutable_system()->::RdsProtobuf::System::MergeFrom(from.system());
      break;
    }
    case kLocation: {
      mutable_location()->::RdsProtobuf::Location::MergeFrom(from.location());
      break;
    }
    case kDetector: {
      mutable_detector()->::RdsProtobuf::Detector::MergeFrom(from.detector());
      break;
    }
    case kAnalysis: {
      mutable_analysis()->::RdsProtobuf::Analysis::MergeFrom(from.analysis());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientMessage_SetMessage::CopyFrom(const ClientMessage_SetMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_SetMessage::IsInitialized() const {

  if (has_system()) {
    if (!this->system().IsInitialized()) return false;
  }
  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  if (has_detector()) {
    if (!this->detector().IsInitialized()) return false;
  }
  if (has_analysis()) {
    if (!this->analysis().IsInitialized()) return false;
  }
  return true;
}

void ClientMessage_SetMessage::Swap(ClientMessage_SetMessage* other) {
  if (other != this) {
    std::swap(Message_, other->Message_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientMessage_SetMessage::GetTypeName() const {
  return "RdsProtobuf.ClientMessage.SetMessage";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientMessage::kGetFieldNumber;
const int ClientMessage::kSetFieldNumber;
#endif  // !_MSC_VER

ClientMessage::ClientMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.ClientMessage)
}

void ClientMessage::InitAsDefaultInstance() {
}

ClientMessage::ClientMessage(const ClientMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.ClientMessage)
}

void ClientMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_MessageType();
}

ClientMessage::~ClientMessage() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.ClientMessage)
  SharedDtor();
}

void ClientMessage::SharedDtor() {
  if (has_MessageType()) {
    clear_MessageType();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientMessage& ClientMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

ClientMessage* ClientMessage::default_instance_ = NULL;

ClientMessage* ClientMessage::New() const {
  return new ClientMessage;
}

void ClientMessage::clear_MessageType() {
  switch(MessageType_case()) {
    case kGet: {
      delete MessageType_.get_;
      break;
    }
    case kSet: {
      delete MessageType_.set_;
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGETYPE_NOT_SET;
}


void ClientMessage::Clear() {
  clear_MessageType();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.ClientMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RdsProtobuf.ClientMessage.GetMessage get = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_set;
        break;
      }

      // optional .RdsProtobuf.ClientMessage.SetMessage set = 2;
      case 2: {
        if (tag == 18) {
         parse_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.ClientMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.ClientMessage)
  return false;
#undef DO_
}

void ClientMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.ClientMessage)
  // optional .RdsProtobuf.ClientMessage.GetMessage get = 1;
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->get(), output);
  }

  // optional .RdsProtobuf.ClientMessage.SetMessage set = 2;
  if (has_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->set(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.ClientMessage)
}

int ClientMessage::ByteSize() const {
  int total_size = 0;

  switch (MessageType_case()) {
    // optional .RdsProtobuf.ClientMessage.GetMessage get = 1;
    case kGet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get());
      break;
    }
    // optional .RdsProtobuf.ClientMessage.SetMessage set = 2;
    case kSet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set());
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientMessage*>(&from));
}

void ClientMessage::MergeFrom(const ClientMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.MessageType_case()) {
    case kGet: {
      mutable_get()->::RdsProtobuf::ClientMessage_GetMessage::MergeFrom(from.get());
      break;
    }
    case kSet: {
      mutable_set()->::RdsProtobuf::ClientMessage_SetMessage::MergeFrom(from.set());
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientMessage::CopyFrom(const ClientMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage::IsInitialized() const {

  if (has_get()) {
    if (!this->get().IsInitialized()) return false;
  }
  if (has_set()) {
    if (!this->set().IsInitialized()) return false;
  }
  return true;
}

void ClientMessage::Swap(ClientMessage* other) {
  if (other != this) {
    std::swap(MessageType_, other->MessageType_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientMessage::GetTypeName() const {
  return "RdsProtobuf.ClientMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int ServerMessage_CurrentMessage::kModeFieldNumber;
const int ServerMessage_CurrentMessage::kSystemFieldNumber;
const int ServerMessage_CurrentMessage::kLocationFieldNumber;
const int ServerMessage_CurrentMessage::kDetectorFieldNumber;
const int ServerMessage_CurrentMessage::kAnalysisFieldNumber;
#endif  // !_MSC_VER

ServerMessage_CurrentMessage::ServerMessage_CurrentMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.ServerMessage.CurrentMessage)
}

void ServerMessage_CurrentMessage::InitAsDefaultInstance() {
}

ServerMessage_CurrentMessage::ServerMessage_CurrentMessage(const ServerMessage_CurrentMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.ServerMessage.CurrentMessage)
}

void ServerMessage_CurrentMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_Request();
}

ServerMessage_CurrentMessage::~ServerMessage_CurrentMessage() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.ServerMessage.CurrentMessage)
  SharedDtor();
}

void ServerMessage_CurrentMessage::SharedDtor() {
  if (has_Request()) {
    clear_Request();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerMessage_CurrentMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerMessage_CurrentMessage& ServerMessage_CurrentMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

ServerMessage_CurrentMessage* ServerMessage_CurrentMessage::default_instance_ = NULL;

ServerMessage_CurrentMessage* ServerMessage_CurrentMessage::New() const {
  return new ServerMessage_CurrentMessage;
}

void ServerMessage_CurrentMessage::clear_Request() {
  switch(Request_case()) {
    case kMode: {
      delete Request_.mode_;
      break;
    }
    case kSystem: {
      delete Request_.system_;
      break;
    }
    case kLocation: {
      delete Request_.location_;
      break;
    }
    case kDetector: {
      delete Request_.detector_;
      break;
    }
    case kAnalysis: {
      delete Request_.analysis_;
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void ServerMessage_CurrentMessage::Clear() {
  clear_Request();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServerMessage_CurrentMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.ServerMessage.CurrentMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RdsProtobuf.Mode mode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_system;
        break;
      }

      // optional .RdsProtobuf.System system = 2;
      case 2: {
        if (tag == 18) {
         parse_system:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_system()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_location;
        break;
      }

      // optional .RdsProtobuf.Location location = 3;
      case 3: {
        if (tag == 26) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_detector;
        break;
      }

      // optional .RdsProtobuf.Detector detector = 4;
      case 4: {
        if (tag == 34) {
         parse_detector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detector()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_analysis;
        break;
      }

      // optional .RdsProtobuf.Analysis analysis = 5;
      case 5: {
        if (tag == 42) {
         parse_analysis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_analysis()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.ServerMessage.CurrentMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.ServerMessage.CurrentMessage)
  return false;
#undef DO_
}

void ServerMessage_CurrentMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.ServerMessage.CurrentMessage)
  // optional .RdsProtobuf.Mode mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->mode(), output);
  }

  // optional .RdsProtobuf.System system = 2;
  if (has_system()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->system(), output);
  }

  // optional .RdsProtobuf.Location location = 3;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->location(), output);
  }

  // optional .RdsProtobuf.Detector detector = 4;
  if (has_detector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->detector(), output);
  }

  // optional .RdsProtobuf.Analysis analysis = 5;
  if (has_analysis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->analysis(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.ServerMessage.CurrentMessage)
}

int ServerMessage_CurrentMessage::ByteSize() const {
  int total_size = 0;

  switch (Request_case()) {
    // optional .RdsProtobuf.Mode mode = 1;
    case kMode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mode());
      break;
    }
    // optional .RdsProtobuf.System system = 2;
    case kSystem: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->system());
      break;
    }
    // optional .RdsProtobuf.Location location = 3;
    case kLocation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
      break;
    }
    // optional .RdsProtobuf.Detector detector = 4;
    case kDetector: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detector());
      break;
    }
    // optional .RdsProtobuf.Analysis analysis = 5;
    case kAnalysis: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->analysis());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMessage_CurrentMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerMessage_CurrentMessage*>(&from));
}

void ServerMessage_CurrentMessage::MergeFrom(const ServerMessage_CurrentMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.Request_case()) {
    case kMode: {
      mutable_mode()->::RdsProtobuf::Mode::MergeFrom(from.mode());
      break;
    }
    case kSystem: {
      mutable_system()->::RdsProtobuf::System::MergeFrom(from.system());
      break;
    }
    case kLocation: {
      mutable_location()->::RdsProtobuf::Location::MergeFrom(from.location());
      break;
    }
    case kDetector: {
      mutable_detector()->::RdsProtobuf::Detector::MergeFrom(from.detector());
      break;
    }
    case kAnalysis: {
      mutable_analysis()->::RdsProtobuf::Analysis::MergeFrom(from.analysis());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerMessage_CurrentMessage::CopyFrom(const ServerMessage_CurrentMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage_CurrentMessage::IsInitialized() const {

  if (has_system()) {
    if (!this->system().IsInitialized()) return false;
  }
  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  if (has_detector()) {
    if (!this->detector().IsInitialized()) return false;
  }
  if (has_analysis()) {
    if (!this->analysis().IsInitialized()) return false;
  }
  return true;
}

void ServerMessage_CurrentMessage::Swap(ServerMessage_CurrentMessage* other) {
  if (other != this) {
    std::swap(Request_, other->Request_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServerMessage_CurrentMessage::GetTypeName() const {
  return "RdsProtobuf.ServerMessage.CurrentMessage";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerMessage_DataMessage::kLocationSpectrumFieldNumber;
const int ServerMessage_DataMessage::kLocationXCovFieldNumber;
const int ServerMessage_DataMessage::kDataStatusFieldNumber;
const int ServerMessage_DataMessage::kDetectorSpectrumFieldNumber;
const int ServerMessage_DataMessage::kAnalysisSpectrogramFieldNumber;
#endif  // !_MSC_VER

ServerMessage_DataMessage::ServerMessage_DataMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.ServerMessage.DataMessage)
}

void ServerMessage_DataMessage::InitAsDefaultInstance() {
}

ServerMessage_DataMessage::ServerMessage_DataMessage(const ServerMessage_DataMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.ServerMessage.DataMessage)
}

void ServerMessage_DataMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_RequestType();
}

ServerMessage_DataMessage::~ServerMessage_DataMessage() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.ServerMessage.DataMessage)
  SharedDtor();
}

void ServerMessage_DataMessage::SharedDtor() {
  if (has_RequestType()) {
    clear_RequestType();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerMessage_DataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerMessage_DataMessage& ServerMessage_DataMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

ServerMessage_DataMessage* ServerMessage_DataMessage::default_instance_ = NULL;

ServerMessage_DataMessage* ServerMessage_DataMessage::New() const {
  return new ServerMessage_DataMessage;
}

void ServerMessage_DataMessage::clear_RequestType() {
  switch(RequestType_case()) {
    case kLocationSpectrum: {
      delete RequestType_.location_spectrum_;
      break;
    }
    case kLocationXCov: {
      delete RequestType_.location_xcov_;
      break;
    }
    case kDataStatus: {
      delete RequestType_.data_status_;
      break;
    }
    case kDetectorSpectrum: {
      delete RequestType_.detector_spectrum_;
      break;
    }
    case kAnalysisSpectrogram: {
      delete RequestType_.analysis_spectrogram_;
      break;
    }
    case REQUESTTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUESTTYPE_NOT_SET;
}


void ServerMessage_DataMessage::Clear() {
  clear_RequestType();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServerMessage_DataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.ServerMessage.DataMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RdsProtobuf.LocationSpectrum location_Spectrum = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location_spectrum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_location_XCov;
        break;
      }

      // optional .RdsProtobuf.LocationXCov location_XCov = 2;
      case 2: {
        if (tag == 18) {
         parse_location_XCov:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location_xcov()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data_Status;
        break;
      }

      // optional .RdsProtobuf.DataStatus data_Status = 3;
      case 3: {
        if (tag == 26) {
         parse_data_Status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_detector_Spectrum;
        break;
      }

      // optional .RdsProtobuf.DetectorSpectrum detector_Spectrum = 4;
      case 4: {
        if (tag == 34) {
         parse_detector_Spectrum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detector_spectrum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_analysis_Spectrogram;
        break;
      }

      // optional .RdsProtobuf.AnalysisSpectrogram analysis_Spectrogram = 5;
      case 5: {
        if (tag == 42) {
         parse_analysis_Spectrogram:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_analysis_spectrogram()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.ServerMessage.DataMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.ServerMessage.DataMessage)
  return false;
#undef DO_
}

void ServerMessage_DataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.ServerMessage.DataMessage)
  // optional .RdsProtobuf.LocationSpectrum location_Spectrum = 1;
  if (has_location_spectrum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->location_spectrum(), output);
  }

  // optional .RdsProtobuf.LocationXCov location_XCov = 2;
  if (has_location_xcov()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->location_xcov(), output);
  }

  // optional .RdsProtobuf.DataStatus data_Status = 3;
  if (has_data_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->data_status(), output);
  }

  // optional .RdsProtobuf.DetectorSpectrum detector_Spectrum = 4;
  if (has_detector_spectrum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->detector_spectrum(), output);
  }

  // optional .RdsProtobuf.AnalysisSpectrogram analysis_Spectrogram = 5;
  if (has_analysis_spectrogram()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->analysis_spectrogram(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.ServerMessage.DataMessage)
}

int ServerMessage_DataMessage::ByteSize() const {
  int total_size = 0;

  switch (RequestType_case()) {
    // optional .RdsProtobuf.LocationSpectrum location_Spectrum = 1;
    case kLocationSpectrum: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location_spectrum());
      break;
    }
    // optional .RdsProtobuf.LocationXCov location_XCov = 2;
    case kLocationXCov: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location_xcov());
      break;
    }
    // optional .RdsProtobuf.DataStatus data_Status = 3;
    case kDataStatus: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_status());
      break;
    }
    // optional .RdsProtobuf.DetectorSpectrum detector_Spectrum = 4;
    case kDetectorSpectrum: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detector_spectrum());
      break;
    }
    // optional .RdsProtobuf.AnalysisSpectrogram analysis_Spectrogram = 5;
    case kAnalysisSpectrogram: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->analysis_spectrogram());
      break;
    }
    case REQUESTTYPE_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMessage_DataMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerMessage_DataMessage*>(&from));
}

void ServerMessage_DataMessage::MergeFrom(const ServerMessage_DataMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.RequestType_case()) {
    case kLocationSpectrum: {
      mutable_location_spectrum()->::RdsProtobuf::LocationSpectrum::MergeFrom(from.location_spectrum());
      break;
    }
    case kLocationXCov: {
      mutable_location_xcov()->::RdsProtobuf::LocationXCov::MergeFrom(from.location_xcov());
      break;
    }
    case kDataStatus: {
      mutable_data_status()->::RdsProtobuf::DataStatus::MergeFrom(from.data_status());
      break;
    }
    case kDetectorSpectrum: {
      mutable_detector_spectrum()->::RdsProtobuf::DetectorSpectrum::MergeFrom(from.detector_spectrum());
      break;
    }
    case kAnalysisSpectrogram: {
      mutable_analysis_spectrogram()->::RdsProtobuf::AnalysisSpectrogram::MergeFrom(from.analysis_spectrogram());
      break;
    }
    case REQUESTTYPE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerMessage_DataMessage::CopyFrom(const ServerMessage_DataMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage_DataMessage::IsInitialized() const {

  if (has_location_spectrum()) {
    if (!this->location_spectrum().IsInitialized()) return false;
  }
  if (has_location_xcov()) {
    if (!this->location_xcov().IsInitialized()) return false;
  }
  if (has_data_status()) {
    if (!this->data_status().IsInitialized()) return false;
  }
  if (has_detector_spectrum()) {
    if (!this->detector_spectrum().IsInitialized()) return false;
  }
  if (has_analysis_spectrogram()) {
    if (!this->analysis_spectrogram().IsInitialized()) return false;
  }
  return true;
}

void ServerMessage_DataMessage::Swap(ServerMessage_DataMessage* other) {
  if (other != this) {
    std::swap(RequestType_, other->RequestType_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServerMessage_DataMessage::GetTypeName() const {
  return "RdsProtobuf.ServerMessage.DataMessage";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerMessage_AnswerMessage_Error::kStrFieldNumber;
#endif  // !_MSC_VER

ServerMessage_AnswerMessage_Error::ServerMessage_AnswerMessage_Error()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.ServerMessage.AnswerMessage.Error)
}

void ServerMessage_AnswerMessage_Error::InitAsDefaultInstance() {
}

ServerMessage_AnswerMessage_Error::ServerMessage_AnswerMessage_Error(const ServerMessage_AnswerMessage_Error& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.ServerMessage.AnswerMessage.Error)
}

void ServerMessage_AnswerMessage_Error::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerMessage_AnswerMessage_Error::~ServerMessage_AnswerMessage_Error() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.ServerMessage.AnswerMessage.Error)
  SharedDtor();
}

void ServerMessage_AnswerMessage_Error::SharedDtor() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerMessage_AnswerMessage_Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerMessage_AnswerMessage_Error& ServerMessage_AnswerMessage_Error::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

ServerMessage_AnswerMessage_Error* ServerMessage_AnswerMessage_Error::default_instance_ = NULL;

ServerMessage_AnswerMessage_Error* ServerMessage_AnswerMessage_Error::New() const {
  return new ServerMessage_AnswerMessage_Error;
}

void ServerMessage_AnswerMessage_Error::Clear() {
  if (has_str()) {
    if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      str_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServerMessage_AnswerMessage_Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.ServerMessage.AnswerMessage.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string str = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.ServerMessage.AnswerMessage.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.ServerMessage.AnswerMessage.Error)
  return false;
#undef DO_
}

void ServerMessage_AnswerMessage_Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.ServerMessage.AnswerMessage.Error)
  // required string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->str(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.ServerMessage.AnswerMessage.Error)
}

int ServerMessage_AnswerMessage_Error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMessage_AnswerMessage_Error::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerMessage_AnswerMessage_Error*>(&from));
}

void ServerMessage_AnswerMessage_Error::MergeFrom(const ServerMessage_AnswerMessage_Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerMessage_AnswerMessage_Error::CopyFrom(const ServerMessage_AnswerMessage_Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage_AnswerMessage_Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerMessage_AnswerMessage_Error::Swap(ServerMessage_AnswerMessage_Error* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServerMessage_AnswerMessage_Error::GetTypeName() const {
  return "RdsProtobuf.ServerMessage.AnswerMessage.Error";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerMessage_AnswerMessage_Confirmation::kStrFieldNumber;
#endif  // !_MSC_VER

ServerMessage_AnswerMessage_Confirmation::ServerMessage_AnswerMessage_Confirmation()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.ServerMessage.AnswerMessage.Confirmation)
}

void ServerMessage_AnswerMessage_Confirmation::InitAsDefaultInstance() {
}

ServerMessage_AnswerMessage_Confirmation::ServerMessage_AnswerMessage_Confirmation(const ServerMessage_AnswerMessage_Confirmation& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.ServerMessage.AnswerMessage.Confirmation)
}

void ServerMessage_AnswerMessage_Confirmation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerMessage_AnswerMessage_Confirmation::~ServerMessage_AnswerMessage_Confirmation() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.ServerMessage.AnswerMessage.Confirmation)
  SharedDtor();
}

void ServerMessage_AnswerMessage_Confirmation::SharedDtor() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerMessage_AnswerMessage_Confirmation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerMessage_AnswerMessage_Confirmation& ServerMessage_AnswerMessage_Confirmation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

ServerMessage_AnswerMessage_Confirmation* ServerMessage_AnswerMessage_Confirmation::default_instance_ = NULL;

ServerMessage_AnswerMessage_Confirmation* ServerMessage_AnswerMessage_Confirmation::New() const {
  return new ServerMessage_AnswerMessage_Confirmation;
}

void ServerMessage_AnswerMessage_Confirmation::Clear() {
  if (has_str()) {
    if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      str_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServerMessage_AnswerMessage_Confirmation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.ServerMessage.AnswerMessage.Confirmation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string str = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.ServerMessage.AnswerMessage.Confirmation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.ServerMessage.AnswerMessage.Confirmation)
  return false;
#undef DO_
}

void ServerMessage_AnswerMessage_Confirmation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.ServerMessage.AnswerMessage.Confirmation)
  // required string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->str(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.ServerMessage.AnswerMessage.Confirmation)
}

int ServerMessage_AnswerMessage_Confirmation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMessage_AnswerMessage_Confirmation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerMessage_AnswerMessage_Confirmation*>(&from));
}

void ServerMessage_AnswerMessage_Confirmation::MergeFrom(const ServerMessage_AnswerMessage_Confirmation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerMessage_AnswerMessage_Confirmation::CopyFrom(const ServerMessage_AnswerMessage_Confirmation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage_AnswerMessage_Confirmation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerMessage_AnswerMessage_Confirmation::Swap(ServerMessage_AnswerMessage_Confirmation* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServerMessage_AnswerMessage_Confirmation::GetTypeName() const {
  return "RdsProtobuf.ServerMessage.AnswerMessage.Confirmation";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerMessage_AnswerMessage::kErrorFieldNumber;
const int ServerMessage_AnswerMessage::kConfirmationFieldNumber;
#endif  // !_MSC_VER

ServerMessage_AnswerMessage::ServerMessage_AnswerMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.ServerMessage.AnswerMessage)
}

void ServerMessage_AnswerMessage::InitAsDefaultInstance() {
}

ServerMessage_AnswerMessage::ServerMessage_AnswerMessage(const ServerMessage_AnswerMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.ServerMessage.AnswerMessage)
}

void ServerMessage_AnswerMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_RequestType();
}

ServerMessage_AnswerMessage::~ServerMessage_AnswerMessage() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.ServerMessage.AnswerMessage)
  SharedDtor();
}

void ServerMessage_AnswerMessage::SharedDtor() {
  if (has_RequestType()) {
    clear_RequestType();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerMessage_AnswerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerMessage_AnswerMessage& ServerMessage_AnswerMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

ServerMessage_AnswerMessage* ServerMessage_AnswerMessage::default_instance_ = NULL;

ServerMessage_AnswerMessage* ServerMessage_AnswerMessage::New() const {
  return new ServerMessage_AnswerMessage;
}

void ServerMessage_AnswerMessage::clear_RequestType() {
  switch(RequestType_case()) {
    case kError: {
      delete RequestType_.error_;
      break;
    }
    case kConfirmation: {
      delete RequestType_.confirmation_;
      break;
    }
    case REQUESTTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUESTTYPE_NOT_SET;
}


void ServerMessage_AnswerMessage::Clear() {
  clear_RequestType();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServerMessage_AnswerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.ServerMessage.AnswerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RdsProtobuf.ServerMessage.AnswerMessage.Error error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_confirmation;
        break;
      }

      // optional .RdsProtobuf.ServerMessage.AnswerMessage.Confirmation confirmation = 2;
      case 2: {
        if (tag == 18) {
         parse_confirmation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confirmation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.ServerMessage.AnswerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.ServerMessage.AnswerMessage)
  return false;
#undef DO_
}

void ServerMessage_AnswerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.ServerMessage.AnswerMessage)
  // optional .RdsProtobuf.ServerMessage.AnswerMessage.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->error(), output);
  }

  // optional .RdsProtobuf.ServerMessage.AnswerMessage.Confirmation confirmation = 2;
  if (has_confirmation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->confirmation(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.ServerMessage.AnswerMessage)
}

int ServerMessage_AnswerMessage::ByteSize() const {
  int total_size = 0;

  switch (RequestType_case()) {
    // optional .RdsProtobuf.ServerMessage.AnswerMessage.Error error = 1;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
      break;
    }
    // optional .RdsProtobuf.ServerMessage.AnswerMessage.Confirmation confirmation = 2;
    case kConfirmation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->confirmation());
      break;
    }
    case REQUESTTYPE_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMessage_AnswerMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerMessage_AnswerMessage*>(&from));
}

void ServerMessage_AnswerMessage::MergeFrom(const ServerMessage_AnswerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.RequestType_case()) {
    case kError: {
      mutable_error()->::RdsProtobuf::ServerMessage_AnswerMessage_Error::MergeFrom(from.error());
      break;
    }
    case kConfirmation: {
      mutable_confirmation()->::RdsProtobuf::ServerMessage_AnswerMessage_Confirmation::MergeFrom(from.confirmation());
      break;
    }
    case REQUESTTYPE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerMessage_AnswerMessage::CopyFrom(const ServerMessage_AnswerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage_AnswerMessage::IsInitialized() const {

  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  if (has_confirmation()) {
    if (!this->confirmation().IsInitialized()) return false;
  }
  return true;
}

void ServerMessage_AnswerMessage::Swap(ServerMessage_AnswerMessage* other) {
  if (other != this) {
    std::swap(RequestType_, other->RequestType_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServerMessage_AnswerMessage::GetTypeName() const {
  return "RdsProtobuf.ServerMessage.AnswerMessage";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerMessage::kCurrentFieldNumber;
const int ServerMessage::kDataFieldNumber;
const int ServerMessage::kAnswerFieldNumber;
#endif  // !_MSC_VER

ServerMessage::ServerMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.ServerMessage)
}

void ServerMessage::InitAsDefaultInstance() {
}

ServerMessage::ServerMessage(const ServerMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.ServerMessage)
}

void ServerMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_MessageType();
}

ServerMessage::~ServerMessage() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.ServerMessage)
  SharedDtor();
}

void ServerMessage::SharedDtor() {
  if (has_MessageType()) {
    clear_MessageType();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerMessage& ServerMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

ServerMessage* ServerMessage::default_instance_ = NULL;

ServerMessage* ServerMessage::New() const {
  return new ServerMessage;
}

void ServerMessage::clear_MessageType() {
  switch(MessageType_case()) {
    case kCurrent: {
      delete MessageType_.current_;
      break;
    }
    case kData: {
      delete MessageType_.data_;
      break;
    }
    case kAnswer: {
      delete MessageType_.answer_;
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGETYPE_NOT_SET;
}


void ServerMessage::Clear() {
  clear_MessageType();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.ServerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RdsProtobuf.ServerMessage.CurrentMessage current = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .RdsProtobuf.ServerMessage.DataMessage data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_answer;
        break;
      }

      // optional .RdsProtobuf.ServerMessage.AnswerMessage answer = 3;
      case 3: {
        if (tag == 26) {
         parse_answer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_answer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.ServerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.ServerMessage)
  return false;
#undef DO_
}

void ServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.ServerMessage)
  // optional .RdsProtobuf.ServerMessage.CurrentMessage current = 1;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->current(), output);
  }

  // optional .RdsProtobuf.ServerMessage.DataMessage data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->data(), output);
  }

  // optional .RdsProtobuf.ServerMessage.AnswerMessage answer = 3;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->answer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.ServerMessage)
}

int ServerMessage::ByteSize() const {
  int total_size = 0;

  switch (MessageType_case()) {
    // optional .RdsProtobuf.ServerMessage.CurrentMessage current = 1;
    case kCurrent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->current());
      break;
    }
    // optional .RdsProtobuf.ServerMessage.DataMessage data = 2;
    case kData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
      break;
    }
    // optional .RdsProtobuf.ServerMessage.AnswerMessage answer = 3;
    case kAnswer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->answer());
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerMessage*>(&from));
}

void ServerMessage::MergeFrom(const ServerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.MessageType_case()) {
    case kCurrent: {
      mutable_current()->::RdsProtobuf::ServerMessage_CurrentMessage::MergeFrom(from.current());
      break;
    }
    case kData: {
      mutable_data()->::RdsProtobuf::ServerMessage_DataMessage::MergeFrom(from.data());
      break;
    }
    case kAnswer: {
      mutable_answer()->::RdsProtobuf::ServerMessage_AnswerMessage::MergeFrom(from.answer());
      break;
    }
    case MESSAGETYPE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerMessage::CopyFrom(const ServerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage::IsInitialized() const {

  if (has_current()) {
    if (!this->current().IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  if (has_answer()) {
    if (!this->answer().IsInitialized()) return false;
  }
  return true;
}

void ServerMessage::Swap(ServerMessage* other) {
  if (other != this) {
    std::swap(MessageType_, other->MessageType_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServerMessage::GetTypeName() const {
  return "RdsProtobuf.ServerMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int Packet::kFromClientFieldNumber;
const int Packet::kFromServerFieldNumber;
#endif  // !_MSC_VER

Packet::Packet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RdsProtobuf.Packet)
}

void Packet::InitAsDefaultInstance() {
}

Packet::Packet(const Packet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RdsProtobuf.Packet)
}

void Packet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_PacketType();
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:RdsProtobuf.Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
  if (has_PacketType()) {
    clear_PacketType();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet& Packet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RdsPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RdsPacket_2eproto();
#endif
  return *default_instance_;
}

Packet* Packet::default_instance_ = NULL;

Packet* Packet::New() const {
  return new Packet;
}

void Packet::clear_PacketType() {
  switch(PacketType_case()) {
    case kFromClient: {
      delete PacketType_.from_client_;
      break;
    }
    case kFromServer: {
      delete PacketType_.from_server_;
      break;
    }
    case PACKETTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PACKETTYPE_NOT_SET;
}


void Packet::Clear() {
  clear_PacketType();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:RdsProtobuf.Packet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RdsProtobuf.ClientMessage from_client = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_client()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_from_server;
        break;
      }

      // optional .RdsProtobuf.ServerMessage from_server = 2;
      case 2: {
        if (tag == 18) {
         parse_from_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_server()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RdsProtobuf.Packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RdsProtobuf.Packet)
  return false;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RdsProtobuf.Packet)
  // optional .RdsProtobuf.ClientMessage from_client = 1;
  if (has_from_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->from_client(), output);
  }

  // optional .RdsProtobuf.ServerMessage from_server = 2;
  if (has_from_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->from_server(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:RdsProtobuf.Packet)
}

int Packet::ByteSize() const {
  int total_size = 0;

  switch (PacketType_case()) {
    // optional .RdsProtobuf.ClientMessage from_client = 1;
    case kFromClient: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from_client());
      break;
    }
    // optional .RdsProtobuf.ServerMessage from_server = 2;
    case kFromServer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from_server());
      break;
    }
    case PACKETTYPE_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet*>(&from));
}

void Packet::MergeFrom(const Packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.PacketType_case()) {
    case kFromClient: {
      mutable_from_client()->::RdsProtobuf::ClientMessage::MergeFrom(from.from_client());
      break;
    }
    case kFromServer: {
      mutable_from_server()->::RdsProtobuf::ServerMessage::MergeFrom(from.from_server());
      break;
    }
    case PACKETTYPE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet::CopyFrom(const Packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {

  if (has_from_client()) {
    if (!this->from_client().IsInitialized()) return false;
  }
  if (has_from_server()) {
    if (!this->from_server().IsInitialized()) return false;
  }
  return true;
}

void Packet::Swap(Packet* other) {
  if (other != this) {
    std::swap(PacketType_, other->PacketType_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet::GetTypeName() const {
  return "RdsProtobuf.Packet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RdsProtobuf

// @@protoc_insertion_point(global_scope)
