// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SolverPacket.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SolverPacket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace SolverClient {

void protobuf_ShutdownFile_SolverPacket_2eproto() {
  delete Packet::default_instance_;
  delete Packet_ArgumentVariant::default_instance_;
  delete Packet_ArgumentVariant_BplaPosition::default_instance_;
  delete Packet_ArgumentVariant_BplaPosition_Coordinates::default_instance_;
  delete Packet_ArgumentVariant_SolverInput::default_instance_;
  delete Packet_ArgumentVariant_SolverAnswer::default_instance_;
  delete Packet_ArgumentVariant_SolverAnswer_Coordinates::default_instance_;
  delete Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::default_instance_;
  delete Packet_ArgumentVariant_SolverAnswer_MotionEstimate::default_instance_;
  delete Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::default_instance_;
  delete Packet_ArgumentVariant_SolverAnswer_Trajectory::default_instance_;
  delete Packet_ArgumentVariant_SolverAnswer_SingleMarks::default_instance_;
  delete Packet_ArgumentVariant_SolverAnswer_StateLines::default_instance_;
  delete Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::default_instance_;
  delete Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::default_instance_;
  delete Packet_ArgumentVariant_SolverAnswer_ErrorMessage::default_instance_;
  delete Packet_Command::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_SolverPacket_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_SolverPacket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Packet::default_instance_ = new Packet();
  Packet_ArgumentVariant::default_instance_ = new Packet_ArgumentVariant();
  Packet_ArgumentVariant_BplaPosition::default_instance_ = new Packet_ArgumentVariant_BplaPosition();
  Packet_ArgumentVariant_BplaPosition_Coordinates::default_instance_ = new Packet_ArgumentVariant_BplaPosition_Coordinates();
  Packet_ArgumentVariant_SolverInput::default_instance_ = new Packet_ArgumentVariant_SolverInput();
  Packet_ArgumentVariant_SolverAnswer::default_instance_ = new Packet_ArgumentVariant_SolverAnswer();
  Packet_ArgumentVariant_SolverAnswer_Coordinates::default_instance_ = new Packet_ArgumentVariant_SolverAnswer_Coordinates();
  Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::default_instance_ = new Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy();
  Packet_ArgumentVariant_SolverAnswer_MotionEstimate::default_instance_ = new Packet_ArgumentVariant_SolverAnswer_MotionEstimate();
  Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::default_instance_ = new Packet_ArgumentVariant_SolverAnswer_CoordsEstimate();
  Packet_ArgumentVariant_SolverAnswer_Trajectory::default_instance_ = new Packet_ArgumentVariant_SolverAnswer_Trajectory();
  Packet_ArgumentVariant_SolverAnswer_SingleMarks::default_instance_ = new Packet_ArgumentVariant_SolverAnswer_SingleMarks();
  Packet_ArgumentVariant_SolverAnswer_StateLines::default_instance_ = new Packet_ArgumentVariant_SolverAnswer_StateLines();
  Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::default_instance_ = new Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine();
  Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::default_instance_ = new Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon();
  Packet_ArgumentVariant_SolverAnswer_ErrorMessage::default_instance_ = new Packet_ArgumentVariant_SolverAnswer_ErrorMessage();
  Packet_Command::default_instance_ = new Packet_Command();
  Packet::default_instance_->InitAsDefaultInstance();
  Packet_ArgumentVariant::default_instance_->InitAsDefaultInstance();
  Packet_ArgumentVariant_BplaPosition::default_instance_->InitAsDefaultInstance();
  Packet_ArgumentVariant_BplaPosition_Coordinates::default_instance_->InitAsDefaultInstance();
  Packet_ArgumentVariant_SolverInput::default_instance_->InitAsDefaultInstance();
  Packet_ArgumentVariant_SolverAnswer::default_instance_->InitAsDefaultInstance();
  Packet_ArgumentVariant_SolverAnswer_Coordinates::default_instance_->InitAsDefaultInstance();
  Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::default_instance_->InitAsDefaultInstance();
  Packet_ArgumentVariant_SolverAnswer_MotionEstimate::default_instance_->InitAsDefaultInstance();
  Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::default_instance_->InitAsDefaultInstance();
  Packet_ArgumentVariant_SolverAnswer_Trajectory::default_instance_->InitAsDefaultInstance();
  Packet_ArgumentVariant_SolverAnswer_SingleMarks::default_instance_->InitAsDefaultInstance();
  Packet_ArgumentVariant_SolverAnswer_StateLines::default_instance_->InitAsDefaultInstance();
  Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::default_instance_->InitAsDefaultInstance();
  Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::default_instance_->InitAsDefaultInstance();
  Packet_ArgumentVariant_SolverAnswer_ErrorMessage::default_instance_->InitAsDefaultInstance();
  Packet_Command::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SolverPacket_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_SolverPacket_2eproto_once_);
void protobuf_AddDesc_SolverPacket_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_SolverPacket_2eproto_once_,
                 &protobuf_AddDesc_SolverPacket_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SolverPacket_2eproto {
  StaticDescriptorInitializer_SolverPacket_2eproto() {
    protobuf_AddDesc_SolverPacket_2eproto();
  }
} static_descriptor_initializer_SolverPacket_2eproto_;
#endif
bool Actions_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool ResultOfCalculation_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

bool SolverError_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool EstimateQuality_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool StateOfMotion_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Packet_ArgumentVariant_BplaPosition_Coordinates::kLatFieldNumber;
const int Packet_ArgumentVariant_BplaPosition_Coordinates::kLonFieldNumber;
const int Packet_ArgumentVariant_BplaPosition_Coordinates::kAltFieldNumber;
#endif  // !_MSC_VER

Packet_ArgumentVariant_BplaPosition_Coordinates::Packet_ArgumentVariant_BplaPosition_Coordinates()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SolverClient.Packet.ArgumentVariant.BplaPosition.Coordinates)
}

void Packet_ArgumentVariant_BplaPosition_Coordinates::InitAsDefaultInstance() {
}

Packet_ArgumentVariant_BplaPosition_Coordinates::Packet_ArgumentVariant_BplaPosition_Coordinates(const Packet_ArgumentVariant_BplaPosition_Coordinates& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SolverClient.Packet.ArgumentVariant.BplaPosition.Coordinates)
}

void Packet_ArgumentVariant_BplaPosition_Coordinates::SharedCtor() {
  _cached_size_ = 0;
  lat_ = 0;
  lon_ = 0;
  alt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ArgumentVariant_BplaPosition_Coordinates::~Packet_ArgumentVariant_BplaPosition_Coordinates() {
  // @@protoc_insertion_point(destructor:SolverClient.Packet.ArgumentVariant.BplaPosition.Coordinates)
  SharedDtor();
}

void Packet_ArgumentVariant_BplaPosition_Coordinates::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Packet_ArgumentVariant_BplaPosition_Coordinates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_ArgumentVariant_BplaPosition_Coordinates& Packet_ArgumentVariant_BplaPosition_Coordinates::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SolverPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SolverPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_ArgumentVariant_BplaPosition_Coordinates* Packet_ArgumentVariant_BplaPosition_Coordinates::default_instance_ = NULL;

Packet_ArgumentVariant_BplaPosition_Coordinates* Packet_ArgumentVariant_BplaPosition_Coordinates::New() const {
  return new Packet_ArgumentVariant_BplaPosition_Coordinates;
}

void Packet_ArgumentVariant_BplaPosition_Coordinates::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Packet_ArgumentVariant_BplaPosition_Coordinates*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(lat_, alt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_ArgumentVariant_BplaPosition_Coordinates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:SolverClient.Packet.ArgumentVariant.BplaPosition.Coordinates)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double lat = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lon;
        break;
      }

      // required double lon = 2;
      case 2: {
        if (tag == 17) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_alt;
        break;
      }

      // required double alt = 3;
      case 3: {
        if (tag == 25) {
         parse_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alt_)));
          set_has_alt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SolverClient.Packet.ArgumentVariant.BplaPosition.Coordinates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SolverClient.Packet.ArgumentVariant.BplaPosition.Coordinates)
  return false;
#undef DO_
}

void Packet_ArgumentVariant_BplaPosition_Coordinates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SolverClient.Packet.ArgumentVariant.BplaPosition.Coordinates)
  // required double lat = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // required double lon = 2;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  // required double alt = 3;
  if (has_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->alt(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:SolverClient.Packet.ArgumentVariant.BplaPosition.Coordinates)
}

int Packet_ArgumentVariant_BplaPosition_Coordinates::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double lat = 1;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // required double lon = 2;
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // required double alt = 3;
    if (has_alt()) {
      total_size += 1 + 8;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ArgumentVariant_BplaPosition_Coordinates::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_ArgumentVariant_BplaPosition_Coordinates*>(&from));
}

void Packet_ArgumentVariant_BplaPosition_Coordinates::MergeFrom(const Packet_ArgumentVariant_BplaPosition_Coordinates& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_alt()) {
      set_alt(from.alt());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_ArgumentVariant_BplaPosition_Coordinates::CopyFrom(const Packet_ArgumentVariant_BplaPosition_Coordinates& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ArgumentVariant_BplaPosition_Coordinates::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Packet_ArgumentVariant_BplaPosition_Coordinates::Swap(Packet_ArgumentVariant_BplaPosition_Coordinates* other) {
  if (other != this) {
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(alt_, other->alt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_ArgumentVariant_BplaPosition_Coordinates::GetTypeName() const {
  return "SolverClient.Packet.ArgumentVariant.BplaPosition.Coordinates";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ArgumentVariant_BplaPosition::kBortNumberFieldNumber;
const int Packet_ArgumentVariant_BplaPosition::kTimeFieldNumber;
const int Packet_ArgumentVariant_BplaPosition::kCoordinatesFieldNumber;
const int Packet_ArgumentVariant_BplaPosition::kSpeedFieldNumber;
const int Packet_ArgumentVariant_BplaPosition::kCourseFieldNumber;
#endif  // !_MSC_VER

Packet_ArgumentVariant_BplaPosition::Packet_ArgumentVariant_BplaPosition()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SolverClient.Packet.ArgumentVariant.BplaPosition)
}

void Packet_ArgumentVariant_BplaPosition::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  coordinates_ = const_cast< ::SolverClient::Packet_ArgumentVariant_BplaPosition_Coordinates*>(
      ::SolverClient::Packet_ArgumentVariant_BplaPosition_Coordinates::internal_default_instance());
#else
  coordinates_ = const_cast< ::SolverClient::Packet_ArgumentVariant_BplaPosition_Coordinates*>(&::SolverClient::Packet_ArgumentVariant_BplaPosition_Coordinates::default_instance());
#endif
}

Packet_ArgumentVariant_BplaPosition::Packet_ArgumentVariant_BplaPosition(const Packet_ArgumentVariant_BplaPosition& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SolverClient.Packet.ArgumentVariant.BplaPosition)
}

void Packet_ArgumentVariant_BplaPosition::SharedCtor() {
  _cached_size_ = 0;
  bort_number_ = 0u;
  time_ = GOOGLE_LONGLONG(0);
  coordinates_ = NULL;
  speed_ = 0;
  course_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ArgumentVariant_BplaPosition::~Packet_ArgumentVariant_BplaPosition() {
  // @@protoc_insertion_point(destructor:SolverClient.Packet.ArgumentVariant.BplaPosition)
  SharedDtor();
}

void Packet_ArgumentVariant_BplaPosition::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete coordinates_;
  }
}

void Packet_ArgumentVariant_BplaPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_ArgumentVariant_BplaPosition& Packet_ArgumentVariant_BplaPosition::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SolverPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SolverPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_ArgumentVariant_BplaPosition* Packet_ArgumentVariant_BplaPosition::default_instance_ = NULL;

Packet_ArgumentVariant_BplaPosition* Packet_ArgumentVariant_BplaPosition::New() const {
  return new Packet_ArgumentVariant_BplaPosition;
}

void Packet_ArgumentVariant_BplaPosition::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Packet_ArgumentVariant_BplaPosition*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(speed_, bort_number_);
    time_ = GOOGLE_LONGLONG(0);
    if (has_coordinates()) {
      if (coordinates_ != NULL) coordinates_->::SolverClient::Packet_ArgumentVariant_BplaPosition_Coordinates::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_ArgumentVariant_BplaPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:SolverClient.Packet.ArgumentVariant.BplaPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bort_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bort_number_)));
          set_has_bort_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required int64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_coordinates;
        break;
      }

      // required .SolverClient.Packet.ArgumentVariant.BplaPosition.Coordinates coordinates = 3;
      case 3: {
        if (tag == 26) {
         parse_coordinates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coordinates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_speed;
        break;
      }

      // required double speed = 4;
      case 4: {
        if (tag == 33) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_course;
        break;
      }

      // required double course = 5;
      case 5: {
        if (tag == 41) {
         parse_course:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &course_)));
          set_has_course();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SolverClient.Packet.ArgumentVariant.BplaPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SolverClient.Packet.ArgumentVariant.BplaPosition)
  return false;
#undef DO_
}

void Packet_ArgumentVariant_BplaPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SolverClient.Packet.ArgumentVariant.BplaPosition)
  // required uint32 bort_number = 1;
  if (has_bort_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bort_number(), output);
  }

  // required int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // required .SolverClient.Packet.ArgumentVariant.BplaPosition.Coordinates coordinates = 3;
  if (has_coordinates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->coordinates(), output);
  }

  // required double speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->speed(), output);
  }

  // required double course = 5;
  if (has_course()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->course(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:SolverClient.Packet.ArgumentVariant.BplaPosition)
}

int Packet_ArgumentVariant_BplaPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 bort_number = 1;
    if (has_bort_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bort_number());
    }

    // required int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required .SolverClient.Packet.ArgumentVariant.BplaPosition.Coordinates coordinates = 3;
    if (has_coordinates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coordinates());
    }

    // required double speed = 4;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // required double course = 5;
    if (has_course()) {
      total_size += 1 + 8;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ArgumentVariant_BplaPosition::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_ArgumentVariant_BplaPosition*>(&from));
}

void Packet_ArgumentVariant_BplaPosition::MergeFrom(const Packet_ArgumentVariant_BplaPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bort_number()) {
      set_bort_number(from.bort_number());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_coordinates()) {
      mutable_coordinates()->::SolverClient::Packet_ArgumentVariant_BplaPosition_Coordinates::MergeFrom(from.coordinates());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_course()) {
      set_course(from.course());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_ArgumentVariant_BplaPosition::CopyFrom(const Packet_ArgumentVariant_BplaPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ArgumentVariant_BplaPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_coordinates()) {
    if (!this->coordinates().IsInitialized()) return false;
  }
  return true;
}

void Packet_ArgumentVariant_BplaPosition::Swap(Packet_ArgumentVariant_BplaPosition* other) {
  if (other != this) {
    std::swap(bort_number_, other->bort_number_);
    std::swap(time_, other->time_);
    std::swap(coordinates_, other->coordinates_);
    std::swap(speed_, other->speed_);
    std::swap(course_, other->course_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_ArgumentVariant_BplaPosition::GetTypeName() const {
  return "SolverClient.Packet.ArgumentVariant.BplaPosition";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ArgumentVariant_SolverInput::kCenterFrequencyFieldNumber;
const int Packet_ArgumentVariant_SolverInput::kDatetimeFieldNumber;
const int Packet_ArgumentVariant_SolverInput::kDelaysFieldNumber;
#endif  // !_MSC_VER

Packet_ArgumentVariant_SolverInput::Packet_ArgumentVariant_SolverInput()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SolverClient.Packet.ArgumentVariant.SolverInput)
}

void Packet_ArgumentVariant_SolverInput::InitAsDefaultInstance() {
}

Packet_ArgumentVariant_SolverInput::Packet_ArgumentVariant_SolverInput(const Packet_ArgumentVariant_SolverInput& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SolverClient.Packet.ArgumentVariant.SolverInput)
}

void Packet_ArgumentVariant_SolverInput::SharedCtor() {
  _cached_size_ = 0;
  centerfrequency_ = 0;
  datetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ArgumentVariant_SolverInput::~Packet_ArgumentVariant_SolverInput() {
  // @@protoc_insertion_point(destructor:SolverClient.Packet.ArgumentVariant.SolverInput)
  SharedDtor();
}

void Packet_ArgumentVariant_SolverInput::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Packet_ArgumentVariant_SolverInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_ArgumentVariant_SolverInput& Packet_ArgumentVariant_SolverInput::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SolverPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SolverPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_ArgumentVariant_SolverInput* Packet_ArgumentVariant_SolverInput::default_instance_ = NULL;

Packet_ArgumentVariant_SolverInput* Packet_ArgumentVariant_SolverInput::New() const {
  return new Packet_ArgumentVariant_SolverInput;
}

void Packet_ArgumentVariant_SolverInput::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Packet_ArgumentVariant_SolverInput*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(centerfrequency_, datetime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  delays_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_ArgumentVariant_SolverInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:SolverClient.Packet.ArgumentVariant.SolverInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double centerFrequency = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerfrequency_)));
          set_has_centerfrequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_datetime;
        break;
      }

      // required int64 datetime = 2;
      case 2: {
        if (tag == 16) {
         parse_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_delays;
        break;
      }

      // repeated double delays = 3;
      case 3: {
        if (tag == 25) {
         parse_delays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_delays())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_delays())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_delays;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SolverClient.Packet.ArgumentVariant.SolverInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SolverClient.Packet.ArgumentVariant.SolverInput)
  return false;
#undef DO_
}

void Packet_ArgumentVariant_SolverInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SolverClient.Packet.ArgumentVariant.SolverInput)
  // required double centerFrequency = 1;
  if (has_centerfrequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->centerfrequency(), output);
  }

  // required int64 datetime = 2;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->datetime(), output);
  }

  // repeated double delays = 3;
  for (int i = 0; i < this->delays_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->delays(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:SolverClient.Packet.ArgumentVariant.SolverInput)
}

int Packet_ArgumentVariant_SolverInput::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double centerFrequency = 1;
    if (has_centerfrequency()) {
      total_size += 1 + 8;
    }

    // required int64 datetime = 2;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->datetime());
    }

  }
  // repeated double delays = 3;
  {
    int data_size = 0;
    data_size = 8 * this->delays_size();
    total_size += 1 * this->delays_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ArgumentVariant_SolverInput::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_ArgumentVariant_SolverInput*>(&from));
}

void Packet_ArgumentVariant_SolverInput::MergeFrom(const Packet_ArgumentVariant_SolverInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  delays_.MergeFrom(from.delays_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_centerfrequency()) {
      set_centerfrequency(from.centerfrequency());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_ArgumentVariant_SolverInput::CopyFrom(const Packet_ArgumentVariant_SolverInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ArgumentVariant_SolverInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Packet_ArgumentVariant_SolverInput::Swap(Packet_ArgumentVariant_SolverInput* other) {
  if (other != this) {
    std::swap(centerfrequency_, other->centerfrequency_);
    std::swap(datetime_, other->datetime_);
    delays_.Swap(&other->delays_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_ArgumentVariant_SolverInput::GetTypeName() const {
  return "SolverClient.Packet.ArgumentVariant.SolverInput";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ArgumentVariant_SolverAnswer_Coordinates::kLatFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer_Coordinates::kLonFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer_Coordinates::kAltFieldNumber;
#endif  // !_MSC_VER

Packet_ArgumentVariant_SolverAnswer_Coordinates::Packet_ArgumentVariant_SolverAnswer_Coordinates()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.Coordinates)
}

void Packet_ArgumentVariant_SolverAnswer_Coordinates::InitAsDefaultInstance() {
}

Packet_ArgumentVariant_SolverAnswer_Coordinates::Packet_ArgumentVariant_SolverAnswer_Coordinates(const Packet_ArgumentVariant_SolverAnswer_Coordinates& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.Coordinates)
}

void Packet_ArgumentVariant_SolverAnswer_Coordinates::SharedCtor() {
  _cached_size_ = 0;
  lat_ = 0;
  lon_ = 0;
  alt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ArgumentVariant_SolverAnswer_Coordinates::~Packet_ArgumentVariant_SolverAnswer_Coordinates() {
  // @@protoc_insertion_point(destructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.Coordinates)
  SharedDtor();
}

void Packet_ArgumentVariant_SolverAnswer_Coordinates::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Packet_ArgumentVariant_SolverAnswer_Coordinates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_ArgumentVariant_SolverAnswer_Coordinates& Packet_ArgumentVariant_SolverAnswer_Coordinates::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SolverPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SolverPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_ArgumentVariant_SolverAnswer_Coordinates* Packet_ArgumentVariant_SolverAnswer_Coordinates::default_instance_ = NULL;

Packet_ArgumentVariant_SolverAnswer_Coordinates* Packet_ArgumentVariant_SolverAnswer_Coordinates::New() const {
  return new Packet_ArgumentVariant_SolverAnswer_Coordinates;
}

void Packet_ArgumentVariant_SolverAnswer_Coordinates::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Packet_ArgumentVariant_SolverAnswer_Coordinates*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(lat_, alt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_ArgumentVariant_SolverAnswer_Coordinates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:SolverClient.Packet.ArgumentVariant.SolverAnswer.Coordinates)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double lat = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lon;
        break;
      }

      // required double lon = 2;
      case 2: {
        if (tag == 17) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_alt;
        break;
      }

      // required double alt = 3;
      case 3: {
        if (tag == 25) {
         parse_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alt_)));
          set_has_alt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SolverClient.Packet.ArgumentVariant.SolverAnswer.Coordinates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SolverClient.Packet.ArgumentVariant.SolverAnswer.Coordinates)
  return false;
#undef DO_
}

void Packet_ArgumentVariant_SolverAnswer_Coordinates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SolverClient.Packet.ArgumentVariant.SolverAnswer.Coordinates)
  // required double lat = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // required double lon = 2;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  // required double alt = 3;
  if (has_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->alt(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:SolverClient.Packet.ArgumentVariant.SolverAnswer.Coordinates)
}

int Packet_ArgumentVariant_SolverAnswer_Coordinates::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double lat = 1;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // required double lon = 2;
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // required double alt = 3;
    if (has_alt()) {
      total_size += 1 + 8;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ArgumentVariant_SolverAnswer_Coordinates::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_ArgumentVariant_SolverAnswer_Coordinates*>(&from));
}

void Packet_ArgumentVariant_SolverAnswer_Coordinates::MergeFrom(const Packet_ArgumentVariant_SolverAnswer_Coordinates& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_alt()) {
      set_alt(from.alt());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_ArgumentVariant_SolverAnswer_Coordinates::CopyFrom(const Packet_ArgumentVariant_SolverAnswer_Coordinates& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ArgumentVariant_SolverAnswer_Coordinates::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Packet_ArgumentVariant_SolverAnswer_Coordinates::Swap(Packet_ArgumentVariant_SolverAnswer_Coordinates* other) {
  if (other != this) {
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(alt_, other->alt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_ArgumentVariant_SolverAnswer_Coordinates::GetTypeName() const {
  return "SolverClient.Packet.ArgumentVariant.SolverAnswer.Coordinates";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::kLatAccFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::kLonAccFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::kAltAccFieldNumber;
#endif  // !_MSC_VER

Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordinatesAccuracy)
}

void Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::InitAsDefaultInstance() {
}

Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy(const Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordinatesAccuracy)
}

void Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::SharedCtor() {
  _cached_size_ = 0;
  lat_acc_ = 0;
  lon_acc_ = 0;
  alt_acc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::~Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy() {
  // @@protoc_insertion_point(destructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordinatesAccuracy)
  SharedDtor();
}

void Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy& Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SolverPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SolverPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy* Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::default_instance_ = NULL;

Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy* Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::New() const {
  return new Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy;
}

void Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(lat_acc_, alt_acc_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordinatesAccuracy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double lat_acc = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_acc_)));
          set_has_lat_acc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lon_acc;
        break;
      }

      // required double lon_acc = 2;
      case 2: {
        if (tag == 17) {
         parse_lon_acc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_acc_)));
          set_has_lon_acc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_alt_acc;
        break;
      }

      // required double alt_acc = 3;
      case 3: {
        if (tag == 25) {
         parse_alt_acc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alt_acc_)));
          set_has_alt_acc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordinatesAccuracy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordinatesAccuracy)
  return false;
#undef DO_
}

void Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordinatesAccuracy)
  // required double lat_acc = 1;
  if (has_lat_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat_acc(), output);
  }

  // required double lon_acc = 2;
  if (has_lon_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon_acc(), output);
  }

  // required double alt_acc = 3;
  if (has_alt_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->alt_acc(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordinatesAccuracy)
}

int Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double lat_acc = 1;
    if (has_lat_acc()) {
      total_size += 1 + 8;
    }

    // required double lon_acc = 2;
    if (has_lon_acc()) {
      total_size += 1 + 8;
    }

    // required double alt_acc = 3;
    if (has_alt_acc()) {
      total_size += 1 + 8;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy*>(&from));
}

void Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::MergeFrom(const Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat_acc()) {
      set_lat_acc(from.lat_acc());
    }
    if (from.has_lon_acc()) {
      set_lon_acc(from.lon_acc());
    }
    if (from.has_alt_acc()) {
      set_alt_acc(from.alt_acc());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::CopyFrom(const Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::Swap(Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy* other) {
  if (other != this) {
    std::swap(lat_acc_, other->lat_acc_);
    std::swap(lon_acc_, other->lon_acc_);
    std::swap(alt_acc_, other->alt_acc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::GetTypeName() const {
  return "SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordinatesAccuracy";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ArgumentVariant_SolverAnswer_MotionEstimate::kDatetimeFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer_MotionEstimate::kCoordinatesFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer_MotionEstimate::kCoordinatesAccFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer_MotionEstimate::kTargetSpeedFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer_MotionEstimate::kTargetSpeedAccFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer_MotionEstimate::kRelativeBearingFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer_MotionEstimate::kQualityFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer_MotionEstimate::kStateFieldNumber;
#endif  // !_MSC_VER

Packet_ArgumentVariant_SolverAnswer_MotionEstimate::Packet_ArgumentVariant_SolverAnswer_MotionEstimate()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.MotionEstimate)
}

void Packet_ArgumentVariant_SolverAnswer_MotionEstimate::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  coordinates_ = const_cast< ::SolverClient::Packet_ArgumentVariant_SolverAnswer_Coordinates*>(
      ::SolverClient::Packet_ArgumentVariant_SolverAnswer_Coordinates::internal_default_instance());
#else
  coordinates_ = const_cast< ::SolverClient::Packet_ArgumentVariant_SolverAnswer_Coordinates*>(&::SolverClient::Packet_ArgumentVariant_SolverAnswer_Coordinates::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  coordinates_acc_ = const_cast< ::SolverClient::Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy*>(
      ::SolverClient::Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::internal_default_instance());
#else
  coordinates_acc_ = const_cast< ::SolverClient::Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy*>(&::SolverClient::Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::default_instance());
#endif
}

Packet_ArgumentVariant_SolverAnswer_MotionEstimate::Packet_ArgumentVariant_SolverAnswer_MotionEstimate(const Packet_ArgumentVariant_SolverAnswer_MotionEstimate& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.MotionEstimate)
}

void Packet_ArgumentVariant_SolverAnswer_MotionEstimate::SharedCtor() {
  _cached_size_ = 0;
  datetime_ = GOOGLE_LONGLONG(0);
  coordinates_ = NULL;
  coordinates_acc_ = NULL;
  targetspeed_ = 0;
  targetspeed_acc_ = 0;
  relativebearing_ = 0;
  quality_ = 1;
  state_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ArgumentVariant_SolverAnswer_MotionEstimate::~Packet_ArgumentVariant_SolverAnswer_MotionEstimate() {
  // @@protoc_insertion_point(destructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.MotionEstimate)
  SharedDtor();
}

void Packet_ArgumentVariant_SolverAnswer_MotionEstimate::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete coordinates_;
    delete coordinates_acc_;
  }
}

void Packet_ArgumentVariant_SolverAnswer_MotionEstimate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_ArgumentVariant_SolverAnswer_MotionEstimate& Packet_ArgumentVariant_SolverAnswer_MotionEstimate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SolverPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SolverPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_ArgumentVariant_SolverAnswer_MotionEstimate* Packet_ArgumentVariant_SolverAnswer_MotionEstimate::default_instance_ = NULL;

Packet_ArgumentVariant_SolverAnswer_MotionEstimate* Packet_ArgumentVariant_SolverAnswer_MotionEstimate::New() const {
  return new Packet_ArgumentVariant_SolverAnswer_MotionEstimate;
}

void Packet_ArgumentVariant_SolverAnswer_MotionEstimate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Packet_ArgumentVariant_SolverAnswer_MotionEstimate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(targetspeed_, relativebearing_);
    datetime_ = GOOGLE_LONGLONG(0);
    if (has_coordinates()) {
      if (coordinates_ != NULL) coordinates_->::SolverClient::Packet_ArgumentVariant_SolverAnswer_Coordinates::Clear();
    }
    if (has_coordinates_acc()) {
      if (coordinates_acc_ != NULL) coordinates_acc_->::SolverClient::Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::Clear();
    }
    quality_ = 1;
    state_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_ArgumentVariant_SolverAnswer_MotionEstimate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:SolverClient.Packet.ArgumentVariant.SolverAnswer.MotionEstimate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 datetime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_coordinates;
        break;
      }

      // required .SolverClient.Packet.ArgumentVariant.SolverAnswer.Coordinates coordinates = 2;
      case 2: {
        if (tag == 18) {
         parse_coordinates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coordinates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_coordinates_acc;
        break;
      }

      // required .SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordinatesAccuracy coordinates_acc = 3;
      case 3: {
        if (tag == 26) {
         parse_coordinates_acc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coordinates_acc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_targetSpeed;
        break;
      }

      // required double targetSpeed = 4;
      case 4: {
        if (tag == 33) {
         parse_targetSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &targetspeed_)));
          set_has_targetspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_targetSpeed_acc;
        break;
      }

      // required double targetSpeed_acc = 5;
      case 5: {
        if (tag == 41) {
         parse_targetSpeed_acc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &targetspeed_acc_)));
          set_has_targetspeed_acc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_relativeBearing;
        break;
      }

      // required double relativeBearing = 6;
      case 6: {
        if (tag == 49) {
         parse_relativeBearing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relativebearing_)));
          set_has_relativebearing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_quality;
        break;
      }

      // required .SolverClient.EstimateQuality quality = 7;
      case 7: {
        if (tag == 56) {
         parse_quality:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SolverClient::EstimateQuality_IsValid(value)) {
            set_quality(static_cast< ::SolverClient::EstimateQuality >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_state;
        break;
      }

      // required .SolverClient.StateOfMotion state = 8;
      case 8: {
        if (tag == 64) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SolverClient::StateOfMotion_IsValid(value)) {
            set_state(static_cast< ::SolverClient::StateOfMotion >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SolverClient.Packet.ArgumentVariant.SolverAnswer.MotionEstimate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SolverClient.Packet.ArgumentVariant.SolverAnswer.MotionEstimate)
  return false;
#undef DO_
}

void Packet_ArgumentVariant_SolverAnswer_MotionEstimate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SolverClient.Packet.ArgumentVariant.SolverAnswer.MotionEstimate)
  // required int64 datetime = 1;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->datetime(), output);
  }

  // required .SolverClient.Packet.ArgumentVariant.SolverAnswer.Coordinates coordinates = 2;
  if (has_coordinates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->coordinates(), output);
  }

  // required .SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordinatesAccuracy coordinates_acc = 3;
  if (has_coordinates_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->coordinates_acc(), output);
  }

  // required double targetSpeed = 4;
  if (has_targetspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->targetspeed(), output);
  }

  // required double targetSpeed_acc = 5;
  if (has_targetspeed_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->targetspeed_acc(), output);
  }

  // required double relativeBearing = 6;
  if (has_relativebearing()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->relativebearing(), output);
  }

  // required .SolverClient.EstimateQuality quality = 7;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->quality(), output);
  }

  // required .SolverClient.StateOfMotion state = 8;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:SolverClient.Packet.ArgumentVariant.SolverAnswer.MotionEstimate)
}

int Packet_ArgumentVariant_SolverAnswer_MotionEstimate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 datetime = 1;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->datetime());
    }

    // required .SolverClient.Packet.ArgumentVariant.SolverAnswer.Coordinates coordinates = 2;
    if (has_coordinates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coordinates());
    }

    // required .SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordinatesAccuracy coordinates_acc = 3;
    if (has_coordinates_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coordinates_acc());
    }

    // required double targetSpeed = 4;
    if (has_targetspeed()) {
      total_size += 1 + 8;
    }

    // required double targetSpeed_acc = 5;
    if (has_targetspeed_acc()) {
      total_size += 1 + 8;
    }

    // required double relativeBearing = 6;
    if (has_relativebearing()) {
      total_size += 1 + 8;
    }

    // required .SolverClient.EstimateQuality quality = 7;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
    }

    // required .SolverClient.StateOfMotion state = 8;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ArgumentVariant_SolverAnswer_MotionEstimate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_ArgumentVariant_SolverAnswer_MotionEstimate*>(&from));
}

void Packet_ArgumentVariant_SolverAnswer_MotionEstimate::MergeFrom(const Packet_ArgumentVariant_SolverAnswer_MotionEstimate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_coordinates()) {
      mutable_coordinates()->::SolverClient::Packet_ArgumentVariant_SolverAnswer_Coordinates::MergeFrom(from.coordinates());
    }
    if (from.has_coordinates_acc()) {
      mutable_coordinates_acc()->::SolverClient::Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::MergeFrom(from.coordinates_acc());
    }
    if (from.has_targetspeed()) {
      set_targetspeed(from.targetspeed());
    }
    if (from.has_targetspeed_acc()) {
      set_targetspeed_acc(from.targetspeed_acc());
    }
    if (from.has_relativebearing()) {
      set_relativebearing(from.relativebearing());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_ArgumentVariant_SolverAnswer_MotionEstimate::CopyFrom(const Packet_ArgumentVariant_SolverAnswer_MotionEstimate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ArgumentVariant_SolverAnswer_MotionEstimate::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_coordinates()) {
    if (!this->coordinates().IsInitialized()) return false;
  }
  if (has_coordinates_acc()) {
    if (!this->coordinates_acc().IsInitialized()) return false;
  }
  return true;
}

void Packet_ArgumentVariant_SolverAnswer_MotionEstimate::Swap(Packet_ArgumentVariant_SolverAnswer_MotionEstimate* other) {
  if (other != this) {
    std::swap(datetime_, other->datetime_);
    std::swap(coordinates_, other->coordinates_);
    std::swap(coordinates_acc_, other->coordinates_acc_);
    std::swap(targetspeed_, other->targetspeed_);
    std::swap(targetspeed_acc_, other->targetspeed_acc_);
    std::swap(relativebearing_, other->relativebearing_);
    std::swap(quality_, other->quality_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_ArgumentVariant_SolverAnswer_MotionEstimate::GetTypeName() const {
  return "SolverClient.Packet.ArgumentVariant.SolverAnswer.MotionEstimate";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::kDatetimeFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::kCoordinatesFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::kCoordinatesAccFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::kQualityFieldNumber;
#endif  // !_MSC_VER

Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::Packet_ArgumentVariant_SolverAnswer_CoordsEstimate()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordsEstimate)
}

void Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  coordinates_ = const_cast< ::SolverClient::Packet_ArgumentVariant_SolverAnswer_Coordinates*>(
      ::SolverClient::Packet_ArgumentVariant_SolverAnswer_Coordinates::internal_default_instance());
#else
  coordinates_ = const_cast< ::SolverClient::Packet_ArgumentVariant_SolverAnswer_Coordinates*>(&::SolverClient::Packet_ArgumentVariant_SolverAnswer_Coordinates::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  coordinates_acc_ = const_cast< ::SolverClient::Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy*>(
      ::SolverClient::Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::internal_default_instance());
#else
  coordinates_acc_ = const_cast< ::SolverClient::Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy*>(&::SolverClient::Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::default_instance());
#endif
}

Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::Packet_ArgumentVariant_SolverAnswer_CoordsEstimate(const Packet_ArgumentVariant_SolverAnswer_CoordsEstimate& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordsEstimate)
}

void Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::SharedCtor() {
  _cached_size_ = 0;
  datetime_ = GOOGLE_LONGLONG(0);
  coordinates_ = NULL;
  coordinates_acc_ = NULL;
  quality_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::~Packet_ArgumentVariant_SolverAnswer_CoordsEstimate() {
  // @@protoc_insertion_point(destructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordsEstimate)
  SharedDtor();
}

void Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete coordinates_;
    delete coordinates_acc_;
  }
}

void Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_ArgumentVariant_SolverAnswer_CoordsEstimate& Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SolverPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SolverPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_ArgumentVariant_SolverAnswer_CoordsEstimate* Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::default_instance_ = NULL;

Packet_ArgumentVariant_SolverAnswer_CoordsEstimate* Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::New() const {
  return new Packet_ArgumentVariant_SolverAnswer_CoordsEstimate;
}

void Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    datetime_ = GOOGLE_LONGLONG(0);
    if (has_coordinates()) {
      if (coordinates_ != NULL) coordinates_->::SolverClient::Packet_ArgumentVariant_SolverAnswer_Coordinates::Clear();
    }
    if (has_coordinates_acc()) {
      if (coordinates_acc_ != NULL) coordinates_acc_->::SolverClient::Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::Clear();
    }
    quality_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordsEstimate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 datetime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_coordinates;
        break;
      }

      // required .SolverClient.Packet.ArgumentVariant.SolverAnswer.Coordinates coordinates = 2;
      case 2: {
        if (tag == 18) {
         parse_coordinates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coordinates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_coordinates_acc;
        break;
      }

      // required .SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordinatesAccuracy coordinates_acc = 3;
      case 3: {
        if (tag == 26) {
         parse_coordinates_acc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coordinates_acc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_quality;
        break;
      }

      // required .SolverClient.EstimateQuality quality = 4;
      case 4: {
        if (tag == 32) {
         parse_quality:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SolverClient::EstimateQuality_IsValid(value)) {
            set_quality(static_cast< ::SolverClient::EstimateQuality >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordsEstimate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordsEstimate)
  return false;
#undef DO_
}

void Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordsEstimate)
  // required int64 datetime = 1;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->datetime(), output);
  }

  // required .SolverClient.Packet.ArgumentVariant.SolverAnswer.Coordinates coordinates = 2;
  if (has_coordinates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->coordinates(), output);
  }

  // required .SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordinatesAccuracy coordinates_acc = 3;
  if (has_coordinates_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->coordinates_acc(), output);
  }

  // required .SolverClient.EstimateQuality quality = 4;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->quality(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordsEstimate)
}

int Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 datetime = 1;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->datetime());
    }

    // required .SolverClient.Packet.ArgumentVariant.SolverAnswer.Coordinates coordinates = 2;
    if (has_coordinates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coordinates());
    }

    // required .SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordinatesAccuracy coordinates_acc = 3;
    if (has_coordinates_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coordinates_acc());
    }

    // required .SolverClient.EstimateQuality quality = 4;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_ArgumentVariant_SolverAnswer_CoordsEstimate*>(&from));
}

void Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::MergeFrom(const Packet_ArgumentVariant_SolverAnswer_CoordsEstimate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_coordinates()) {
      mutable_coordinates()->::SolverClient::Packet_ArgumentVariant_SolverAnswer_Coordinates::MergeFrom(from.coordinates());
    }
    if (from.has_coordinates_acc()) {
      mutable_coordinates_acc()->::SolverClient::Packet_ArgumentVariant_SolverAnswer_CoordinatesAccuracy::MergeFrom(from.coordinates_acc());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::CopyFrom(const Packet_ArgumentVariant_SolverAnswer_CoordsEstimate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_coordinates()) {
    if (!this->coordinates().IsInitialized()) return false;
  }
  if (has_coordinates_acc()) {
    if (!this->coordinates_acc().IsInitialized()) return false;
  }
  return true;
}

void Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::Swap(Packet_ArgumentVariant_SolverAnswer_CoordsEstimate* other) {
  if (other != this) {
    std::swap(datetime_, other->datetime_);
    std::swap(coordinates_, other->coordinates_);
    std::swap(coordinates_acc_, other->coordinates_acc_);
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_ArgumentVariant_SolverAnswer_CoordsEstimate::GetTypeName() const {
  return "SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordsEstimate";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ArgumentVariant_SolverAnswer_Trajectory::kResultOfCalculationFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer_Trajectory::kMotionEstimateFieldNumber;
#endif  // !_MSC_VER

Packet_ArgumentVariant_SolverAnswer_Trajectory::Packet_ArgumentVariant_SolverAnswer_Trajectory()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.Trajectory)
}

void Packet_ArgumentVariant_SolverAnswer_Trajectory::InitAsDefaultInstance() {
}

Packet_ArgumentVariant_SolverAnswer_Trajectory::Packet_ArgumentVariant_SolverAnswer_Trajectory(const Packet_ArgumentVariant_SolverAnswer_Trajectory& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.Trajectory)
}

void Packet_ArgumentVariant_SolverAnswer_Trajectory::SharedCtor() {
  _cached_size_ = 0;
  result_of_calculation_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ArgumentVariant_SolverAnswer_Trajectory::~Packet_ArgumentVariant_SolverAnswer_Trajectory() {
  // @@protoc_insertion_point(destructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.Trajectory)
  SharedDtor();
}

void Packet_ArgumentVariant_SolverAnswer_Trajectory::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Packet_ArgumentVariant_SolverAnswer_Trajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_ArgumentVariant_SolverAnswer_Trajectory& Packet_ArgumentVariant_SolverAnswer_Trajectory::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SolverPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SolverPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_ArgumentVariant_SolverAnswer_Trajectory* Packet_ArgumentVariant_SolverAnswer_Trajectory::default_instance_ = NULL;

Packet_ArgumentVariant_SolverAnswer_Trajectory* Packet_ArgumentVariant_SolverAnswer_Trajectory::New() const {
  return new Packet_ArgumentVariant_SolverAnswer_Trajectory;
}

void Packet_ArgumentVariant_SolverAnswer_Trajectory::Clear() {
  result_of_calculation_ = 1;
  motionestimate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_ArgumentVariant_SolverAnswer_Trajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:SolverClient.Packet.ArgumentVariant.SolverAnswer.Trajectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SolverClient.ResultOfCalculation result_of_calculation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SolverClient::ResultOfCalculation_IsValid(value)) {
            set_result_of_calculation(static_cast< ::SolverClient::ResultOfCalculation >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_motionEstimate;
        break;
      }

      // repeated .SolverClient.Packet.ArgumentVariant.SolverAnswer.MotionEstimate motionEstimate = 2;
      case 2: {
        if (tag == 18) {
         parse_motionEstimate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_motionestimate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_motionEstimate;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SolverClient.Packet.ArgumentVariant.SolverAnswer.Trajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SolverClient.Packet.ArgumentVariant.SolverAnswer.Trajectory)
  return false;
#undef DO_
}

void Packet_ArgumentVariant_SolverAnswer_Trajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SolverClient.Packet.ArgumentVariant.SolverAnswer.Trajectory)
  // required .SolverClient.ResultOfCalculation result_of_calculation = 1;
  if (has_result_of_calculation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_of_calculation(), output);
  }

  // repeated .SolverClient.Packet.ArgumentVariant.SolverAnswer.MotionEstimate motionEstimate = 2;
  for (int i = 0; i < this->motionestimate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->motionestimate(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:SolverClient.Packet.ArgumentVariant.SolverAnswer.Trajectory)
}

int Packet_ArgumentVariant_SolverAnswer_Trajectory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SolverClient.ResultOfCalculation result_of_calculation = 1;
    if (has_result_of_calculation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_of_calculation());
    }

  }
  // repeated .SolverClient.Packet.ArgumentVariant.SolverAnswer.MotionEstimate motionEstimate = 2;
  total_size += 1 * this->motionestimate_size();
  for (int i = 0; i < this->motionestimate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->motionestimate(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ArgumentVariant_SolverAnswer_Trajectory::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_ArgumentVariant_SolverAnswer_Trajectory*>(&from));
}

void Packet_ArgumentVariant_SolverAnswer_Trajectory::MergeFrom(const Packet_ArgumentVariant_SolverAnswer_Trajectory& from) {
  GOOGLE_CHECK_NE(&from, this);
  motionestimate_.MergeFrom(from.motionestimate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_of_calculation()) {
      set_result_of_calculation(from.result_of_calculation());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_ArgumentVariant_SolverAnswer_Trajectory::CopyFrom(const Packet_ArgumentVariant_SolverAnswer_Trajectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ArgumentVariant_SolverAnswer_Trajectory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->motionestimate())) return false;
  return true;
}

void Packet_ArgumentVariant_SolverAnswer_Trajectory::Swap(Packet_ArgumentVariant_SolverAnswer_Trajectory* other) {
  if (other != this) {
    std::swap(result_of_calculation_, other->result_of_calculation_);
    motionestimate_.Swap(&other->motionestimate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_ArgumentVariant_SolverAnswer_Trajectory::GetTypeName() const {
  return "SolverClient.Packet.ArgumentVariant.SolverAnswer.Trajectory";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ArgumentVariant_SolverAnswer_SingleMarks::kResultOfCalculationFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer_SingleMarks::kCoordsEstimateFieldNumber;
#endif  // !_MSC_VER

Packet_ArgumentVariant_SolverAnswer_SingleMarks::Packet_ArgumentVariant_SolverAnswer_SingleMarks()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.SingleMarks)
}

void Packet_ArgumentVariant_SolverAnswer_SingleMarks::InitAsDefaultInstance() {
}

Packet_ArgumentVariant_SolverAnswer_SingleMarks::Packet_ArgumentVariant_SolverAnswer_SingleMarks(const Packet_ArgumentVariant_SolverAnswer_SingleMarks& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.SingleMarks)
}

void Packet_ArgumentVariant_SolverAnswer_SingleMarks::SharedCtor() {
  _cached_size_ = 0;
  result_of_calculation_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ArgumentVariant_SolverAnswer_SingleMarks::~Packet_ArgumentVariant_SolverAnswer_SingleMarks() {
  // @@protoc_insertion_point(destructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.SingleMarks)
  SharedDtor();
}

void Packet_ArgumentVariant_SolverAnswer_SingleMarks::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Packet_ArgumentVariant_SolverAnswer_SingleMarks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_ArgumentVariant_SolverAnswer_SingleMarks& Packet_ArgumentVariant_SolverAnswer_SingleMarks::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SolverPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SolverPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_ArgumentVariant_SolverAnswer_SingleMarks* Packet_ArgumentVariant_SolverAnswer_SingleMarks::default_instance_ = NULL;

Packet_ArgumentVariant_SolverAnswer_SingleMarks* Packet_ArgumentVariant_SolverAnswer_SingleMarks::New() const {
  return new Packet_ArgumentVariant_SolverAnswer_SingleMarks;
}

void Packet_ArgumentVariant_SolverAnswer_SingleMarks::Clear() {
  result_of_calculation_ = 1;
  coordsestimate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_ArgumentVariant_SolverAnswer_SingleMarks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:SolverClient.Packet.ArgumentVariant.SolverAnswer.SingleMarks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SolverClient.ResultOfCalculation result_of_calculation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SolverClient::ResultOfCalculation_IsValid(value)) {
            set_result_of_calculation(static_cast< ::SolverClient::ResultOfCalculation >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_coordsEstimate;
        break;
      }

      // repeated .SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordsEstimate coordsEstimate = 2;
      case 2: {
        if (tag == 18) {
         parse_coordsEstimate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_coordsestimate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_coordsEstimate;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SolverClient.Packet.ArgumentVariant.SolverAnswer.SingleMarks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SolverClient.Packet.ArgumentVariant.SolverAnswer.SingleMarks)
  return false;
#undef DO_
}

void Packet_ArgumentVariant_SolverAnswer_SingleMarks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SolverClient.Packet.ArgumentVariant.SolverAnswer.SingleMarks)
  // required .SolverClient.ResultOfCalculation result_of_calculation = 1;
  if (has_result_of_calculation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_of_calculation(), output);
  }

  // repeated .SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordsEstimate coordsEstimate = 2;
  for (int i = 0; i < this->coordsestimate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->coordsestimate(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:SolverClient.Packet.ArgumentVariant.SolverAnswer.SingleMarks)
}

int Packet_ArgumentVariant_SolverAnswer_SingleMarks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SolverClient.ResultOfCalculation result_of_calculation = 1;
    if (has_result_of_calculation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_of_calculation());
    }

  }
  // repeated .SolverClient.Packet.ArgumentVariant.SolverAnswer.CoordsEstimate coordsEstimate = 2;
  total_size += 1 * this->coordsestimate_size();
  for (int i = 0; i < this->coordsestimate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coordsestimate(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ArgumentVariant_SolverAnswer_SingleMarks::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_ArgumentVariant_SolverAnswer_SingleMarks*>(&from));
}

void Packet_ArgumentVariant_SolverAnswer_SingleMarks::MergeFrom(const Packet_ArgumentVariant_SolverAnswer_SingleMarks& from) {
  GOOGLE_CHECK_NE(&from, this);
  coordsestimate_.MergeFrom(from.coordsestimate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_of_calculation()) {
      set_result_of_calculation(from.result_of_calculation());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_ArgumentVariant_SolverAnswer_SingleMarks::CopyFrom(const Packet_ArgumentVariant_SolverAnswer_SingleMarks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ArgumentVariant_SolverAnswer_SingleMarks::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->coordsestimate())) return false;
  return true;
}

void Packet_ArgumentVariant_SolverAnswer_SingleMarks::Swap(Packet_ArgumentVariant_SolverAnswer_SingleMarks* other) {
  if (other != this) {
    std::swap(result_of_calculation_, other->result_of_calculation_);
    coordsestimate_.Swap(&other->coordsestimate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_ArgumentVariant_SolverAnswer_SingleMarks::GetTypeName() const {
  return "SolverClient.Packet.ArgumentVariant.SolverAnswer.SingleMarks";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::kLatFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::kLonFieldNumber;
#endif  // !_MSC_VER

Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine.LatLon)
}

void Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::InitAsDefaultInstance() {
}

Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon(const Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine.LatLon)
}

void Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::SharedCtor() {
  _cached_size_ = 0;
  lat_ = 0;
  lon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::~Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon() {
  // @@protoc_insertion_point(destructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine.LatLon)
  SharedDtor();
}

void Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon& Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SolverPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SolverPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon* Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::default_instance_ = NULL;

Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon* Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::New() const {
  return new Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon;
}

void Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(lat_, lon_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine.LatLon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double lat = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lon;
        break;
      }

      // required double lon = 2;
      case 2: {
        if (tag == 17) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine.LatLon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine.LatLon)
  return false;
#undef DO_
}

void Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine.LatLon)
  // required double lat = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // required double lon = 2;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine.LatLon)
}

int Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double lat = 1;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // required double lon = 2;
    if (has_lon()) {
      total_size += 1 + 8;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon*>(&from));
}

void Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::MergeFrom(const Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::CopyFrom(const Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::Swap(Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon* other) {
  if (other != this) {
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine_LatLon::GetTypeName() const {
  return "SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine.LatLon";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::kPointFieldNumber;
#endif  // !_MSC_VER

Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine)
}

void Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::InitAsDefaultInstance() {
}

Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine(const Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine)
}

void Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::~Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine() {
  // @@protoc_insertion_point(destructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine)
  SharedDtor();
}

void Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine& Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SolverPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SolverPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine* Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::default_instance_ = NULL;

Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine* Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::New() const {
  return new Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine;
}

void Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::Clear() {
  point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine.LatLon point = 1;
      case 1: {
        if (tag == 10) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_point;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine)
  return false;
#undef DO_
}

void Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine)
  // repeated .SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine.LatLon point = 1;
  for (int i = 0; i < this->point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->point(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine)
}

int Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::ByteSize() const {
  int total_size = 0;

  // repeated .SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine.LatLon point = 1;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine*>(&from));
}

void Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::MergeFrom(const Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_.MergeFrom(from.point_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::CopyFrom(const Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->point())) return false;
  return true;
}

void Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::Swap(Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine* other) {
  if (other != this) {
    point_.Swap(&other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_ArgumentVariant_SolverAnswer_StateLines_StateLine::GetTypeName() const {
  return "SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ArgumentVariant_SolverAnswer_StateLines::kResultOfCalculationFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer_StateLines::kDatetimeFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer_StateLines::kStateLineFieldNumber;
#endif  // !_MSC_VER

Packet_ArgumentVariant_SolverAnswer_StateLines::Packet_ArgumentVariant_SolverAnswer_StateLines()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines)
}

void Packet_ArgumentVariant_SolverAnswer_StateLines::InitAsDefaultInstance() {
}

Packet_ArgumentVariant_SolverAnswer_StateLines::Packet_ArgumentVariant_SolverAnswer_StateLines(const Packet_ArgumentVariant_SolverAnswer_StateLines& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines)
}

void Packet_ArgumentVariant_SolverAnswer_StateLines::SharedCtor() {
  _cached_size_ = 0;
  result_of_calculation_ = 1;
  datetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ArgumentVariant_SolverAnswer_StateLines::~Packet_ArgumentVariant_SolverAnswer_StateLines() {
  // @@protoc_insertion_point(destructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines)
  SharedDtor();
}

void Packet_ArgumentVariant_SolverAnswer_StateLines::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Packet_ArgumentVariant_SolverAnswer_StateLines::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_ArgumentVariant_SolverAnswer_StateLines& Packet_ArgumentVariant_SolverAnswer_StateLines::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SolverPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SolverPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_ArgumentVariant_SolverAnswer_StateLines* Packet_ArgumentVariant_SolverAnswer_StateLines::default_instance_ = NULL;

Packet_ArgumentVariant_SolverAnswer_StateLines* Packet_ArgumentVariant_SolverAnswer_StateLines::New() const {
  return new Packet_ArgumentVariant_SolverAnswer_StateLines;
}

void Packet_ArgumentVariant_SolverAnswer_StateLines::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_of_calculation_ = 1;
    datetime_ = GOOGLE_LONGLONG(0);
  }
  stateline_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_ArgumentVariant_SolverAnswer_StateLines::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SolverClient.ResultOfCalculation result_of_calculation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SolverClient::ResultOfCalculation_IsValid(value)) {
            set_result_of_calculation(static_cast< ::SolverClient::ResultOfCalculation >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_datetime;
        break;
      }

      // required int64 datetime = 2;
      case 2: {
        if (tag == 16) {
         parse_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stateLine;
        break;
      }

      // repeated .SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine stateLine = 3;
      case 3: {
        if (tag == 26) {
         parse_stateLine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stateline()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stateLine;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines)
  return false;
#undef DO_
}

void Packet_ArgumentVariant_SolverAnswer_StateLines::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines)
  // required .SolverClient.ResultOfCalculation result_of_calculation = 1;
  if (has_result_of_calculation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_of_calculation(), output);
  }

  // required int64 datetime = 2;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->datetime(), output);
  }

  // repeated .SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine stateLine = 3;
  for (int i = 0; i < this->stateline_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->stateline(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines)
}

int Packet_ArgumentVariant_SolverAnswer_StateLines::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SolverClient.ResultOfCalculation result_of_calculation = 1;
    if (has_result_of_calculation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_of_calculation());
    }

    // required int64 datetime = 2;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->datetime());
    }

  }
  // repeated .SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines.StateLine stateLine = 3;
  total_size += 1 * this->stateline_size();
  for (int i = 0; i < this->stateline_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stateline(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ArgumentVariant_SolverAnswer_StateLines::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_ArgumentVariant_SolverAnswer_StateLines*>(&from));
}

void Packet_ArgumentVariant_SolverAnswer_StateLines::MergeFrom(const Packet_ArgumentVariant_SolverAnswer_StateLines& from) {
  GOOGLE_CHECK_NE(&from, this);
  stateline_.MergeFrom(from.stateline_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_of_calculation()) {
      set_result_of_calculation(from.result_of_calculation());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_ArgumentVariant_SolverAnswer_StateLines::CopyFrom(const Packet_ArgumentVariant_SolverAnswer_StateLines& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ArgumentVariant_SolverAnswer_StateLines::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->stateline())) return false;
  return true;
}

void Packet_ArgumentVariant_SolverAnswer_StateLines::Swap(Packet_ArgumentVariant_SolverAnswer_StateLines* other) {
  if (other != this) {
    std::swap(result_of_calculation_, other->result_of_calculation_);
    std::swap(datetime_, other->datetime_);
    stateline_.Swap(&other->stateline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_ArgumentVariant_SolverAnswer_StateLines::GetTypeName() const {
  return "SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ArgumentVariant_SolverAnswer_ErrorMessage::kErrorTypeFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer_ErrorMessage::kMessageFieldNumber;
#endif  // !_MSC_VER

Packet_ArgumentVariant_SolverAnswer_ErrorMessage::Packet_ArgumentVariant_SolverAnswer_ErrorMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.ErrorMessage)
}

void Packet_ArgumentVariant_SolverAnswer_ErrorMessage::InitAsDefaultInstance() {
}

Packet_ArgumentVariant_SolverAnswer_ErrorMessage::Packet_ArgumentVariant_SolverAnswer_ErrorMessage(const Packet_ArgumentVariant_SolverAnswer_ErrorMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.ErrorMessage)
}

void Packet_ArgumentVariant_SolverAnswer_ErrorMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errortype_ = 1;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ArgumentVariant_SolverAnswer_ErrorMessage::~Packet_ArgumentVariant_SolverAnswer_ErrorMessage() {
  // @@protoc_insertion_point(destructor:SolverClient.Packet.ArgumentVariant.SolverAnswer.ErrorMessage)
  SharedDtor();
}

void Packet_ArgumentVariant_SolverAnswer_ErrorMessage::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Packet_ArgumentVariant_SolverAnswer_ErrorMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_ArgumentVariant_SolverAnswer_ErrorMessage& Packet_ArgumentVariant_SolverAnswer_ErrorMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SolverPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SolverPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_ArgumentVariant_SolverAnswer_ErrorMessage* Packet_ArgumentVariant_SolverAnswer_ErrorMessage::default_instance_ = NULL;

Packet_ArgumentVariant_SolverAnswer_ErrorMessage* Packet_ArgumentVariant_SolverAnswer_ErrorMessage::New() const {
  return new Packet_ArgumentVariant_SolverAnswer_ErrorMessage;
}

void Packet_ArgumentVariant_SolverAnswer_ErrorMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errortype_ = 1;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_ArgumentVariant_SolverAnswer_ErrorMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:SolverClient.Packet.ArgumentVariant.SolverAnswer.ErrorMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SolverClient.SolverError errorType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SolverClient::SolverError_IsValid(value)) {
            set_errortype(static_cast< ::SolverClient::SolverError >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // required string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SolverClient.Packet.ArgumentVariant.SolverAnswer.ErrorMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SolverClient.Packet.ArgumentVariant.SolverAnswer.ErrorMessage)
  return false;
#undef DO_
}

void Packet_ArgumentVariant_SolverAnswer_ErrorMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SolverClient.Packet.ArgumentVariant.SolverAnswer.ErrorMessage)
  // required .SolverClient.SolverError errorType = 1;
  if (has_errortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errortype(), output);
  }

  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:SolverClient.Packet.ArgumentVariant.SolverAnswer.ErrorMessage)
}

int Packet_ArgumentVariant_SolverAnswer_ErrorMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SolverClient.SolverError errorType = 1;
    if (has_errortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errortype());
    }

    // required string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ArgumentVariant_SolverAnswer_ErrorMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_ArgumentVariant_SolverAnswer_ErrorMessage*>(&from));
}

void Packet_ArgumentVariant_SolverAnswer_ErrorMessage::MergeFrom(const Packet_ArgumentVariant_SolverAnswer_ErrorMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errortype()) {
      set_errortype(from.errortype());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_ArgumentVariant_SolverAnswer_ErrorMessage::CopyFrom(const Packet_ArgumentVariant_SolverAnswer_ErrorMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ArgumentVariant_SolverAnswer_ErrorMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Packet_ArgumentVariant_SolverAnswer_ErrorMessage::Swap(Packet_ArgumentVariant_SolverAnswer_ErrorMessage* other) {
  if (other != this) {
    std::swap(errortype_, other->errortype_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_ArgumentVariant_SolverAnswer_ErrorMessage::GetTypeName() const {
  return "SolverClient.Packet.ArgumentVariant.SolverAnswer.ErrorMessage";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ArgumentVariant_SolverAnswer::kTargetIDFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer::kAutoTrajectoryFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer::kManualTrajectoryFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer::kSingleMarksFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer::kStateLinesFieldNumber;
const int Packet_ArgumentVariant_SolverAnswer::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

Packet_ArgumentVariant_SolverAnswer::Packet_ArgumentVariant_SolverAnswer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SolverClient.Packet.ArgumentVariant.SolverAnswer)
}

void Packet_ArgumentVariant_SolverAnswer::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  auto_trajectory_ = const_cast< ::SolverClient::Packet_ArgumentVariant_SolverAnswer_Trajectory*>(
      ::SolverClient::Packet_ArgumentVariant_SolverAnswer_Trajectory::internal_default_instance());
#else
  auto_trajectory_ = const_cast< ::SolverClient::Packet_ArgumentVariant_SolverAnswer_Trajectory*>(&::SolverClient::Packet_ArgumentVariant_SolverAnswer_Trajectory::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  manual_trajectory_ = const_cast< ::SolverClient::Packet_ArgumentVariant_SolverAnswer_Trajectory*>(
      ::SolverClient::Packet_ArgumentVariant_SolverAnswer_Trajectory::internal_default_instance());
#else
  manual_trajectory_ = const_cast< ::SolverClient::Packet_ArgumentVariant_SolverAnswer_Trajectory*>(&::SolverClient::Packet_ArgumentVariant_SolverAnswer_Trajectory::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  singlemarks_ = const_cast< ::SolverClient::Packet_ArgumentVariant_SolverAnswer_SingleMarks*>(
      ::SolverClient::Packet_ArgumentVariant_SolverAnswer_SingleMarks::internal_default_instance());
#else
  singlemarks_ = const_cast< ::SolverClient::Packet_ArgumentVariant_SolverAnswer_SingleMarks*>(&::SolverClient::Packet_ArgumentVariant_SolverAnswer_SingleMarks::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  statelines_ = const_cast< ::SolverClient::Packet_ArgumentVariant_SolverAnswer_StateLines*>(
      ::SolverClient::Packet_ArgumentVariant_SolverAnswer_StateLines::internal_default_instance());
#else
  statelines_ = const_cast< ::SolverClient::Packet_ArgumentVariant_SolverAnswer_StateLines*>(&::SolverClient::Packet_ArgumentVariant_SolverAnswer_StateLines::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  errormessage_ = const_cast< ::SolverClient::Packet_ArgumentVariant_SolverAnswer_ErrorMessage*>(
      ::SolverClient::Packet_ArgumentVariant_SolverAnswer_ErrorMessage::internal_default_instance());
#else
  errormessage_ = const_cast< ::SolverClient::Packet_ArgumentVariant_SolverAnswer_ErrorMessage*>(&::SolverClient::Packet_ArgumentVariant_SolverAnswer_ErrorMessage::default_instance());
#endif
}

Packet_ArgumentVariant_SolverAnswer::Packet_ArgumentVariant_SolverAnswer(const Packet_ArgumentVariant_SolverAnswer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SolverClient.Packet.ArgumentVariant.SolverAnswer)
}

void Packet_ArgumentVariant_SolverAnswer::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = 0u;
  auto_trajectory_ = NULL;
  manual_trajectory_ = NULL;
  singlemarks_ = NULL;
  statelines_ = NULL;
  errormessage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ArgumentVariant_SolverAnswer::~Packet_ArgumentVariant_SolverAnswer() {
  // @@protoc_insertion_point(destructor:SolverClient.Packet.ArgumentVariant.SolverAnswer)
  SharedDtor();
}

void Packet_ArgumentVariant_SolverAnswer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete auto_trajectory_;
    delete manual_trajectory_;
    delete singlemarks_;
    delete statelines_;
    delete errormessage_;
  }
}

void Packet_ArgumentVariant_SolverAnswer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_ArgumentVariant_SolverAnswer& Packet_ArgumentVariant_SolverAnswer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SolverPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SolverPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_ArgumentVariant_SolverAnswer* Packet_ArgumentVariant_SolverAnswer::default_instance_ = NULL;

Packet_ArgumentVariant_SolverAnswer* Packet_ArgumentVariant_SolverAnswer::New() const {
  return new Packet_ArgumentVariant_SolverAnswer;
}

void Packet_ArgumentVariant_SolverAnswer::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    targetid_ = 0u;
    if (has_auto_trajectory()) {
      if (auto_trajectory_ != NULL) auto_trajectory_->::SolverClient::Packet_ArgumentVariant_SolverAnswer_Trajectory::Clear();
    }
    if (has_manual_trajectory()) {
      if (manual_trajectory_ != NULL) manual_trajectory_->::SolverClient::Packet_ArgumentVariant_SolverAnswer_Trajectory::Clear();
    }
    if (has_singlemarks()) {
      if (singlemarks_ != NULL) singlemarks_->::SolverClient::Packet_ArgumentVariant_SolverAnswer_SingleMarks::Clear();
    }
    if (has_statelines()) {
      if (statelines_ != NULL) statelines_->::SolverClient::Packet_ArgumentVariant_SolverAnswer_StateLines::Clear();
    }
    if (has_errormessage()) {
      if (errormessage_ != NULL) errormessage_->::SolverClient::Packet_ArgumentVariant_SolverAnswer_ErrorMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_ArgumentVariant_SolverAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:SolverClient.Packet.ArgumentVariant.SolverAnswer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 TargetID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_auto_trajectory;
        break;
      }

      // optional .SolverClient.Packet.ArgumentVariant.SolverAnswer.Trajectory auto_trajectory = 2;
      case 2: {
        if (tag == 18) {
         parse_auto_trajectory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auto_trajectory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_manual_trajectory;
        break;
      }

      // optional .SolverClient.Packet.ArgumentVariant.SolverAnswer.Trajectory manual_trajectory = 3;
      case 3: {
        if (tag == 26) {
         parse_manual_trajectory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manual_trajectory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_singleMarks;
        break;
      }

      // optional .SolverClient.Packet.ArgumentVariant.SolverAnswer.SingleMarks singleMarks = 4;
      case 4: {
        if (tag == 34) {
         parse_singleMarks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_singlemarks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_stateLines;
        break;
      }

      // optional .SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines stateLines = 5;
      case 5: {
        if (tag == 42) {
         parse_stateLines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statelines()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_errorMessage;
        break;
      }

      // optional .SolverClient.Packet.ArgumentVariant.SolverAnswer.ErrorMessage errorMessage = 6;
      case 6: {
        if (tag == 50) {
         parse_errorMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errormessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SolverClient.Packet.ArgumentVariant.SolverAnswer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SolverClient.Packet.ArgumentVariant.SolverAnswer)
  return false;
#undef DO_
}

void Packet_ArgumentVariant_SolverAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SolverClient.Packet.ArgumentVariant.SolverAnswer)
  // required uint32 TargetID = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetid(), output);
  }

  // optional .SolverClient.Packet.ArgumentVariant.SolverAnswer.Trajectory auto_trajectory = 2;
  if (has_auto_trajectory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->auto_trajectory(), output);
  }

  // optional .SolverClient.Packet.ArgumentVariant.SolverAnswer.Trajectory manual_trajectory = 3;
  if (has_manual_trajectory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->manual_trajectory(), output);
  }

  // optional .SolverClient.Packet.ArgumentVariant.SolverAnswer.SingleMarks singleMarks = 4;
  if (has_singlemarks()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->singlemarks(), output);
  }

  // optional .SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines stateLines = 5;
  if (has_statelines()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->statelines(), output);
  }

  // optional .SolverClient.Packet.ArgumentVariant.SolverAnswer.ErrorMessage errorMessage = 6;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->errormessage(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:SolverClient.Packet.ArgumentVariant.SolverAnswer)
}

int Packet_ArgumentVariant_SolverAnswer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 TargetID = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }

    // optional .SolverClient.Packet.ArgumentVariant.SolverAnswer.Trajectory auto_trajectory = 2;
    if (has_auto_trajectory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->auto_trajectory());
    }

    // optional .SolverClient.Packet.ArgumentVariant.SolverAnswer.Trajectory manual_trajectory = 3;
    if (has_manual_trajectory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->manual_trajectory());
    }

    // optional .SolverClient.Packet.ArgumentVariant.SolverAnswer.SingleMarks singleMarks = 4;
    if (has_singlemarks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->singlemarks());
    }

    // optional .SolverClient.Packet.ArgumentVariant.SolverAnswer.StateLines stateLines = 5;
    if (has_statelines()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statelines());
    }

    // optional .SolverClient.Packet.ArgumentVariant.SolverAnswer.ErrorMessage errorMessage = 6;
    if (has_errormessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->errormessage());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ArgumentVariant_SolverAnswer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_ArgumentVariant_SolverAnswer*>(&from));
}

void Packet_ArgumentVariant_SolverAnswer::MergeFrom(const Packet_ArgumentVariant_SolverAnswer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_auto_trajectory()) {
      mutable_auto_trajectory()->::SolverClient::Packet_ArgumentVariant_SolverAnswer_Trajectory::MergeFrom(from.auto_trajectory());
    }
    if (from.has_manual_trajectory()) {
      mutable_manual_trajectory()->::SolverClient::Packet_ArgumentVariant_SolverAnswer_Trajectory::MergeFrom(from.manual_trajectory());
    }
    if (from.has_singlemarks()) {
      mutable_singlemarks()->::SolverClient::Packet_ArgumentVariant_SolverAnswer_SingleMarks::MergeFrom(from.singlemarks());
    }
    if (from.has_statelines()) {
      mutable_statelines()->::SolverClient::Packet_ArgumentVariant_SolverAnswer_StateLines::MergeFrom(from.statelines());
    }
    if (from.has_errormessage()) {
      mutable_errormessage()->::SolverClient::Packet_ArgumentVariant_SolverAnswer_ErrorMessage::MergeFrom(from.errormessage());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_ArgumentVariant_SolverAnswer::CopyFrom(const Packet_ArgumentVariant_SolverAnswer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ArgumentVariant_SolverAnswer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_auto_trajectory()) {
    if (!this->auto_trajectory().IsInitialized()) return false;
  }
  if (has_manual_trajectory()) {
    if (!this->manual_trajectory().IsInitialized()) return false;
  }
  if (has_singlemarks()) {
    if (!this->singlemarks().IsInitialized()) return false;
  }
  if (has_statelines()) {
    if (!this->statelines().IsInitialized()) return false;
  }
  if (has_errormessage()) {
    if (!this->errormessage().IsInitialized()) return false;
  }
  return true;
}

void Packet_ArgumentVariant_SolverAnswer::Swap(Packet_ArgumentVariant_SolverAnswer* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(auto_trajectory_, other->auto_trajectory_);
    std::swap(manual_trajectory_, other->manual_trajectory_);
    std::swap(singlemarks_, other->singlemarks_);
    std::swap(statelines_, other->statelines_);
    std::swap(errormessage_, other->errormessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_ArgumentVariant_SolverAnswer::GetTypeName() const {
  return "SolverClient.Packet.ArgumentVariant.SolverAnswer";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ArgumentVariant::kBplaPoisitionFieldNumber;
const int Packet_ArgumentVariant::kSolverInputFieldNumber;
const int Packet_ArgumentVariant::kSolverAnswerFieldNumber;
#endif  // !_MSC_VER

Packet_ArgumentVariant::Packet_ArgumentVariant()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SolverClient.Packet.ArgumentVariant)
}

void Packet_ArgumentVariant::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bplapoisition_ = const_cast< ::SolverClient::Packet_ArgumentVariant_BplaPosition*>(
      ::SolverClient::Packet_ArgumentVariant_BplaPosition::internal_default_instance());
#else
  bplapoisition_ = const_cast< ::SolverClient::Packet_ArgumentVariant_BplaPosition*>(&::SolverClient::Packet_ArgumentVariant_BplaPosition::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  solverinput_ = const_cast< ::SolverClient::Packet_ArgumentVariant_SolverInput*>(
      ::SolverClient::Packet_ArgumentVariant_SolverInput::internal_default_instance());
#else
  solverinput_ = const_cast< ::SolverClient::Packet_ArgumentVariant_SolverInput*>(&::SolverClient::Packet_ArgumentVariant_SolverInput::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  solveranswer_ = const_cast< ::SolverClient::Packet_ArgumentVariant_SolverAnswer*>(
      ::SolverClient::Packet_ArgumentVariant_SolverAnswer::internal_default_instance());
#else
  solveranswer_ = const_cast< ::SolverClient::Packet_ArgumentVariant_SolverAnswer*>(&::SolverClient::Packet_ArgumentVariant_SolverAnswer::default_instance());
#endif
}

Packet_ArgumentVariant::Packet_ArgumentVariant(const Packet_ArgumentVariant& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SolverClient.Packet.ArgumentVariant)
}

void Packet_ArgumentVariant::SharedCtor() {
  _cached_size_ = 0;
  bplapoisition_ = NULL;
  solverinput_ = NULL;
  solveranswer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ArgumentVariant::~Packet_ArgumentVariant() {
  // @@protoc_insertion_point(destructor:SolverClient.Packet.ArgumentVariant)
  SharedDtor();
}

void Packet_ArgumentVariant::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete bplapoisition_;
    delete solverinput_;
    delete solveranswer_;
  }
}

void Packet_ArgumentVariant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_ArgumentVariant& Packet_ArgumentVariant::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SolverPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SolverPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_ArgumentVariant* Packet_ArgumentVariant::default_instance_ = NULL;

Packet_ArgumentVariant* Packet_ArgumentVariant::New() const {
  return new Packet_ArgumentVariant;
}

void Packet_ArgumentVariant::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_bplapoisition()) {
      if (bplapoisition_ != NULL) bplapoisition_->::SolverClient::Packet_ArgumentVariant_BplaPosition::Clear();
    }
    if (has_solverinput()) {
      if (solverinput_ != NULL) solverinput_->::SolverClient::Packet_ArgumentVariant_SolverInput::Clear();
    }
    if (has_solveranswer()) {
      if (solveranswer_ != NULL) solveranswer_->::SolverClient::Packet_ArgumentVariant_SolverAnswer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_ArgumentVariant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:SolverClient.Packet.ArgumentVariant)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SolverClient.Packet.ArgumentVariant.BplaPosition bplaPoisition = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bplapoisition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_solverInput;
        break;
      }

      // optional .SolverClient.Packet.ArgumentVariant.SolverInput solverInput = 2;
      case 2: {
        if (tag == 18) {
         parse_solverInput:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_solverinput()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_solverAnswer;
        break;
      }

      // optional .SolverClient.Packet.ArgumentVariant.SolverAnswer solverAnswer = 3;
      case 3: {
        if (tag == 26) {
         parse_solverAnswer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_solveranswer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SolverClient.Packet.ArgumentVariant)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SolverClient.Packet.ArgumentVariant)
  return false;
#undef DO_
}

void Packet_ArgumentVariant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SolverClient.Packet.ArgumentVariant)
  // optional .SolverClient.Packet.ArgumentVariant.BplaPosition bplaPoisition = 1;
  if (has_bplapoisition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->bplapoisition(), output);
  }

  // optional .SolverClient.Packet.ArgumentVariant.SolverInput solverInput = 2;
  if (has_solverinput()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->solverinput(), output);
  }

  // optional .SolverClient.Packet.ArgumentVariant.SolverAnswer solverAnswer = 3;
  if (has_solveranswer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->solveranswer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:SolverClient.Packet.ArgumentVariant)
}

int Packet_ArgumentVariant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SolverClient.Packet.ArgumentVariant.BplaPosition bplaPoisition = 1;
    if (has_bplapoisition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bplapoisition());
    }

    // optional .SolverClient.Packet.ArgumentVariant.SolverInput solverInput = 2;
    if (has_solverinput()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->solverinput());
    }

    // optional .SolverClient.Packet.ArgumentVariant.SolverAnswer solverAnswer = 3;
    if (has_solveranswer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->solveranswer());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ArgumentVariant::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_ArgumentVariant*>(&from));
}

void Packet_ArgumentVariant::MergeFrom(const Packet_ArgumentVariant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bplapoisition()) {
      mutable_bplapoisition()->::SolverClient::Packet_ArgumentVariant_BplaPosition::MergeFrom(from.bplapoisition());
    }
    if (from.has_solverinput()) {
      mutable_solverinput()->::SolverClient::Packet_ArgumentVariant_SolverInput::MergeFrom(from.solverinput());
    }
    if (from.has_solveranswer()) {
      mutable_solveranswer()->::SolverClient::Packet_ArgumentVariant_SolverAnswer::MergeFrom(from.solveranswer());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_ArgumentVariant::CopyFrom(const Packet_ArgumentVariant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ArgumentVariant::IsInitialized() const {

  if (has_bplapoisition()) {
    if (!this->bplapoisition().IsInitialized()) return false;
  }
  if (has_solverinput()) {
    if (!this->solverinput().IsInitialized()) return false;
  }
  if (has_solveranswer()) {
    if (!this->solveranswer().IsInitialized()) return false;
  }
  return true;
}

void Packet_ArgumentVariant::Swap(Packet_ArgumentVariant* other) {
  if (other != this) {
    std::swap(bplapoisition_, other->bplapoisition_);
    std::swap(solverinput_, other->solverinput_);
    std::swap(solveranswer_, other->solveranswer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_ArgumentVariant::GetTypeName() const {
  return "SolverClient.Packet.ArgumentVariant";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Command::kActionFieldNumber;
const int Packet_Command::kArgumentsFieldNumber;
#endif  // !_MSC_VER

Packet_Command::Packet_Command()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SolverClient.Packet.Command)
}

void Packet_Command::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  arguments_ = const_cast< ::SolverClient::Packet_ArgumentVariant*>(
      ::SolverClient::Packet_ArgumentVariant::internal_default_instance());
#else
  arguments_ = const_cast< ::SolverClient::Packet_ArgumentVariant*>(&::SolverClient::Packet_ArgumentVariant::default_instance());
#endif
}

Packet_Command::Packet_Command(const Packet_Command& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SolverClient.Packet.Command)
}

void Packet_Command::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  arguments_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Command::~Packet_Command() {
  // @@protoc_insertion_point(destructor:SolverClient.Packet.Command)
  SharedDtor();
}

void Packet_Command::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete arguments_;
  }
}

void Packet_Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_Command& Packet_Command::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SolverPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SolverPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_Command* Packet_Command::default_instance_ = NULL;

Packet_Command* Packet_Command::New() const {
  return new Packet_Command;
}

void Packet_Command::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    action_ = 0;
    if (has_arguments()) {
      if (arguments_ != NULL) arguments_->::SolverClient::Packet_ArgumentVariant::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:SolverClient.Packet.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SolverClient.Actions action = 1 [default = unknownAction];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SolverClient::Actions_IsValid(value)) {
            set_action(static_cast< ::SolverClient::Actions >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_arguments;
        break;
      }

      // optional .SolverClient.Packet.ArgumentVariant arguments = 2;
      case 2: {
        if (tag == 18) {
         parse_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arguments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SolverClient.Packet.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SolverClient.Packet.Command)
  return false;
#undef DO_
}

void Packet_Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SolverClient.Packet.Command)
  // required .SolverClient.Actions action = 1 [default = unknownAction];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional .SolverClient.Packet.ArgumentVariant arguments = 2;
  if (has_arguments()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->arguments(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:SolverClient.Packet.Command)
}

int Packet_Command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SolverClient.Actions action = 1 [default = unknownAction];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional .SolverClient.Packet.ArgumentVariant arguments = 2;
    if (has_arguments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arguments());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Command::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_Command*>(&from));
}

void Packet_Command::MergeFrom(const Packet_Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_arguments()) {
      mutable_arguments()->::SolverClient::Packet_ArgumentVariant::MergeFrom(from.arguments());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_Command::CopyFrom(const Packet_Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_arguments()) {
    if (!this->arguments().IsInitialized()) return false;
  }
  return true;
}

void Packet_Command::Swap(Packet_Command* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(arguments_, other->arguments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_Command::GetTypeName() const {
  return "SolverClient.Packet.Command";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet::kCommandFieldNumber;
#endif  // !_MSC_VER

Packet::Packet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SolverClient.Packet)
}

void Packet::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  command_ = const_cast< ::SolverClient::Packet_Command*>(
      ::SolverClient::Packet_Command::internal_default_instance());
#else
  command_ = const_cast< ::SolverClient::Packet_Command*>(&::SolverClient::Packet_Command::default_instance());
#endif
}

Packet::Packet(const Packet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SolverClient.Packet)
}

void Packet::SharedCtor() {
  _cached_size_ = 0;
  command_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:SolverClient.Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete command_;
  }
}

void Packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet& Packet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SolverPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SolverPacket_2eproto();
#endif
  return *default_instance_;
}

Packet* Packet::default_instance_ = NULL;

Packet* Packet::New() const {
  return new Packet;
}

void Packet::Clear() {
  if (has_command()) {
    if (command_ != NULL) command_->::SolverClient::Packet_Command::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:SolverClient.Packet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SolverClient.Packet.Command command = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SolverClient.Packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SolverClient.Packet)
  return false;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SolverClient.Packet)
  // required .SolverClient.Packet.Command command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->command(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:SolverClient.Packet)
}

int Packet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SolverClient.Packet.Command command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet*>(&from));
}

void Packet::MergeFrom(const Packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      mutable_command()->::SolverClient::Packet_Command::MergeFrom(from.command());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet::CopyFrom(const Packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_command()) {
    if (!this->command().IsInitialized()) return false;
  }
  return true;
}

void Packet::Swap(Packet* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet::GetTypeName() const {
  return "SolverClient.Packet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SolverClient

// @@protoc_insertion_point(global_scope)
