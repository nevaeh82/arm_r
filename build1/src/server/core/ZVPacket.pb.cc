// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZVPacket.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ZVPacket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace Zaviruha {

void protobuf_ShutdownFile_ZVPacket_2eproto() {
  delete Packet::default_instance_;
  delete Packet_ArgumentVariant::default_instance_;
  delete Packet_ArgumentVariant_Header::default_instance_;
  delete Packet_ArgumentVariant_AtlantDirection::default_instance_;
  delete Packet_ArgumentVariant_AtlantPosition::default_instance_;
  delete Packet_ArgumentVariant_BplaPoints::default_instance_;
  delete Packet_ArgumentVariant_BplaPoints_Point::default_instance_;
  delete Packet_ArgumentVariant_SolverData::default_instance_;
  delete Packet_Command::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ZVPacket_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ZVPacket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Packet::default_instance_ = new Packet();
  Packet_ArgumentVariant::default_instance_ = new Packet_ArgumentVariant();
  Packet_ArgumentVariant_Header::default_instance_ = new Packet_ArgumentVariant_Header();
  Packet_ArgumentVariant_AtlantDirection::default_instance_ = new Packet_ArgumentVariant_AtlantDirection();
  Packet_ArgumentVariant_AtlantPosition::default_instance_ = new Packet_ArgumentVariant_AtlantPosition();
  Packet_ArgumentVariant_BplaPoints::default_instance_ = new Packet_ArgumentVariant_BplaPoints();
  Packet_ArgumentVariant_BplaPoints_Point::default_instance_ = new Packet_ArgumentVariant_BplaPoints_Point();
  Packet_ArgumentVariant_SolverData::default_instance_ = new Packet_ArgumentVariant_SolverData();
  Packet_Command::default_instance_ = new Packet_Command();
  Packet::default_instance_->InitAsDefaultInstance();
  Packet_ArgumentVariant::default_instance_->InitAsDefaultInstance();
  Packet_ArgumentVariant_Header::default_instance_->InitAsDefaultInstance();
  Packet_ArgumentVariant_AtlantDirection::default_instance_->InitAsDefaultInstance();
  Packet_ArgumentVariant_AtlantPosition::default_instance_->InitAsDefaultInstance();
  Packet_ArgumentVariant_BplaPoints::default_instance_->InitAsDefaultInstance();
  Packet_ArgumentVariant_BplaPoints_Point::default_instance_->InitAsDefaultInstance();
  Packet_ArgumentVariant_SolverData::default_instance_->InitAsDefaultInstance();
  Packet_Command::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ZVPacket_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ZVPacket_2eproto_once_);
void protobuf_AddDesc_ZVPacket_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ZVPacket_2eproto_once_,
                 &protobuf_AddDesc_ZVPacket_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ZVPacket_2eproto {
  StaticDescriptorInitializer_ZVPacket_2eproto() {
    protobuf_AddDesc_ZVPacket_2eproto();
  }
} static_descriptor_initializer_ZVPacket_2eproto_;
#endif
bool Actions_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Packet_ArgumentVariant_Header::kRequestIdFieldNumber;
const int Packet_ArgumentVariant_Header::kSourceIdFieldNumber;
const int Packet_ArgumentVariant_Header::kDateTimeFieldNumber;
#endif  // !_MSC_VER

Packet_ArgumentVariant_Header::Packet_ArgumentVariant_Header()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Zaviruha.Packet.ArgumentVariant.Header)
}

void Packet_ArgumentVariant_Header::InitAsDefaultInstance() {
}

Packet_ArgumentVariant_Header::Packet_ArgumentVariant_Header(const Packet_ArgumentVariant_Header& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Zaviruha.Packet.ArgumentVariant.Header)
}

void Packet_ArgumentVariant_Header::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = 0;
  sourceid_ = 0;
  datetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ArgumentVariant_Header::~Packet_ArgumentVariant_Header() {
  // @@protoc_insertion_point(destructor:Zaviruha.Packet.ArgumentVariant.Header)
  SharedDtor();
}

void Packet_ArgumentVariant_Header::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Packet_ArgumentVariant_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_ArgumentVariant_Header& Packet_ArgumentVariant_Header::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ZVPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ZVPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_ArgumentVariant_Header* Packet_ArgumentVariant_Header::default_instance_ = NULL;

Packet_ArgumentVariant_Header* Packet_ArgumentVariant_Header::New() const {
  return new Packet_ArgumentVariant_Header;
}

void Packet_ArgumentVariant_Header::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Packet_ArgumentVariant_Header*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(requestid_, datetime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_ArgumentVariant_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Zaviruha.Packet.ArgumentVariant.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 requestId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sourceId;
        break;
      }

      // required int32 sourceId = 2;
      case 2: {
        if (tag == 16) {
         parse_sourceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dateTime;
        break;
      }

      // required uint64 dateTime = 3;
      case 3: {
        if (tag == 24) {
         parse_dateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Zaviruha.Packet.ArgumentVariant.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Zaviruha.Packet.ArgumentVariant.Header)
  return false;
#undef DO_
}

void Packet_ArgumentVariant_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Zaviruha.Packet.ArgumentVariant.Header)
  // required int32 requestId = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // required int32 sourceId = 2;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sourceid(), output);
  }

  // required uint64 dateTime = 3;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->datetime(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Zaviruha.Packet.ArgumentVariant.Header)
}

int Packet_ArgumentVariant_Header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 requestId = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // required int32 sourceId = 2;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourceid());
    }

    // required uint64 dateTime = 3;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->datetime());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ArgumentVariant_Header::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_ArgumentVariant_Header*>(&from));
}

void Packet_ArgumentVariant_Header::MergeFrom(const Packet_ArgumentVariant_Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_ArgumentVariant_Header::CopyFrom(const Packet_ArgumentVariant_Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ArgumentVariant_Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Packet_ArgumentVariant_Header::Swap(Packet_ArgumentVariant_Header* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(datetime_, other->datetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_ArgumentVariant_Header::GetTypeName() const {
  return "Zaviruha.Packet.ArgumentVariant.Header";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ArgumentVariant_AtlantDirection::kHeaderFieldNumber;
const int Packet_ArgumentVariant_AtlantDirection::kPostNameFieldNumber;
const int Packet_ArgumentVariant_AtlantDirection::kPostLatitudeFieldNumber;
const int Packet_ArgumentVariant_AtlantDirection::kPostLongitudeFieldNumber;
const int Packet_ArgumentVariant_AtlantDirection::kPostHeightFieldNumber;
const int Packet_ArgumentVariant_AtlantDirection::kFrequencyFieldNumber;
const int Packet_ArgumentVariant_AtlantDirection::kWidthFieldNumber;
const int Packet_ArgumentVariant_AtlantDirection::kDirectionFieldNumber;
const int Packet_ArgumentVariant_AtlantDirection::kAngleFieldNumber;
const int Packet_ArgumentVariant_AtlantDirection::kLevelFieldNumber;
const int Packet_ArgumentVariant_AtlantDirection::kQualityFieldNumber;
const int Packet_ArgumentVariant_AtlantDirection::kMotionTypeFieldNumber;
const int Packet_ArgumentVariant_AtlantDirection::kMotionConfidenceFieldNumber;
#endif  // !_MSC_VER

Packet_ArgumentVariant_AtlantDirection::Packet_ArgumentVariant_AtlantDirection()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Zaviruha.Packet.ArgumentVariant.AtlantDirection)
}

void Packet_ArgumentVariant_AtlantDirection::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  header_ = const_cast< ::Zaviruha::Packet_ArgumentVariant_Header*>(
      ::Zaviruha::Packet_ArgumentVariant_Header::internal_default_instance());
#else
  header_ = const_cast< ::Zaviruha::Packet_ArgumentVariant_Header*>(&::Zaviruha::Packet_ArgumentVariant_Header::default_instance());
#endif
}

Packet_ArgumentVariant_AtlantDirection::Packet_ArgumentVariant_AtlantDirection(const Packet_ArgumentVariant_AtlantDirection& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Zaviruha.Packet.ArgumentVariant.AtlantDirection)
}

void Packet_ArgumentVariant_AtlantDirection::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  postname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postlatitude_ = 0;
  postlongitude_ = 0;
  postheight_ = 0;
  frequency_ = 0;
  width_ = 0;
  direction_ = 0;
  angle_ = 0;
  level_ = 0;
  quality_ = 0;
  motiontype_ = 0;
  motionconfidence_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ArgumentVariant_AtlantDirection::~Packet_ArgumentVariant_AtlantDirection() {
  // @@protoc_insertion_point(destructor:Zaviruha.Packet.ArgumentVariant.AtlantDirection)
  SharedDtor();
}

void Packet_ArgumentVariant_AtlantDirection::SharedDtor() {
  if (postname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete postname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete header_;
  }
}

void Packet_ArgumentVariant_AtlantDirection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_ArgumentVariant_AtlantDirection& Packet_ArgumentVariant_AtlantDirection::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ZVPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ZVPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_ArgumentVariant_AtlantDirection* Packet_ArgumentVariant_AtlantDirection::default_instance_ = NULL;

Packet_ArgumentVariant_AtlantDirection* Packet_ArgumentVariant_AtlantDirection::New() const {
  return new Packet_ArgumentVariant_AtlantDirection;
}

void Packet_ArgumentVariant_AtlantDirection::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Packet_ArgumentVariant_AtlantDirection*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(postlatitude_, direction_);
    if (has_header()) {
      if (header_ != NULL) header_->::Zaviruha::Packet_ArgumentVariant_Header::Clear();
    }
    if (has_postname()) {
      if (postname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        postname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(angle_, motiontype_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_ArgumentVariant_AtlantDirection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Zaviruha.Packet.ArgumentVariant.AtlantDirection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Zaviruha.Packet.ArgumentVariant.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_postName;
        break;
      }

      // required string postName = 2;
      case 2: {
        if (tag == 18) {
         parse_postName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_postLatitude;
        break;
      }

      // required double postLatitude = 3;
      case 3: {
        if (tag == 25) {
         parse_postLatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &postlatitude_)));
          set_has_postlatitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_postLongitude;
        break;
      }

      // required double postLongitude = 4;
      case 4: {
        if (tag == 33) {
         parse_postLongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &postlongitude_)));
          set_has_postlongitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_postHeight;
        break;
      }

      // required double postHeight = 5;
      case 5: {
        if (tag == 41) {
         parse_postHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &postheight_)));
          set_has_postheight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_frequency;
        break;
      }

      // required double frequency = 6;
      case 6: {
        if (tag == 49) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_width;
        break;
      }

      // required double width = 7;
      case 7: {
        if (tag == 57) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_direction;
        break;
      }

      // required double direction = 8;
      case 8: {
        if (tag == 65) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_angle;
        break;
      }

      // required double angle = 9;
      case 9: {
        if (tag == 73) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_level;
        break;
      }

      // required double level = 10;
      case 10: {
        if (tag == 81) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_quality;
        break;
      }

      // required double quality = 11;
      case 11: {
        if (tag == 89) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_motionType;
        break;
      }

      // required int32 motionType = 12;
      case 12: {
        if (tag == 96) {
         parse_motionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &motiontype_)));
          set_has_motiontype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_motionConfidence;
        break;
      }

      // required double motionConfidence = 13;
      case 13: {
        if (tag == 105) {
         parse_motionConfidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &motionconfidence_)));
          set_has_motionconfidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Zaviruha.Packet.ArgumentVariant.AtlantDirection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Zaviruha.Packet.ArgumentVariant.AtlantDirection)
  return false;
#undef DO_
}

void Packet_ArgumentVariant_AtlantDirection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Zaviruha.Packet.ArgumentVariant.AtlantDirection)
  // required .Zaviruha.Packet.ArgumentVariant.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->header(), output);
  }

  // required string postName = 2;
  if (has_postname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->postname(), output);
  }

  // required double postLatitude = 3;
  if (has_postlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->postlatitude(), output);
  }

  // required double postLongitude = 4;
  if (has_postlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->postlongitude(), output);
  }

  // required double postHeight = 5;
  if (has_postheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->postheight(), output);
  }

  // required double frequency = 6;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->frequency(), output);
  }

  // required double width = 7;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->width(), output);
  }

  // required double direction = 8;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->direction(), output);
  }

  // required double angle = 9;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->angle(), output);
  }

  // required double level = 10;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->level(), output);
  }

  // required double quality = 11;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->quality(), output);
  }

  // required int32 motionType = 12;
  if (has_motiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->motiontype(), output);
  }

  // required double motionConfidence = 13;
  if (has_motionconfidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->motionconfidence(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Zaviruha.Packet.ArgumentVariant.AtlantDirection)
}

int Packet_ArgumentVariant_AtlantDirection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Zaviruha.Packet.ArgumentVariant.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required string postName = 2;
    if (has_postname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postname());
    }

    // required double postLatitude = 3;
    if (has_postlatitude()) {
      total_size += 1 + 8;
    }

    // required double postLongitude = 4;
    if (has_postlongitude()) {
      total_size += 1 + 8;
    }

    // required double postHeight = 5;
    if (has_postheight()) {
      total_size += 1 + 8;
    }

    // required double frequency = 6;
    if (has_frequency()) {
      total_size += 1 + 8;
    }

    // required double width = 7;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // required double direction = 8;
    if (has_direction()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double angle = 9;
    if (has_angle()) {
      total_size += 1 + 8;
    }

    // required double level = 10;
    if (has_level()) {
      total_size += 1 + 8;
    }

    // required double quality = 11;
    if (has_quality()) {
      total_size += 1 + 8;
    }

    // required int32 motionType = 12;
    if (has_motiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->motiontype());
    }

    // required double motionConfidence = 13;
    if (has_motionconfidence()) {
      total_size += 1 + 8;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ArgumentVariant_AtlantDirection::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_ArgumentVariant_AtlantDirection*>(&from));
}

void Packet_ArgumentVariant_AtlantDirection::MergeFrom(const Packet_ArgumentVariant_AtlantDirection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::Zaviruha::Packet_ArgumentVariant_Header::MergeFrom(from.header());
    }
    if (from.has_postname()) {
      set_postname(from.postname());
    }
    if (from.has_postlatitude()) {
      set_postlatitude(from.postlatitude());
    }
    if (from.has_postlongitude()) {
      set_postlongitude(from.postlongitude());
    }
    if (from.has_postheight()) {
      set_postheight(from.postheight());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_motiontype()) {
      set_motiontype(from.motiontype());
    }
    if (from.has_motionconfidence()) {
      set_motionconfidence(from.motionconfidence());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_ArgumentVariant_AtlantDirection::CopyFrom(const Packet_ArgumentVariant_AtlantDirection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ArgumentVariant_AtlantDirection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void Packet_ArgumentVariant_AtlantDirection::Swap(Packet_ArgumentVariant_AtlantDirection* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(postname_, other->postname_);
    std::swap(postlatitude_, other->postlatitude_);
    std::swap(postlongitude_, other->postlongitude_);
    std::swap(postheight_, other->postheight_);
    std::swap(frequency_, other->frequency_);
    std::swap(width_, other->width_);
    std::swap(direction_, other->direction_);
    std::swap(angle_, other->angle_);
    std::swap(level_, other->level_);
    std::swap(quality_, other->quality_);
    std::swap(motiontype_, other->motiontype_);
    std::swap(motionconfidence_, other->motionconfidence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_ArgumentVariant_AtlantDirection::GetTypeName() const {
  return "Zaviruha.Packet.ArgumentVariant.AtlantDirection";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ArgumentVariant_AtlantPosition::kHeaderFieldNumber;
const int Packet_ArgumentVariant_AtlantPosition::kLongitudeFieldNumber;
const int Packet_ArgumentVariant_AtlantPosition::kLatitudeFieldNumber;
const int Packet_ArgumentVariant_AtlantPosition::kQualityFieldNumber;
#endif  // !_MSC_VER

Packet_ArgumentVariant_AtlantPosition::Packet_ArgumentVariant_AtlantPosition()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Zaviruha.Packet.ArgumentVariant.AtlantPosition)
}

void Packet_ArgumentVariant_AtlantPosition::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  header_ = const_cast< ::Zaviruha::Packet_ArgumentVariant_Header*>(
      ::Zaviruha::Packet_ArgumentVariant_Header::internal_default_instance());
#else
  header_ = const_cast< ::Zaviruha::Packet_ArgumentVariant_Header*>(&::Zaviruha::Packet_ArgumentVariant_Header::default_instance());
#endif
}

Packet_ArgumentVariant_AtlantPosition::Packet_ArgumentVariant_AtlantPosition(const Packet_ArgumentVariant_AtlantPosition& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Zaviruha.Packet.ArgumentVariant.AtlantPosition)
}

void Packet_ArgumentVariant_AtlantPosition::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  longitude_ = 0;
  latitude_ = 0;
  quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ArgumentVariant_AtlantPosition::~Packet_ArgumentVariant_AtlantPosition() {
  // @@protoc_insertion_point(destructor:Zaviruha.Packet.ArgumentVariant.AtlantPosition)
  SharedDtor();
}

void Packet_ArgumentVariant_AtlantPosition::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete header_;
  }
}

void Packet_ArgumentVariant_AtlantPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_ArgumentVariant_AtlantPosition& Packet_ArgumentVariant_AtlantPosition::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ZVPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ZVPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_ArgumentVariant_AtlantPosition* Packet_ArgumentVariant_AtlantPosition::default_instance_ = NULL;

Packet_ArgumentVariant_AtlantPosition* Packet_ArgumentVariant_AtlantPosition::New() const {
  return new Packet_ArgumentVariant_AtlantPosition;
}

void Packet_ArgumentVariant_AtlantPosition::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Packet_ArgumentVariant_AtlantPosition*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(longitude_, quality_);
    if (has_header()) {
      if (header_ != NULL) header_->::Zaviruha::Packet_ArgumentVariant_Header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_ArgumentVariant_AtlantPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Zaviruha.Packet.ArgumentVariant.AtlantPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Zaviruha.Packet.ArgumentVariant.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_longitude;
        break;
      }

      // required double longitude = 2;
      case 2: {
        if (tag == 17) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_latitude;
        break;
      }

      // required double latitude = 3;
      case 3: {
        if (tag == 25) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_quality;
        break;
      }

      // required double quality = 4;
      case 4: {
        if (tag == 33) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Zaviruha.Packet.ArgumentVariant.AtlantPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Zaviruha.Packet.ArgumentVariant.AtlantPosition)
  return false;
#undef DO_
}

void Packet_ArgumentVariant_AtlantPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Zaviruha.Packet.ArgumentVariant.AtlantPosition)
  // required .Zaviruha.Packet.ArgumentVariant.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->header(), output);
  }

  // required double longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // required double latitude = 3;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  // required double quality = 4;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->quality(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Zaviruha.Packet.ArgumentVariant.AtlantPosition)
}

int Packet_ArgumentVariant_AtlantPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Zaviruha.Packet.ArgumentVariant.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required double longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // required double latitude = 3;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // required double quality = 4;
    if (has_quality()) {
      total_size += 1 + 8;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ArgumentVariant_AtlantPosition::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_ArgumentVariant_AtlantPosition*>(&from));
}

void Packet_ArgumentVariant_AtlantPosition::MergeFrom(const Packet_ArgumentVariant_AtlantPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::Zaviruha::Packet_ArgumentVariant_Header::MergeFrom(from.header());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_ArgumentVariant_AtlantPosition::CopyFrom(const Packet_ArgumentVariant_AtlantPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ArgumentVariant_AtlantPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void Packet_ArgumentVariant_AtlantPosition::Swap(Packet_ArgumentVariant_AtlantPosition* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_ArgumentVariant_AtlantPosition::GetTypeName() const {
  return "Zaviruha.Packet.ArgumentVariant.AtlantPosition";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ArgumentVariant_BplaPoints_Point::kXFieldNumber;
const int Packet_ArgumentVariant_BplaPoints_Point::kYFieldNumber;
#endif  // !_MSC_VER

Packet_ArgumentVariant_BplaPoints_Point::Packet_ArgumentVariant_BplaPoints_Point()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Zaviruha.Packet.ArgumentVariant.BplaPoints.Point)
}

void Packet_ArgumentVariant_BplaPoints_Point::InitAsDefaultInstance() {
}

Packet_ArgumentVariant_BplaPoints_Point::Packet_ArgumentVariant_BplaPoints_Point(const Packet_ArgumentVariant_BplaPoints_Point& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Zaviruha.Packet.ArgumentVariant.BplaPoints.Point)
}

void Packet_ArgumentVariant_BplaPoints_Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ArgumentVariant_BplaPoints_Point::~Packet_ArgumentVariant_BplaPoints_Point() {
  // @@protoc_insertion_point(destructor:Zaviruha.Packet.ArgumentVariant.BplaPoints.Point)
  SharedDtor();
}

void Packet_ArgumentVariant_BplaPoints_Point::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Packet_ArgumentVariant_BplaPoints_Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_ArgumentVariant_BplaPoints_Point& Packet_ArgumentVariant_BplaPoints_Point::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ZVPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ZVPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_ArgumentVariant_BplaPoints_Point* Packet_ArgumentVariant_BplaPoints_Point::default_instance_ = NULL;

Packet_ArgumentVariant_BplaPoints_Point* Packet_ArgumentVariant_BplaPoints_Point::New() const {
  return new Packet_ArgumentVariant_BplaPoints_Point;
}

void Packet_ArgumentVariant_BplaPoints_Point::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Packet_ArgumentVariant_BplaPoints_Point*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_ArgumentVariant_BplaPoints_Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Zaviruha.Packet.ArgumentVariant.BplaPoints.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Zaviruha.Packet.ArgumentVariant.BplaPoints.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Zaviruha.Packet.ArgumentVariant.BplaPoints.Point)
  return false;
#undef DO_
}

void Packet_ArgumentVariant_BplaPoints_Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Zaviruha.Packet.ArgumentVariant.BplaPoints.Point)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Zaviruha.Packet.ArgumentVariant.BplaPoints.Point)
}

int Packet_ArgumentVariant_BplaPoints_Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ArgumentVariant_BplaPoints_Point::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_ArgumentVariant_BplaPoints_Point*>(&from));
}

void Packet_ArgumentVariant_BplaPoints_Point::MergeFrom(const Packet_ArgumentVariant_BplaPoints_Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_ArgumentVariant_BplaPoints_Point::CopyFrom(const Packet_ArgumentVariant_BplaPoints_Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ArgumentVariant_BplaPoints_Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Packet_ArgumentVariant_BplaPoints_Point::Swap(Packet_ArgumentVariant_BplaPoints_Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_ArgumentVariant_BplaPoints_Point::GetTypeName() const {
  return "Zaviruha.Packet.ArgumentVariant.BplaPoints.Point";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ArgumentVariant_BplaPoints::kTimeFieldNumber;
const int Packet_ArgumentVariant_BplaPoints::kStateFieldNumber;
const int Packet_ArgumentVariant_BplaPoints::kPointStdDevFieldNumber;
const int Packet_ArgumentVariant_BplaPoints::kTrackFieldNumber;
const int Packet_ArgumentVariant_BplaPoints::kSpeedFieldNumber;
const int Packet_ArgumentVariant_BplaPoints::kAltitudeFieldNumber;
const int Packet_ArgumentVariant_BplaPoints::kCourseFieldNumber;
#endif  // !_MSC_VER

Packet_ArgumentVariant_BplaPoints::Packet_ArgumentVariant_BplaPoints()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Zaviruha.Packet.ArgumentVariant.BplaPoints)
}

void Packet_ArgumentVariant_BplaPoints::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pointstddev_ = const_cast< ::Zaviruha::Packet_ArgumentVariant_BplaPoints_Point*>(
      ::Zaviruha::Packet_ArgumentVariant_BplaPoints_Point::internal_default_instance());
#else
  pointstddev_ = const_cast< ::Zaviruha::Packet_ArgumentVariant_BplaPoints_Point*>(&::Zaviruha::Packet_ArgumentVariant_BplaPoints_Point::default_instance());
#endif
}

Packet_ArgumentVariant_BplaPoints::Packet_ArgumentVariant_BplaPoints(const Packet_ArgumentVariant_BplaPoints& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Zaviruha.Packet.ArgumentVariant.BplaPoints)
}

void Packet_ArgumentVariant_BplaPoints::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  pointstddev_ = NULL;
  speed_ = 0;
  altitude_ = 0;
  course_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ArgumentVariant_BplaPoints::~Packet_ArgumentVariant_BplaPoints() {
  // @@protoc_insertion_point(destructor:Zaviruha.Packet.ArgumentVariant.BplaPoints)
  SharedDtor();
}

void Packet_ArgumentVariant_BplaPoints::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete pointstddev_;
  }
}

void Packet_ArgumentVariant_BplaPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_ArgumentVariant_BplaPoints& Packet_ArgumentVariant_BplaPoints::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ZVPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ZVPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_ArgumentVariant_BplaPoints* Packet_ArgumentVariant_BplaPoints::default_instance_ = NULL;

Packet_ArgumentVariant_BplaPoints* Packet_ArgumentVariant_BplaPoints::New() const {
  return new Packet_ArgumentVariant_BplaPoints;
}

void Packet_ArgumentVariant_BplaPoints::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Packet_ArgumentVariant_BplaPoints*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 119) {
    ZR_(speed_, state_);
    time_ = GOOGLE_ULONGLONG(0);
    if (has_pointstddev()) {
      if (pointstddev_ != NULL) pointstddev_->::Zaviruha::Packet_ArgumentVariant_BplaPoints_Point::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  track_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_ArgumentVariant_BplaPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Zaviruha.Packet.ArgumentVariant.BplaPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required int32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pointStdDev;
        break;
      }

      // required .Zaviruha.Packet.ArgumentVariant.BplaPoints.Point pointStdDev = 3;
      case 3: {
        if (tag == 26) {
         parse_pointStdDev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pointstddev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_track;
        break;
      }

      // repeated .Zaviruha.Packet.ArgumentVariant.BplaPoints.Point track = 4;
      case 4: {
        if (tag == 34) {
         parse_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_track()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_track;
        if (input->ExpectTag(41)) goto parse_speed;
        break;
      }

      // required double speed = 5;
      case 5: {
        if (tag == 41) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_altitude;
        break;
      }

      // required double altitude = 6;
      case 6: {
        if (tag == 49) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_course;
        break;
      }

      // required double course = 7;
      case 7: {
        if (tag == 57) {
         parse_course:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &course_)));
          set_has_course();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Zaviruha.Packet.ArgumentVariant.BplaPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Zaviruha.Packet.ArgumentVariant.BplaPoints)
  return false;
#undef DO_
}

void Packet_ArgumentVariant_BplaPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Zaviruha.Packet.ArgumentVariant.BplaPoints)
  // required uint64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // required int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // required .Zaviruha.Packet.ArgumentVariant.BplaPoints.Point pointStdDev = 3;
  if (has_pointstddev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->pointstddev(), output);
  }

  // repeated .Zaviruha.Packet.ArgumentVariant.BplaPoints.Point track = 4;
  for (int i = 0; i < this->track_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->track(i), output);
  }

  // required double speed = 5;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->speed(), output);
  }

  // required double altitude = 6;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->altitude(), output);
  }

  // required double course = 7;
  if (has_course()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->course(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Zaviruha.Packet.ArgumentVariant.BplaPoints)
}

int Packet_ArgumentVariant_BplaPoints::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // required int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required .Zaviruha.Packet.ArgumentVariant.BplaPoints.Point pointStdDev = 3;
    if (has_pointstddev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pointstddev());
    }

    // required double speed = 5;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // required double altitude = 6;
    if (has_altitude()) {
      total_size += 1 + 8;
    }

    // required double course = 7;
    if (has_course()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Zaviruha.Packet.ArgumentVariant.BplaPoints.Point track = 4;
  total_size += 1 * this->track_size();
  for (int i = 0; i < this->track_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->track(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ArgumentVariant_BplaPoints::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_ArgumentVariant_BplaPoints*>(&from));
}

void Packet_ArgumentVariant_BplaPoints::MergeFrom(const Packet_ArgumentVariant_BplaPoints& from) {
  GOOGLE_CHECK_NE(&from, this);
  track_.MergeFrom(from.track_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_pointstddev()) {
      mutable_pointstddev()->::Zaviruha::Packet_ArgumentVariant_BplaPoints_Point::MergeFrom(from.pointstddev());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_course()) {
      set_course(from.course());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_ArgumentVariant_BplaPoints::CopyFrom(const Packet_ArgumentVariant_BplaPoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ArgumentVariant_BplaPoints::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000077) != 0x00000077) return false;

  if (has_pointstddev()) {
    if (!this->pointstddev().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->track())) return false;
  return true;
}

void Packet_ArgumentVariant_BplaPoints::Swap(Packet_ArgumentVariant_BplaPoints* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(state_, other->state_);
    std::swap(pointstddev_, other->pointstddev_);
    track_.Swap(&other->track_);
    std::swap(speed_, other->speed_);
    std::swap(altitude_, other->altitude_);
    std::swap(course_, other->course_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_ArgumentVariant_BplaPoints::GetTypeName() const {
  return "Zaviruha.Packet.ArgumentVariant.BplaPoints";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ArgumentVariant_SolverData::kIdFieldNumber;
const int Packet_ArgumentVariant_SolverData::kAltitudeFieldNumber;
const int Packet_ArgumentVariant_SolverData::kTrackLengthFieldNumber;
#endif  // !_MSC_VER

Packet_ArgumentVariant_SolverData::Packet_ArgumentVariant_SolverData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Zaviruha.Packet.ArgumentVariant.SolverData)
}

void Packet_ArgumentVariant_SolverData::InitAsDefaultInstance() {
}

Packet_ArgumentVariant_SolverData::Packet_ArgumentVariant_SolverData(const Packet_ArgumentVariant_SolverData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Zaviruha.Packet.ArgumentVariant.SolverData)
}

void Packet_ArgumentVariant_SolverData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  altitude_ = 0;
  tracklength_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ArgumentVariant_SolverData::~Packet_ArgumentVariant_SolverData() {
  // @@protoc_insertion_point(destructor:Zaviruha.Packet.ArgumentVariant.SolverData)
  SharedDtor();
}

void Packet_ArgumentVariant_SolverData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Packet_ArgumentVariant_SolverData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_ArgumentVariant_SolverData& Packet_ArgumentVariant_SolverData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ZVPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ZVPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_ArgumentVariant_SolverData* Packet_ArgumentVariant_SolverData::default_instance_ = NULL;

Packet_ArgumentVariant_SolverData* Packet_ArgumentVariant_SolverData::New() const {
  return new Packet_ArgumentVariant_SolverData;
}

void Packet_ArgumentVariant_SolverData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Packet_ArgumentVariant_SolverData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(altitude_, tracklength_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_ArgumentVariant_SolverData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Zaviruha.Packet.ArgumentVariant.SolverData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_altitude;
        break;
      }

      // required double altitude = 2;
      case 2: {
        if (tag == 17) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_trackLength;
        break;
      }

      // required int32 trackLength = 3;
      case 3: {
        if (tag == 24) {
         parse_trackLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tracklength_)));
          set_has_tracklength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Zaviruha.Packet.ArgumentVariant.SolverData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Zaviruha.Packet.ArgumentVariant.SolverData)
  return false;
#undef DO_
}

void Packet_ArgumentVariant_SolverData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Zaviruha.Packet.ArgumentVariant.SolverData)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required double altitude = 2;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->altitude(), output);
  }

  // required int32 trackLength = 3;
  if (has_tracklength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tracklength(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Zaviruha.Packet.ArgumentVariant.SolverData)
}

int Packet_ArgumentVariant_SolverData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required double altitude = 2;
    if (has_altitude()) {
      total_size += 1 + 8;
    }

    // required int32 trackLength = 3;
    if (has_tracklength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tracklength());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ArgumentVariant_SolverData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_ArgumentVariant_SolverData*>(&from));
}

void Packet_ArgumentVariant_SolverData::MergeFrom(const Packet_ArgumentVariant_SolverData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_tracklength()) {
      set_tracklength(from.tracklength());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_ArgumentVariant_SolverData::CopyFrom(const Packet_ArgumentVariant_SolverData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ArgumentVariant_SolverData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Packet_ArgumentVariant_SolverData::Swap(Packet_ArgumentVariant_SolverData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(altitude_, other->altitude_);
    std::swap(tracklength_, other->tracklength_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_ArgumentVariant_SolverData::GetTypeName() const {
  return "Zaviruha.Packet.ArgumentVariant.SolverData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ArgumentVariant::kAtlantDirectionFieldNumber;
const int Packet_ArgumentVariant::kAtlantPositionFieldNumber;
const int Packet_ArgumentVariant::kBplaPointsFieldNumber;
const int Packet_ArgumentVariant::kSolverDataFieldNumber;
#endif  // !_MSC_VER

Packet_ArgumentVariant::Packet_ArgumentVariant()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Zaviruha.Packet.ArgumentVariant)
}

void Packet_ArgumentVariant::InitAsDefaultInstance() {
}

Packet_ArgumentVariant::Packet_ArgumentVariant(const Packet_ArgumentVariant& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Zaviruha.Packet.ArgumentVariant)
}

void Packet_ArgumentVariant::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ArgumentVariant::~Packet_ArgumentVariant() {
  // @@protoc_insertion_point(destructor:Zaviruha.Packet.ArgumentVariant)
  SharedDtor();
}

void Packet_ArgumentVariant::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Packet_ArgumentVariant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_ArgumentVariant& Packet_ArgumentVariant::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ZVPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ZVPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_ArgumentVariant* Packet_ArgumentVariant::default_instance_ = NULL;

Packet_ArgumentVariant* Packet_ArgumentVariant::New() const {
  return new Packet_ArgumentVariant;
}

void Packet_ArgumentVariant::Clear() {
  atlantdirection_.Clear();
  atlantposition_.Clear();
  bplapoints_.Clear();
  solverdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_ArgumentVariant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Zaviruha.Packet.ArgumentVariant)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Zaviruha.Packet.ArgumentVariant.AtlantDirection atlantDirection = 1;
      case 1: {
        if (tag == 10) {
         parse_atlantDirection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atlantdirection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_atlantDirection;
        if (input->ExpectTag(18)) goto parse_atlantPosition;
        break;
      }

      // repeated .Zaviruha.Packet.ArgumentVariant.AtlantPosition atlantPosition = 2;
      case 2: {
        if (tag == 18) {
         parse_atlantPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atlantposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_atlantPosition;
        if (input->ExpectTag(26)) goto parse_bplaPoints;
        break;
      }

      // repeated .Zaviruha.Packet.ArgumentVariant.BplaPoints bplaPoints = 3;
      case 3: {
        if (tag == 26) {
         parse_bplaPoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bplapoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bplaPoints;
        if (input->ExpectTag(34)) goto parse_solverData;
        break;
      }

      // repeated .Zaviruha.Packet.ArgumentVariant.SolverData solverData = 4;
      case 4: {
        if (tag == 34) {
         parse_solverData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_solverdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_solverData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Zaviruha.Packet.ArgumentVariant)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Zaviruha.Packet.ArgumentVariant)
  return false;
#undef DO_
}

void Packet_ArgumentVariant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Zaviruha.Packet.ArgumentVariant)
  // repeated .Zaviruha.Packet.ArgumentVariant.AtlantDirection atlantDirection = 1;
  for (int i = 0; i < this->atlantdirection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->atlantdirection(i), output);
  }

  // repeated .Zaviruha.Packet.ArgumentVariant.AtlantPosition atlantPosition = 2;
  for (int i = 0; i < this->atlantposition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->atlantposition(i), output);
  }

  // repeated .Zaviruha.Packet.ArgumentVariant.BplaPoints bplaPoints = 3;
  for (int i = 0; i < this->bplapoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->bplapoints(i), output);
  }

  // repeated .Zaviruha.Packet.ArgumentVariant.SolverData solverData = 4;
  for (int i = 0; i < this->solverdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->solverdata(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Zaviruha.Packet.ArgumentVariant)
}

int Packet_ArgumentVariant::ByteSize() const {
  int total_size = 0;

  // repeated .Zaviruha.Packet.ArgumentVariant.AtlantDirection atlantDirection = 1;
  total_size += 1 * this->atlantdirection_size();
  for (int i = 0; i < this->atlantdirection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atlantdirection(i));
  }

  // repeated .Zaviruha.Packet.ArgumentVariant.AtlantPosition atlantPosition = 2;
  total_size += 1 * this->atlantposition_size();
  for (int i = 0; i < this->atlantposition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atlantposition(i));
  }

  // repeated .Zaviruha.Packet.ArgumentVariant.BplaPoints bplaPoints = 3;
  total_size += 1 * this->bplapoints_size();
  for (int i = 0; i < this->bplapoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bplapoints(i));
  }

  // repeated .Zaviruha.Packet.ArgumentVariant.SolverData solverData = 4;
  total_size += 1 * this->solverdata_size();
  for (int i = 0; i < this->solverdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->solverdata(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ArgumentVariant::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_ArgumentVariant*>(&from));
}

void Packet_ArgumentVariant::MergeFrom(const Packet_ArgumentVariant& from) {
  GOOGLE_CHECK_NE(&from, this);
  atlantdirection_.MergeFrom(from.atlantdirection_);
  atlantposition_.MergeFrom(from.atlantposition_);
  bplapoints_.MergeFrom(from.bplapoints_);
  solverdata_.MergeFrom(from.solverdata_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_ArgumentVariant::CopyFrom(const Packet_ArgumentVariant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ArgumentVariant::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->atlantdirection())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->atlantposition())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->bplapoints())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->solverdata())) return false;
  return true;
}

void Packet_ArgumentVariant::Swap(Packet_ArgumentVariant* other) {
  if (other != this) {
    atlantdirection_.Swap(&other->atlantdirection_);
    atlantposition_.Swap(&other->atlantposition_);
    bplapoints_.Swap(&other->bplapoints_);
    solverdata_.Swap(&other->solverdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_ArgumentVariant::GetTypeName() const {
  return "Zaviruha.Packet.ArgumentVariant";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Command::kActionFieldNumber;
const int Packet_Command::kArgumentsFieldNumber;
#endif  // !_MSC_VER

Packet_Command::Packet_Command()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Zaviruha.Packet.Command)
}

void Packet_Command::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  arguments_ = const_cast< ::Zaviruha::Packet_ArgumentVariant*>(
      ::Zaviruha::Packet_ArgumentVariant::internal_default_instance());
#else
  arguments_ = const_cast< ::Zaviruha::Packet_ArgumentVariant*>(&::Zaviruha::Packet_ArgumentVariant::default_instance());
#endif
}

Packet_Command::Packet_Command(const Packet_Command& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Zaviruha.Packet.Command)
}

void Packet_Command::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  arguments_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Command::~Packet_Command() {
  // @@protoc_insertion_point(destructor:Zaviruha.Packet.Command)
  SharedDtor();
}

void Packet_Command::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete arguments_;
  }
}

void Packet_Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet_Command& Packet_Command::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ZVPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ZVPacket_2eproto();
#endif
  return *default_instance_;
}

Packet_Command* Packet_Command::default_instance_ = NULL;

Packet_Command* Packet_Command::New() const {
  return new Packet_Command;
}

void Packet_Command::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    action_ = 0;
    if (has_arguments()) {
      if (arguments_ != NULL) arguments_->::Zaviruha::Packet_ArgumentVariant::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet_Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Zaviruha.Packet.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Zaviruha.Actions action = 1 [default = unknownAction];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Zaviruha::Actions_IsValid(value)) {
            set_action(static_cast< ::Zaviruha::Actions >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_arguments;
        break;
      }

      // optional .Zaviruha.Packet.ArgumentVariant arguments = 2;
      case 2: {
        if (tag == 18) {
         parse_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arguments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Zaviruha.Packet.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Zaviruha.Packet.Command)
  return false;
#undef DO_
}

void Packet_Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Zaviruha.Packet.Command)
  // required .Zaviruha.Actions action = 1 [default = unknownAction];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional .Zaviruha.Packet.ArgumentVariant arguments = 2;
  if (has_arguments()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->arguments(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Zaviruha.Packet.Command)
}

int Packet_Command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Zaviruha.Actions action = 1 [default = unknownAction];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional .Zaviruha.Packet.ArgumentVariant arguments = 2;
    if (has_arguments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arguments());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Command::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet_Command*>(&from));
}

void Packet_Command::MergeFrom(const Packet_Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_arguments()) {
      mutable_arguments()->::Zaviruha::Packet_ArgumentVariant::MergeFrom(from.arguments());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet_Command::CopyFrom(const Packet_Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_arguments()) {
    if (!this->arguments().IsInitialized()) return false;
  }
  return true;
}

void Packet_Command::Swap(Packet_Command* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(arguments_, other->arguments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet_Command::GetTypeName() const {
  return "Zaviruha.Packet.Command";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet::kCommandFieldNumber;
#endif  // !_MSC_VER

Packet::Packet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Zaviruha.Packet)
}

void Packet::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  command_ = const_cast< ::Zaviruha::Packet_Command*>(
      ::Zaviruha::Packet_Command::internal_default_instance());
#else
  command_ = const_cast< ::Zaviruha::Packet_Command*>(&::Zaviruha::Packet_Command::default_instance());
#endif
}

Packet::Packet(const Packet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Zaviruha.Packet)
}

void Packet::SharedCtor() {
  _cached_size_ = 0;
  command_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:Zaviruha.Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete command_;
  }
}

void Packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Packet& Packet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ZVPacket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ZVPacket_2eproto();
#endif
  return *default_instance_;
}

Packet* Packet::default_instance_ = NULL;

Packet* Packet::New() const {
  return new Packet;
}

void Packet::Clear() {
  if (has_command()) {
    if (command_ != NULL) command_->::Zaviruha::Packet_Command::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Zaviruha.Packet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Zaviruha.Packet.Command command = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Zaviruha.Packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Zaviruha.Packet)
  return false;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Zaviruha.Packet)
  // required .Zaviruha.Packet.Command command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->command(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Zaviruha.Packet)
}

int Packet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Zaviruha.Packet.Command command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Packet*>(&from));
}

void Packet::MergeFrom(const Packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      mutable_command()->::Zaviruha::Packet_Command::MergeFrom(from.command());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Packet::CopyFrom(const Packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_command()) {
    if (!this->command().IsInitialized()) return false;
  }
  return true;
}

void Packet::Swap(Packet* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Packet::GetTypeName() const {
  return "Zaviruha.Packet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Zaviruha

// @@protoc_insertion_point(global_scope)
