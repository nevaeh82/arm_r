// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "storm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Storm {

namespace {

const ::google::protobuf::Descriptor* DirectionFindingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DirectionFindingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DFStopRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DFStopRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartStopRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartStopRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScanRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScanStopRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanStopRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DirectionAnswerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DirectionAnswerMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DirectionAnswerMessage_MotionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PositionAnswerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PositionAnswerMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StatusMessage_StatusType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_storm_2eproto() {
  protobuf_AddDesc_storm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "storm.proto");
  GOOGLE_CHECK(file != NULL);
  DirectionFindingRequest_descriptor_ = file->message_type(0);
  static const int DirectionFindingRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionFindingRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionFindingRequest, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionFindingRequest, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionFindingRequest, description_),
  };
  DirectionFindingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DirectionFindingRequest_descriptor_,
      DirectionFindingRequest::default_instance_,
      DirectionFindingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionFindingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionFindingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DirectionFindingRequest));
  DFStopRequest_descriptor_ = file->message_type(1);
  static const int DFStopRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFStopRequest, id_),
  };
  DFStopRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DFStopRequest_descriptor_,
      DFStopRequest::default_instance_,
      DFStopRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFStopRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DFStopRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DFStopRequest));
  StartStopRequest_descriptor_ = file->message_type(2);
  static const int StartStopRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStopRequest, active_),
  };
  StartStopRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartStopRequest_descriptor_,
      StartStopRequest::default_instance_,
      StartStopRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStopRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStopRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartStopRequest));
  ScanRequest_descriptor_ = file->message_type(3);
  static const int ScanRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, width_),
  };
  ScanRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScanRequest_descriptor_,
      ScanRequest::default_instance_,
      ScanRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScanRequest));
  ScanStopRequest_descriptor_ = file->message_type(4);
  static const int ScanStopRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanStopRequest, id_),
  };
  ScanStopRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScanStopRequest_descriptor_,
      ScanStopRequest::default_instance_,
      ScanStopRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanStopRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanStopRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScanStopRequest));
  DirectionAnswerMessage_descriptor_ = file->message_type(5);
  static const int DirectionAnswerMessage_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionAnswerMessage, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionAnswerMessage, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionAnswerMessage, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionAnswerMessage, post_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionAnswerMessage, postlatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionAnswerMessage, postlongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionAnswerMessage, postheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionAnswerMessage, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionAnswerMessage, widht_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionAnswerMessage, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionAnswerMessage, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionAnswerMessage, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionAnswerMessage, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionAnswerMessage, motiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionAnswerMessage, motionconfidence_),
  };
  DirectionAnswerMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DirectionAnswerMessage_descriptor_,
      DirectionAnswerMessage::default_instance_,
      DirectionAnswerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionAnswerMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionAnswerMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DirectionAnswerMessage));
  DirectionAnswerMessage_MotionType_descriptor_ = DirectionAnswerMessage_descriptor_->enum_type(0);
  PositionAnswerMessage_descriptor_ = file->message_type(6);
  static const int PositionAnswerMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionAnswerMessage, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionAnswerMessage, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionAnswerMessage, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionAnswerMessage, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionAnswerMessage, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionAnswerMessage, quality_),
  };
  PositionAnswerMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PositionAnswerMessage_descriptor_,
      PositionAnswerMessage::default_instance_,
      PositionAnswerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionAnswerMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionAnswerMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PositionAnswerMessage));
  StatusMessage_descriptor_ = file->message_type(7);
  static const int StatusMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusMessage, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusMessage, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusMessage, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusMessage, postid_),
  };
  StatusMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusMessage_descriptor_,
      StatusMessage::default_instance_,
      StatusMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusMessage));
  StatusMessage_StatusType_descriptor_ = StatusMessage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_storm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DirectionFindingRequest_descriptor_, &DirectionFindingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DFStopRequest_descriptor_, &DFStopRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartStopRequest_descriptor_, &StartStopRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScanRequest_descriptor_, &ScanRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScanStopRequest_descriptor_, &ScanStopRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DirectionAnswerMessage_descriptor_, &DirectionAnswerMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PositionAnswerMessage_descriptor_, &PositionAnswerMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusMessage_descriptor_, &StatusMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_storm_2eproto() {
  delete DirectionFindingRequest::default_instance_;
  delete DirectionFindingRequest_reflection_;
  delete DFStopRequest::default_instance_;
  delete DFStopRequest_reflection_;
  delete StartStopRequest::default_instance_;
  delete StartStopRequest_reflection_;
  delete ScanRequest::default_instance_;
  delete ScanRequest_reflection_;
  delete ScanStopRequest::default_instance_;
  delete ScanStopRequest_reflection_;
  delete DirectionAnswerMessage::default_instance_;
  delete DirectionAnswerMessage_reflection_;
  delete PositionAnswerMessage::default_instance_;
  delete PositionAnswerMessage_reflection_;
  delete StatusMessage::default_instance_;
  delete StatusMessage_reflection_;
}

void protobuf_AddDesc_storm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013storm.proto\022\005Storm\"\\\n\027DirectionFinding"
    "Request\022\n\n\002id\030\001 \002(\005\022\021\n\tfrequency\030e \003(\001\022\r"
    "\n\005width\030f \002(\001\022\023\n\013description\030g \001(\t\"\033\n\rDF"
    "StopRequest\022\n\n\002id\030\001 \002(\005\"\"\n\020StartStopRequ"
    "est\022\016\n\006active\030\001 \002(\010\";\n\013ScanRequest\022\n\n\002id"
    "\030\001 \002(\005\022\021\n\tfrequency\030e \002(\001\022\r\n\005width\030f \002(\001"
    "\"\035\n\017ScanStopRequest\022\n\n\002id\030\001 \002(\005\"\255\003\n\026Dire"
    "ctionAnswerMessage\022\021\n\trequestId\030\001 \002(\005\022\020\n"
    "\010sourceId\030\002 \002(\005\022\020\n\010dateTime\030\003 \002(\003\022\014\n\004pos"
    "t\030e \002(\t\022\024\n\014postLatitude\030f \001(\001\022\025\n\rpostLon"
    "gitude\030g \001(\001\022\022\n\npostHeight\030h \001(\001\022\022\n\tfreq"
    "uency\030\311\001 \002(\001\022\016\n\005widht\030\312\001 \002(\001\022\022\n\tdirectio"
    "n\030\255\002 \002(\001\022\016\n\005angle\030\256\002 \002(\001\022\016\n\005level\030\257\002 \002(\001"
    "\022\020\n\007quality\030\260\002 \002(\001\022=\n\nmotionType\030\221\003 \001(\0162"
    "(.Storm.DirectionAnswerMessage.MotionTyp"
    "e\022\031\n\020motionConfidence\030\222\003 \001(\001\"I\n\nMotionTy"
    "pe\022\016\n\nSTATIONARY\020\000\022\014\n\010UNDERWAY\020\001\022\r\n\tUNCE"
    "RTAIN\020\002\022\016\n\nLACKOFDATA\020\003\"\204\001\n\025PositionAnsw"
    "erMessage\022\021\n\trequestId\030\001 \002(\005\022\020\n\010sourceId"
    "\030\002 \002(\005\022\020\n\010dateTime\030\003 \002(\003\022\021\n\tlongitude\030\n "
    "\002(\001\022\020\n\010latitude\030f \002(\001\022\017\n\007quality\030g \002(\001\"\326"
    "\001\n\rStatusMessage\022/\n\006status\030\001 \002(\0162\037.Storm"
    ".StatusMessage.StatusType\022\023\n\013description"
    "\030\002 \002(\t\022\021\n\trequestID\030e \001(\005\022\016\n\006postID\030f \001("
    "\t\"\\\n\nStatusType\022\014\n\010NO_ERROR\020\000\022\017\n\013POST_IS"
    "_OFF\020\001\022\033\n\027TASK_OUT_OUTSIDE_20_MHZ\020\002\022\022\n\016N"
    "O_TASK_FOR_ID\020\003", 1055);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "storm.proto", &protobuf_RegisterTypes);
  DirectionFindingRequest::default_instance_ = new DirectionFindingRequest();
  DFStopRequest::default_instance_ = new DFStopRequest();
  StartStopRequest::default_instance_ = new StartStopRequest();
  ScanRequest::default_instance_ = new ScanRequest();
  ScanStopRequest::default_instance_ = new ScanStopRequest();
  DirectionAnswerMessage::default_instance_ = new DirectionAnswerMessage();
  PositionAnswerMessage::default_instance_ = new PositionAnswerMessage();
  StatusMessage::default_instance_ = new StatusMessage();
  DirectionFindingRequest::default_instance_->InitAsDefaultInstance();
  DFStopRequest::default_instance_->InitAsDefaultInstance();
  StartStopRequest::default_instance_->InitAsDefaultInstance();
  ScanRequest::default_instance_->InitAsDefaultInstance();
  ScanStopRequest::default_instance_->InitAsDefaultInstance();
  DirectionAnswerMessage::default_instance_->InitAsDefaultInstance();
  PositionAnswerMessage::default_instance_->InitAsDefaultInstance();
  StatusMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_storm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_storm_2eproto {
  StaticDescriptorInitializer_storm_2eproto() {
    protobuf_AddDesc_storm_2eproto();
  }
} static_descriptor_initializer_storm_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DirectionFindingRequest::kIdFieldNumber;
const int DirectionFindingRequest::kFrequencyFieldNumber;
const int DirectionFindingRequest::kWidthFieldNumber;
const int DirectionFindingRequest::kDescriptionFieldNumber;
#endif  // !_MSC_VER

DirectionFindingRequest::DirectionFindingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Storm.DirectionFindingRequest)
}

void DirectionFindingRequest::InitAsDefaultInstance() {
}

DirectionFindingRequest::DirectionFindingRequest(const DirectionFindingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Storm.DirectionFindingRequest)
}

void DirectionFindingRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  width_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DirectionFindingRequest::~DirectionFindingRequest() {
  // @@protoc_insertion_point(destructor:Storm.DirectionFindingRequest)
  SharedDtor();
}

void DirectionFindingRequest::SharedDtor() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void DirectionFindingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectionFindingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirectionFindingRequest_descriptor_;
}

const DirectionFindingRequest& DirectionFindingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storm_2eproto();
  return *default_instance_;
}

DirectionFindingRequest* DirectionFindingRequest::default_instance_ = NULL;

DirectionFindingRequest* DirectionFindingRequest::New() const {
  return new DirectionFindingRequest;
}

void DirectionFindingRequest::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    id_ = 0;
    width_ = 0;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }
  frequency_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DirectionFindingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Storm.DirectionFindingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(809)) goto parse_frequency;
        break;
      }

      // repeated double frequency = 101;
      case 101: {
        if (tag == 809) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 809, input, this->mutable_frequency())));
        } else if (tag == 810) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_frequency())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(809)) goto parse_frequency;
        if (input->ExpectTag(817)) goto parse_width;
        break;
      }

      // required double width = 102;
      case 102: {
        if (tag == 817) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(826)) goto parse_description;
        break;
      }

      // optional string description = 103;
      case 103: {
        if (tag == 826) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Storm.DirectionFindingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Storm.DirectionFindingRequest)
  return false;
#undef DO_
}

void DirectionFindingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Storm.DirectionFindingRequest)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated double frequency = 101;
  for (int i = 0; i < this->frequency_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      101, this->frequency(i), output);
  }

  // required double width = 102;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(102, this->width(), output);
  }

  // optional string description = 103;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      103, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Storm.DirectionFindingRequest)
}

::google::protobuf::uint8* DirectionFindingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Storm.DirectionFindingRequest)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated double frequency = 101;
  for (int i = 0; i < this->frequency_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(101, this->frequency(i), target);
  }

  // required double width = 102;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(102, this->width(), target);
  }

  // optional string description = 103;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        103, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Storm.DirectionFindingRequest)
  return target;
}

int DirectionFindingRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required double width = 102;
    if (has_width()) {
      total_size += 2 + 8;
    }

    // optional string description = 103;
    if (has_description()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  // repeated double frequency = 101;
  {
    int data_size = 0;
    data_size = 8 * this->frequency_size();
    total_size += 2 * this->frequency_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectionFindingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DirectionFindingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DirectionFindingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DirectionFindingRequest::MergeFrom(const DirectionFindingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  frequency_.MergeFrom(from.frequency_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DirectionFindingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectionFindingRequest::CopyFrom(const DirectionFindingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionFindingRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void DirectionFindingRequest::Swap(DirectionFindingRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    frequency_.Swap(&other->frequency_);
    std::swap(width_, other->width_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DirectionFindingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DirectionFindingRequest_descriptor_;
  metadata.reflection = DirectionFindingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DFStopRequest::kIdFieldNumber;
#endif  // !_MSC_VER

DFStopRequest::DFStopRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Storm.DFStopRequest)
}

void DFStopRequest::InitAsDefaultInstance() {
}

DFStopRequest::DFStopRequest(const DFStopRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Storm.DFStopRequest)
}

void DFStopRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DFStopRequest::~DFStopRequest() {
  // @@protoc_insertion_point(destructor:Storm.DFStopRequest)
  SharedDtor();
}

void DFStopRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DFStopRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DFStopRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DFStopRequest_descriptor_;
}

const DFStopRequest& DFStopRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storm_2eproto();
  return *default_instance_;
}

DFStopRequest* DFStopRequest::default_instance_ = NULL;

DFStopRequest* DFStopRequest::New() const {
  return new DFStopRequest;
}

void DFStopRequest::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DFStopRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Storm.DFStopRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Storm.DFStopRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Storm.DFStopRequest)
  return false;
#undef DO_
}

void DFStopRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Storm.DFStopRequest)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Storm.DFStopRequest)
}

::google::protobuf::uint8* DFStopRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Storm.DFStopRequest)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Storm.DFStopRequest)
  return target;
}

int DFStopRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DFStopRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DFStopRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DFStopRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DFStopRequest::MergeFrom(const DFStopRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DFStopRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DFStopRequest::CopyFrom(const DFStopRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DFStopRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DFStopRequest::Swap(DFStopRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DFStopRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DFStopRequest_descriptor_;
  metadata.reflection = DFStopRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartStopRequest::kActiveFieldNumber;
#endif  // !_MSC_VER

StartStopRequest::StartStopRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Storm.StartStopRequest)
}

void StartStopRequest::InitAsDefaultInstance() {
}

StartStopRequest::StartStopRequest(const StartStopRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Storm.StartStopRequest)
}

void StartStopRequest::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartStopRequest::~StartStopRequest() {
  // @@protoc_insertion_point(destructor:Storm.StartStopRequest)
  SharedDtor();
}

void StartStopRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartStopRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartStopRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartStopRequest_descriptor_;
}

const StartStopRequest& StartStopRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storm_2eproto();
  return *default_instance_;
}

StartStopRequest* StartStopRequest::default_instance_ = NULL;

StartStopRequest* StartStopRequest::New() const {
  return new StartStopRequest;
}

void StartStopRequest::Clear() {
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartStopRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Storm.StartStopRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Storm.StartStopRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Storm.StartStopRequest)
  return false;
#undef DO_
}

void StartStopRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Storm.StartStopRequest)
  // required bool active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Storm.StartStopRequest)
}

::google::protobuf::uint8* StartStopRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Storm.StartStopRequest)
  // required bool active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Storm.StartStopRequest)
  return target;
}

int StartStopRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartStopRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartStopRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartStopRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartStopRequest::MergeFrom(const StartStopRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartStopRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartStopRequest::CopyFrom(const StartStopRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartStopRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StartStopRequest::Swap(StartStopRequest* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartStopRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartStopRequest_descriptor_;
  metadata.reflection = StartStopRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScanRequest::kIdFieldNumber;
const int ScanRequest::kFrequencyFieldNumber;
const int ScanRequest::kWidthFieldNumber;
#endif  // !_MSC_VER

ScanRequest::ScanRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Storm.ScanRequest)
}

void ScanRequest::InitAsDefaultInstance() {
}

ScanRequest::ScanRequest(const ScanRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Storm.ScanRequest)
}

void ScanRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  frequency_ = 0;
  width_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScanRequest::~ScanRequest() {
  // @@protoc_insertion_point(destructor:Storm.ScanRequest)
  SharedDtor();
}

void ScanRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScanRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanRequest_descriptor_;
}

const ScanRequest& ScanRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storm_2eproto();
  return *default_instance_;
}

ScanRequest* ScanRequest::default_instance_ = NULL;

ScanRequest* ScanRequest::New() const {
  return new ScanRequest;
}

void ScanRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ScanRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(frequency_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Storm.ScanRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(809)) goto parse_frequency;
        break;
      }

      // required double frequency = 101;
      case 101: {
        if (tag == 809) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(817)) goto parse_width;
        break;
      }

      // required double width = 102;
      case 102: {
        if (tag == 817) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Storm.ScanRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Storm.ScanRequest)
  return false;
#undef DO_
}

void ScanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Storm.ScanRequest)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required double frequency = 101;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(101, this->frequency(), output);
  }

  // required double width = 102;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(102, this->width(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Storm.ScanRequest)
}

::google::protobuf::uint8* ScanRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Storm.ScanRequest)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required double frequency = 101;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(101, this->frequency(), target);
  }

  // required double width = 102;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(102, this->width(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Storm.ScanRequest)
  return target;
}

int ScanRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required double frequency = 101;
    if (has_frequency()) {
      total_size += 2 + 8;
    }

    // required double width = 102;
    if (has_width()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScanRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScanRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScanRequest::MergeFrom(const ScanRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScanRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanRequest::CopyFrom(const ScanRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ScanRequest::Swap(ScanRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(frequency_, other->frequency_);
    std::swap(width_, other->width_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScanRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanRequest_descriptor_;
  metadata.reflection = ScanRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScanStopRequest::kIdFieldNumber;
#endif  // !_MSC_VER

ScanStopRequest::ScanStopRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Storm.ScanStopRequest)
}

void ScanStopRequest::InitAsDefaultInstance() {
}

ScanStopRequest::ScanStopRequest(const ScanStopRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Storm.ScanStopRequest)
}

void ScanStopRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScanStopRequest::~ScanStopRequest() {
  // @@protoc_insertion_point(destructor:Storm.ScanStopRequest)
  SharedDtor();
}

void ScanStopRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScanStopRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanStopRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanStopRequest_descriptor_;
}

const ScanStopRequest& ScanStopRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storm_2eproto();
  return *default_instance_;
}

ScanStopRequest* ScanStopRequest::default_instance_ = NULL;

ScanStopRequest* ScanStopRequest::New() const {
  return new ScanStopRequest;
}

void ScanStopRequest::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScanStopRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Storm.ScanStopRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Storm.ScanStopRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Storm.ScanStopRequest)
  return false;
#undef DO_
}

void ScanStopRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Storm.ScanStopRequest)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Storm.ScanStopRequest)
}

::google::protobuf::uint8* ScanStopRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Storm.ScanStopRequest)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Storm.ScanStopRequest)
  return target;
}

int ScanStopRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanStopRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScanStopRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScanStopRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScanStopRequest::MergeFrom(const ScanStopRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScanStopRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanStopRequest::CopyFrom(const ScanStopRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanStopRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ScanStopRequest::Swap(ScanStopRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScanStopRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanStopRequest_descriptor_;
  metadata.reflection = ScanStopRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DirectionAnswerMessage_MotionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirectionAnswerMessage_MotionType_descriptor_;
}
bool DirectionAnswerMessage_MotionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DirectionAnswerMessage_MotionType DirectionAnswerMessage::STATIONARY;
const DirectionAnswerMessage_MotionType DirectionAnswerMessage::UNDERWAY;
const DirectionAnswerMessage_MotionType DirectionAnswerMessage::UNCERTAIN;
const DirectionAnswerMessage_MotionType DirectionAnswerMessage::LACKOFDATA;
const DirectionAnswerMessage_MotionType DirectionAnswerMessage::MotionType_MIN;
const DirectionAnswerMessage_MotionType DirectionAnswerMessage::MotionType_MAX;
const int DirectionAnswerMessage::MotionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DirectionAnswerMessage::kRequestIdFieldNumber;
const int DirectionAnswerMessage::kSourceIdFieldNumber;
const int DirectionAnswerMessage::kDateTimeFieldNumber;
const int DirectionAnswerMessage::kPostFieldNumber;
const int DirectionAnswerMessage::kPostLatitudeFieldNumber;
const int DirectionAnswerMessage::kPostLongitudeFieldNumber;
const int DirectionAnswerMessage::kPostHeightFieldNumber;
const int DirectionAnswerMessage::kFrequencyFieldNumber;
const int DirectionAnswerMessage::kWidhtFieldNumber;
const int DirectionAnswerMessage::kDirectionFieldNumber;
const int DirectionAnswerMessage::kAngleFieldNumber;
const int DirectionAnswerMessage::kLevelFieldNumber;
const int DirectionAnswerMessage::kQualityFieldNumber;
const int DirectionAnswerMessage::kMotionTypeFieldNumber;
const int DirectionAnswerMessage::kMotionConfidenceFieldNumber;
#endif  // !_MSC_VER

DirectionAnswerMessage::DirectionAnswerMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Storm.DirectionAnswerMessage)
}

void DirectionAnswerMessage::InitAsDefaultInstance() {
}

DirectionAnswerMessage::DirectionAnswerMessage(const DirectionAnswerMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Storm.DirectionAnswerMessage)
}

void DirectionAnswerMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  sourceid_ = 0;
  datetime_ = GOOGLE_LONGLONG(0);
  post_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postlatitude_ = 0;
  postlongitude_ = 0;
  postheight_ = 0;
  frequency_ = 0;
  widht_ = 0;
  direction_ = 0;
  angle_ = 0;
  level_ = 0;
  quality_ = 0;
  motiontype_ = 0;
  motionconfidence_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DirectionAnswerMessage::~DirectionAnswerMessage() {
  // @@protoc_insertion_point(destructor:Storm.DirectionAnswerMessage)
  SharedDtor();
}

void DirectionAnswerMessage::SharedDtor() {
  if (post_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete post_;
  }
  if (this != default_instance_) {
  }
}

void DirectionAnswerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectionAnswerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirectionAnswerMessage_descriptor_;
}

const DirectionAnswerMessage& DirectionAnswerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storm_2eproto();
  return *default_instance_;
}

DirectionAnswerMessage* DirectionAnswerMessage::default_instance_ = NULL;

DirectionAnswerMessage* DirectionAnswerMessage::New() const {
  return new DirectionAnswerMessage;
}

void DirectionAnswerMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DirectionAnswerMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(requestid_, datetime_);
    ZR_(postlatitude_, frequency_);
    if (has_post()) {
      if (post_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        post_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(widht_, motiontype_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DirectionAnswerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Storm.DirectionAnswerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 requestId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sourceId;
        break;
      }

      // required int32 sourceId = 2;
      case 2: {
        if (tag == 16) {
         parse_sourceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dateTime;
        break;
      }

      // required int64 dateTime = 3;
      case 3: {
        if (tag == 24) {
         parse_dateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_post;
        break;
      }

      // required string post = 101;
      case 101: {
        if (tag == 810) {
         parse_post:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_post()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->post().data(), this->post().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "post");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(817)) goto parse_postLatitude;
        break;
      }

      // optional double postLatitude = 102;
      case 102: {
        if (tag == 817) {
         parse_postLatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &postlatitude_)));
          set_has_postlatitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(825)) goto parse_postLongitude;
        break;
      }

      // optional double postLongitude = 103;
      case 103: {
        if (tag == 825) {
         parse_postLongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &postlongitude_)));
          set_has_postlongitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(833)) goto parse_postHeight;
        break;
      }

      // optional double postHeight = 104;
      case 104: {
        if (tag == 833) {
         parse_postHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &postheight_)));
          set_has_postheight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1609)) goto parse_frequency;
        break;
      }

      // required double frequency = 201;
      case 201: {
        if (tag == 1609) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1617)) goto parse_widht;
        break;
      }

      // required double widht = 202;
      case 202: {
        if (tag == 1617) {
         parse_widht:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &widht_)));
          set_has_widht();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2409)) goto parse_direction;
        break;
      }

      // required double direction = 301;
      case 301: {
        if (tag == 2409) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2417)) goto parse_angle;
        break;
      }

      // required double angle = 302;
      case 302: {
        if (tag == 2417) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2425)) goto parse_level;
        break;
      }

      // required double level = 303;
      case 303: {
        if (tag == 2425) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2433)) goto parse_quality;
        break;
      }

      // required double quality = 304;
      case 304: {
        if (tag == 2433) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3208)) goto parse_motionType;
        break;
      }

      // optional .Storm.DirectionAnswerMessage.MotionType motionType = 401;
      case 401: {
        if (tag == 3208) {
         parse_motionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Storm::DirectionAnswerMessage_MotionType_IsValid(value)) {
            set_motiontype(static_cast< ::Storm::DirectionAnswerMessage_MotionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(401, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3217)) goto parse_motionConfidence;
        break;
      }

      // optional double motionConfidence = 402;
      case 402: {
        if (tag == 3217) {
         parse_motionConfidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &motionconfidence_)));
          set_has_motionconfidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Storm.DirectionAnswerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Storm.DirectionAnswerMessage)
  return false;
#undef DO_
}

void DirectionAnswerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Storm.DirectionAnswerMessage)
  // required int32 requestId = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // required int32 sourceId = 2;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sourceid(), output);
  }

  // required int64 dateTime = 3;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->datetime(), output);
  }

  // required string post = 101;
  if (has_post()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->post().data(), this->post().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "post");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      101, this->post(), output);
  }

  // optional double postLatitude = 102;
  if (has_postlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(102, this->postlatitude(), output);
  }

  // optional double postLongitude = 103;
  if (has_postlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(103, this->postlongitude(), output);
  }

  // optional double postHeight = 104;
  if (has_postheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(104, this->postheight(), output);
  }

  // required double frequency = 201;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(201, this->frequency(), output);
  }

  // required double widht = 202;
  if (has_widht()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(202, this->widht(), output);
  }

  // required double direction = 301;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(301, this->direction(), output);
  }

  // required double angle = 302;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(302, this->angle(), output);
  }

  // required double level = 303;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(303, this->level(), output);
  }

  // required double quality = 304;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(304, this->quality(), output);
  }

  // optional .Storm.DirectionAnswerMessage.MotionType motionType = 401;
  if (has_motiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      401, this->motiontype(), output);
  }

  // optional double motionConfidence = 402;
  if (has_motionconfidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(402, this->motionconfidence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Storm.DirectionAnswerMessage)
}

::google::protobuf::uint8* DirectionAnswerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Storm.DirectionAnswerMessage)
  // required int32 requestId = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // required int32 sourceId = 2;
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sourceid(), target);
  }

  // required int64 dateTime = 3;
  if (has_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->datetime(), target);
  }

  // required string post = 101;
  if (has_post()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->post().data(), this->post().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "post");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->post(), target);
  }

  // optional double postLatitude = 102;
  if (has_postlatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(102, this->postlatitude(), target);
  }

  // optional double postLongitude = 103;
  if (has_postlongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(103, this->postlongitude(), target);
  }

  // optional double postHeight = 104;
  if (has_postheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(104, this->postheight(), target);
  }

  // required double frequency = 201;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(201, this->frequency(), target);
  }

  // required double widht = 202;
  if (has_widht()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(202, this->widht(), target);
  }

  // required double direction = 301;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(301, this->direction(), target);
  }

  // required double angle = 302;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(302, this->angle(), target);
  }

  // required double level = 303;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(303, this->level(), target);
  }

  // required double quality = 304;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(304, this->quality(), target);
  }

  // optional .Storm.DirectionAnswerMessage.MotionType motionType = 401;
  if (has_motiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      401, this->motiontype(), target);
  }

  // optional double motionConfidence = 402;
  if (has_motionconfidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(402, this->motionconfidence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Storm.DirectionAnswerMessage)
  return target;
}

int DirectionAnswerMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 requestId = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // required int32 sourceId = 2;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourceid());
    }

    // required int64 dateTime = 3;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->datetime());
    }

    // required string post = 101;
    if (has_post()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->post());
    }

    // optional double postLatitude = 102;
    if (has_postlatitude()) {
      total_size += 2 + 8;
    }

    // optional double postLongitude = 103;
    if (has_postlongitude()) {
      total_size += 2 + 8;
    }

    // optional double postHeight = 104;
    if (has_postheight()) {
      total_size += 2 + 8;
    }

    // required double frequency = 201;
    if (has_frequency()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double widht = 202;
    if (has_widht()) {
      total_size += 2 + 8;
    }

    // required double direction = 301;
    if (has_direction()) {
      total_size += 2 + 8;
    }

    // required double angle = 302;
    if (has_angle()) {
      total_size += 2 + 8;
    }

    // required double level = 303;
    if (has_level()) {
      total_size += 2 + 8;
    }

    // required double quality = 304;
    if (has_quality()) {
      total_size += 2 + 8;
    }

    // optional .Storm.DirectionAnswerMessage.MotionType motionType = 401;
    if (has_motiontype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->motiontype());
    }

    // optional double motionConfidence = 402;
    if (has_motionconfidence()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectionAnswerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DirectionAnswerMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DirectionAnswerMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DirectionAnswerMessage::MergeFrom(const DirectionAnswerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_post()) {
      set_post(from.post());
    }
    if (from.has_postlatitude()) {
      set_postlatitude(from.postlatitude());
    }
    if (from.has_postlongitude()) {
      set_postlongitude(from.postlongitude());
    }
    if (from.has_postheight()) {
      set_postheight(from.postheight());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_widht()) {
      set_widht(from.widht());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_motiontype()) {
      set_motiontype(from.motiontype());
    }
    if (from.has_motionconfidence()) {
      set_motionconfidence(from.motionconfidence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DirectionAnswerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectionAnswerMessage::CopyFrom(const DirectionAnswerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionAnswerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001f8f) != 0x00001f8f) return false;

  return true;
}

void DirectionAnswerMessage::Swap(DirectionAnswerMessage* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(datetime_, other->datetime_);
    std::swap(post_, other->post_);
    std::swap(postlatitude_, other->postlatitude_);
    std::swap(postlongitude_, other->postlongitude_);
    std::swap(postheight_, other->postheight_);
    std::swap(frequency_, other->frequency_);
    std::swap(widht_, other->widht_);
    std::swap(direction_, other->direction_);
    std::swap(angle_, other->angle_);
    std::swap(level_, other->level_);
    std::swap(quality_, other->quality_);
    std::swap(motiontype_, other->motiontype_);
    std::swap(motionconfidence_, other->motionconfidence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DirectionAnswerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DirectionAnswerMessage_descriptor_;
  metadata.reflection = DirectionAnswerMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PositionAnswerMessage::kRequestIdFieldNumber;
const int PositionAnswerMessage::kSourceIdFieldNumber;
const int PositionAnswerMessage::kDateTimeFieldNumber;
const int PositionAnswerMessage::kLongitudeFieldNumber;
const int PositionAnswerMessage::kLatitudeFieldNumber;
const int PositionAnswerMessage::kQualityFieldNumber;
#endif  // !_MSC_VER

PositionAnswerMessage::PositionAnswerMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Storm.PositionAnswerMessage)
}

void PositionAnswerMessage::InitAsDefaultInstance() {
}

PositionAnswerMessage::PositionAnswerMessage(const PositionAnswerMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Storm.PositionAnswerMessage)
}

void PositionAnswerMessage::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = 0;
  sourceid_ = 0;
  datetime_ = GOOGLE_LONGLONG(0);
  longitude_ = 0;
  latitude_ = 0;
  quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PositionAnswerMessage::~PositionAnswerMessage() {
  // @@protoc_insertion_point(destructor:Storm.PositionAnswerMessage)
  SharedDtor();
}

void PositionAnswerMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PositionAnswerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PositionAnswerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionAnswerMessage_descriptor_;
}

const PositionAnswerMessage& PositionAnswerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storm_2eproto();
  return *default_instance_;
}

PositionAnswerMessage* PositionAnswerMessage::default_instance_ = NULL;

PositionAnswerMessage* PositionAnswerMessage::New() const {
  return new PositionAnswerMessage;
}

void PositionAnswerMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PositionAnswerMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(requestid_, quality_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PositionAnswerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Storm.PositionAnswerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 requestId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sourceId;
        break;
      }

      // required int32 sourceId = 2;
      case 2: {
        if (tag == 16) {
         parse_sourceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dateTime;
        break;
      }

      // required int64 dateTime = 3;
      case 3: {
        if (tag == 24) {
         parse_dateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_longitude;
        break;
      }

      // required double longitude = 10;
      case 10: {
        if (tag == 81) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(817)) goto parse_latitude;
        break;
      }

      // required double latitude = 102;
      case 102: {
        if (tag == 817) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(825)) goto parse_quality;
        break;
      }

      // required double quality = 103;
      case 103: {
        if (tag == 825) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Storm.PositionAnswerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Storm.PositionAnswerMessage)
  return false;
#undef DO_
}

void PositionAnswerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Storm.PositionAnswerMessage)
  // required int32 requestId = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // required int32 sourceId = 2;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sourceid(), output);
  }

  // required int64 dateTime = 3;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->datetime(), output);
  }

  // required double longitude = 10;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->longitude(), output);
  }

  // required double latitude = 102;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(102, this->latitude(), output);
  }

  // required double quality = 103;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(103, this->quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Storm.PositionAnswerMessage)
}

::google::protobuf::uint8* PositionAnswerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Storm.PositionAnswerMessage)
  // required int32 requestId = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // required int32 sourceId = 2;
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sourceid(), target);
  }

  // required int64 dateTime = 3;
  if (has_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->datetime(), target);
  }

  // required double longitude = 10;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->longitude(), target);
  }

  // required double latitude = 102;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(102, this->latitude(), target);
  }

  // required double quality = 103;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(103, this->quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Storm.PositionAnswerMessage)
  return target;
}

int PositionAnswerMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 requestId = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // required int32 sourceId = 2;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourceid());
    }

    // required int64 dateTime = 3;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->datetime());
    }

    // required double longitude = 10;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // required double latitude = 102;
    if (has_latitude()) {
      total_size += 2 + 8;
    }

    // required double quality = 103;
    if (has_quality()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PositionAnswerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PositionAnswerMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PositionAnswerMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PositionAnswerMessage::MergeFrom(const PositionAnswerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PositionAnswerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionAnswerMessage::CopyFrom(const PositionAnswerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionAnswerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void PositionAnswerMessage::Swap(PositionAnswerMessage* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(datetime_, other->datetime_);
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PositionAnswerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PositionAnswerMessage_descriptor_;
  metadata.reflection = PositionAnswerMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* StatusMessage_StatusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusMessage_StatusType_descriptor_;
}
bool StatusMessage_StatusType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StatusMessage_StatusType StatusMessage::NO_ERROR;
const StatusMessage_StatusType StatusMessage::POST_IS_OFF;
const StatusMessage_StatusType StatusMessage::TASK_OUT_OUTSIDE_20_MHZ;
const StatusMessage_StatusType StatusMessage::NO_TASK_FOR_ID;
const StatusMessage_StatusType StatusMessage::StatusType_MIN;
const StatusMessage_StatusType StatusMessage::StatusType_MAX;
const int StatusMessage::StatusType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StatusMessage::kStatusFieldNumber;
const int StatusMessage::kDescriptionFieldNumber;
const int StatusMessage::kRequestIDFieldNumber;
const int StatusMessage::kPostIDFieldNumber;
#endif  // !_MSC_VER

StatusMessage::StatusMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Storm.StatusMessage)
}

void StatusMessage::InitAsDefaultInstance() {
}

StatusMessage::StatusMessage(const StatusMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Storm.StatusMessage)
}

void StatusMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  postid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusMessage::~StatusMessage() {
  // @@protoc_insertion_point(destructor:Storm.StatusMessage)
  SharedDtor();
}

void StatusMessage::SharedDtor() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (postid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete postid_;
  }
  if (this != default_instance_) {
  }
}

void StatusMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusMessage_descriptor_;
}

const StatusMessage& StatusMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storm_2eproto();
  return *default_instance_;
}

StatusMessage* StatusMessage::default_instance_ = NULL;

StatusMessage* StatusMessage::New() const {
  return new StatusMessage;
}

void StatusMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StatusMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(status_, requestid_);
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_postid()) {
      if (postid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        postid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Storm.StatusMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Storm.StatusMessage.StatusType status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Storm::StatusMessage_StatusType_IsValid(value)) {
            set_status(static_cast< ::Storm::StatusMessage_StatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // required string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(808)) goto parse_requestID;
        break;
      }

      // optional int32 requestID = 101;
      case 101: {
        if (tag == 808) {
         parse_requestID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(818)) goto parse_postID;
        break;
      }

      // optional string postID = 102;
      case 102: {
        if (tag == 818) {
         parse_postID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->postid().data(), this->postid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "postid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Storm.StatusMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Storm.StatusMessage)
  return false;
#undef DO_
}

void StatusMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Storm.StatusMessage)
  // required .Storm.StatusMessage.StatusType status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // required string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional int32 requestID = 101;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(101, this->requestid(), output);
  }

  // optional string postID = 102;
  if (has_postid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postid().data(), this->postid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "postid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      102, this->postid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Storm.StatusMessage)
}

::google::protobuf::uint8* StatusMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Storm.StatusMessage)
  // required .Storm.StatusMessage.StatusType status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // required string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional int32 requestID = 101;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(101, this->requestid(), target);
  }

  // optional string postID = 102;
  if (has_postid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postid().data(), this->postid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "postid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->postid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Storm.StatusMessage)
  return target;
}

int StatusMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Storm.StatusMessage.StatusType status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional int32 requestID = 101;
    if (has_requestid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string postID = 102;
    if (has_postid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusMessage::MergeFrom(const StatusMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_postid()) {
      set_postid(from.postid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusMessage::CopyFrom(const StatusMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StatusMessage::Swap(StatusMessage* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(description_, other->description_);
    std::swap(requestid_, other->requestid_);
    std::swap(postid_, other->postid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusMessage_descriptor_;
  metadata.reflection = StatusMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Storm

// @@protoc_insertion_point(global_scope)
