// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EagleMessageProto.proto

#ifndef PROTOBUF_EagleMessageProto_2eproto__INCLUDED
#define PROTOBUF_EagleMessageProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace EMS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_EagleMessageProto_2eproto();
void protobuf_AssignDesc_EagleMessageProto_2eproto();
void protobuf_ShutdownFile_EagleMessageProto_2eproto();

class EagleMessage;

// ===================================================================

class EagleMessage : public ::google::protobuf::Message {
 public:
  EagleMessage();
  virtual ~EagleMessage();

  EagleMessage(const EagleMessage& from);

  inline EagleMessage& operator=(const EagleMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EagleMessage& default_instance();

  void Swap(EagleMessage* other);

  // implements Message ----------------------------------------------

  EagleMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EagleMessage& from);
  void MergeFrom(const EagleMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required int64 dateTime = 4;
  inline bool has_datetime() const;
  inline void clear_datetime();
  static const int kDateTimeFieldNumber = 4;
  inline ::google::protobuf::int64 datetime() const;
  inline void set_datetime(::google::protobuf::int64 value);

  // required string senderName = 5;
  inline bool has_sendername() const;
  inline void clear_sendername();
  static const int kSenderNameFieldNumber = 5;
  inline const ::std::string& sendername() const;
  inline void set_sendername(const ::std::string& value);
  inline void set_sendername(const char* value);
  inline void set_sendername(const char* value, size_t size);
  inline ::std::string* mutable_sendername();
  inline ::std::string* release_sendername();
  inline void set_allocated_sendername(::std::string* sendername);

  // repeated string label = 6;
  inline int label_size() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 6;
  inline const ::std::string& label(int index) const;
  inline ::std::string* mutable_label(int index);
  inline void set_label(int index, const ::std::string& value);
  inline void set_label(int index, const char* value);
  inline void set_label(int index, const char* value, size_t size);
  inline ::std::string* add_label();
  inline void add_label(const ::std::string& value);
  inline void add_label(const char* value);
  inline void add_label(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& label() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_label();

  // optional string recipientName = 7;
  inline bool has_recipientname() const;
  inline void clear_recipientname();
  static const int kRecipientNameFieldNumber = 7;
  inline const ::std::string& recipientname() const;
  inline void set_recipientname(const ::std::string& value);
  inline void set_recipientname(const char* value);
  inline void set_recipientname(const char* value, size_t size);
  inline ::std::string* mutable_recipientname();
  inline ::std::string* release_recipientname();
  inline void set_allocated_recipientname(::std::string* recipientname);

  // optional bytes innerMessage = 8;
  inline bool has_innermessage() const;
  inline void clear_innermessage();
  static const int kInnerMessageFieldNumber = 8;
  inline const ::std::string& innermessage() const;
  inline void set_innermessage(const ::std::string& value);
  inline void set_innermessage(const char* value);
  inline void set_innermessage(const void* value, size_t size);
  inline ::std::string* mutable_innermessage();
  inline ::std::string* release_innermessage();
  inline void set_allocated_innermessage(::std::string* innermessage);

  // @@protoc_insertion_point(class_scope:EMS.EagleMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_datetime();
  inline void clear_has_datetime();
  inline void set_has_sendername();
  inline void clear_has_sendername();
  inline void set_has_recipientname();
  inline void clear_has_recipientname();
  inline void set_has_innermessage();
  inline void clear_has_innermessage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* type_;
  ::google::protobuf::int64 datetime_;
  ::std::string* sendername_;
  ::google::protobuf::RepeatedPtrField< ::std::string> label_;
  ::std::string* recipientname_;
  ::std::string* innermessage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_EagleMessageProto_2eproto();
  friend void protobuf_AssignDesc_EagleMessageProto_2eproto();
  friend void protobuf_ShutdownFile_EagleMessageProto_2eproto();

  void InitAsDefaultInstance();
  static EagleMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// EagleMessage

// required string type = 1;
inline bool EagleMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EagleMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EagleMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EagleMessage::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& EagleMessage::type() const {
  return *type_;
}
inline void EagleMessage::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void EagleMessage::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void EagleMessage::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EagleMessage::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* EagleMessage::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EagleMessage::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 dateTime = 4;
inline bool EagleMessage::has_datetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EagleMessage::set_has_datetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EagleMessage::clear_has_datetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EagleMessage::clear_datetime() {
  datetime_ = GOOGLE_LONGLONG(0);
  clear_has_datetime();
}
inline ::google::protobuf::int64 EagleMessage::datetime() const {
  return datetime_;
}
inline void EagleMessage::set_datetime(::google::protobuf::int64 value) {
  set_has_datetime();
  datetime_ = value;
}

// required string senderName = 5;
inline bool EagleMessage::has_sendername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EagleMessage::set_has_sendername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EagleMessage::clear_has_sendername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EagleMessage::clear_sendername() {
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    sendername_->clear();
  }
  clear_has_sendername();
}
inline const ::std::string& EagleMessage::sendername() const {
  return *sendername_;
}
inline void EagleMessage::set_sendername(const ::std::string& value) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(value);
}
inline void EagleMessage::set_sendername(const char* value) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(value);
}
inline void EagleMessage::set_sendername(const char* value, size_t size) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EagleMessage::mutable_sendername() {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  return sendername_;
}
inline ::std::string* EagleMessage::release_sendername() {
  clear_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendername_;
    sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EagleMessage::set_allocated_sendername(::std::string* sendername) {
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (sendername) {
    set_has_sendername();
    sendername_ = sendername;
  } else {
    clear_has_sendername();
    sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string label = 6;
inline int EagleMessage::label_size() const {
  return label_.size();
}
inline void EagleMessage::clear_label() {
  label_.Clear();
}
inline const ::std::string& EagleMessage::label(int index) const {
  return label_.Get(index);
}
inline ::std::string* EagleMessage::mutable_label(int index) {
  return label_.Mutable(index);
}
inline void EagleMessage::set_label(int index, const ::std::string& value) {
  label_.Mutable(index)->assign(value);
}
inline void EagleMessage::set_label(int index, const char* value) {
  label_.Mutable(index)->assign(value);
}
inline void EagleMessage::set_label(int index, const char* value, size_t size) {
  label_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EagleMessage::add_label() {
  return label_.Add();
}
inline void EagleMessage::add_label(const ::std::string& value) {
  label_.Add()->assign(value);
}
inline void EagleMessage::add_label(const char* value) {
  label_.Add()->assign(value);
}
inline void EagleMessage::add_label(const char* value, size_t size) {
  label_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EagleMessage::label() const {
  return label_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EagleMessage::mutable_label() {
  return &label_;
}

// optional string recipientName = 7;
inline bool EagleMessage::has_recipientname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EagleMessage::set_has_recipientname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EagleMessage::clear_has_recipientname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EagleMessage::clear_recipientname() {
  if (recipientname_ != &::google::protobuf::internal::kEmptyString) {
    recipientname_->clear();
  }
  clear_has_recipientname();
}
inline const ::std::string& EagleMessage::recipientname() const {
  return *recipientname_;
}
inline void EagleMessage::set_recipientname(const ::std::string& value) {
  set_has_recipientname();
  if (recipientname_ == &::google::protobuf::internal::kEmptyString) {
    recipientname_ = new ::std::string;
  }
  recipientname_->assign(value);
}
inline void EagleMessage::set_recipientname(const char* value) {
  set_has_recipientname();
  if (recipientname_ == &::google::protobuf::internal::kEmptyString) {
    recipientname_ = new ::std::string;
  }
  recipientname_->assign(value);
}
inline void EagleMessage::set_recipientname(const char* value, size_t size) {
  set_has_recipientname();
  if (recipientname_ == &::google::protobuf::internal::kEmptyString) {
    recipientname_ = new ::std::string;
  }
  recipientname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EagleMessage::mutable_recipientname() {
  set_has_recipientname();
  if (recipientname_ == &::google::protobuf::internal::kEmptyString) {
    recipientname_ = new ::std::string;
  }
  return recipientname_;
}
inline ::std::string* EagleMessage::release_recipientname() {
  clear_has_recipientname();
  if (recipientname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = recipientname_;
    recipientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EagleMessage::set_allocated_recipientname(::std::string* recipientname) {
  if (recipientname_ != &::google::protobuf::internal::kEmptyString) {
    delete recipientname_;
  }
  if (recipientname) {
    set_has_recipientname();
    recipientname_ = recipientname;
  } else {
    clear_has_recipientname();
    recipientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes innerMessage = 8;
inline bool EagleMessage::has_innermessage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EagleMessage::set_has_innermessage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EagleMessage::clear_has_innermessage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EagleMessage::clear_innermessage() {
  if (innermessage_ != &::google::protobuf::internal::kEmptyString) {
    innermessage_->clear();
  }
  clear_has_innermessage();
}
inline const ::std::string& EagleMessage::innermessage() const {
  return *innermessage_;
}
inline void EagleMessage::set_innermessage(const ::std::string& value) {
  set_has_innermessage();
  if (innermessage_ == &::google::protobuf::internal::kEmptyString) {
    innermessage_ = new ::std::string;
  }
  innermessage_->assign(value);
}
inline void EagleMessage::set_innermessage(const char* value) {
  set_has_innermessage();
  if (innermessage_ == &::google::protobuf::internal::kEmptyString) {
    innermessage_ = new ::std::string;
  }
  innermessage_->assign(value);
}
inline void EagleMessage::set_innermessage(const void* value, size_t size) {
  set_has_innermessage();
  if (innermessage_ == &::google::protobuf::internal::kEmptyString) {
    innermessage_ = new ::std::string;
  }
  innermessage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EagleMessage::mutable_innermessage() {
  set_has_innermessage();
  if (innermessage_ == &::google::protobuf::internal::kEmptyString) {
    innermessage_ = new ::std::string;
  }
  return innermessage_;
}
inline ::std::string* EagleMessage::release_innermessage() {
  clear_has_innermessage();
  if (innermessage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = innermessage_;
    innermessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EagleMessage::set_allocated_innermessage(::std::string* innermessage) {
  if (innermessage_ != &::google::protobuf::internal::kEmptyString) {
    delete innermessage_;
  }
  if (innermessage) {
    set_has_innermessage();
    innermessage_ = innermessage;
  } else {
    clear_has_innermessage();
    innermessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EMS

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EagleMessageProto_2eproto__INCLUDED
