// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceMessageProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServiceMessageProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace EMS {

namespace {

const ::google::protobuf::Descriptor* ServiceMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceMessage_ErrorMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceMessage_ErrorMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServiceMessage_ErrorMessage_ErrorType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ServiceMessage_ConnectMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceMessage_ConnectMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceMessage_SubscribeByNameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceMessage_SubscribeByNameMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceMessage_SubscribeByLabelMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceMessage_SubscribeByLabelMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServiceMessage_MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServiceMessageProto_2eproto() {
  protobuf_AddDesc_ServiceMessageProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServiceMessageProto.proto");
  GOOGLE_CHECK(file != NULL);
  ServiceMessage_descriptor_ = file->message_type(0);
  static const int ServiceMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage, connectmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage, subscribenamemessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage, subscribelabelmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage, errormessage_),
  };
  ServiceMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceMessage_descriptor_,
      ServiceMessage::default_instance_,
      ServiceMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceMessage));
  ServiceMessage_ErrorMessage_descriptor_ = ServiceMessage_descriptor_->nested_type(0);
  static const int ServiceMessage_ErrorMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage_ErrorMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage_ErrorMessage, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage_ErrorMessage, noreconnect_),
  };
  ServiceMessage_ErrorMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceMessage_ErrorMessage_descriptor_,
      ServiceMessage_ErrorMessage::default_instance_,
      ServiceMessage_ErrorMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage_ErrorMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage_ErrorMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceMessage_ErrorMessage));
  ServiceMessage_ErrorMessage_ErrorType_descriptor_ = ServiceMessage_ErrorMessage_descriptor_->enum_type(0);
  ServiceMessage_ConnectMessage_descriptor_ = ServiceMessage_descriptor_->nested_type(1);
  static const int ServiceMessage_ConnectMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage_ConnectMessage, clientname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage_ConnectMessage, maxmessagesize_),
  };
  ServiceMessage_ConnectMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceMessage_ConnectMessage_descriptor_,
      ServiceMessage_ConnectMessage::default_instance_,
      ServiceMessage_ConnectMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage_ConnectMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage_ConnectMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceMessage_ConnectMessage));
  ServiceMessage_SubscribeByNameMessage_descriptor_ = ServiceMessage_descriptor_->nested_type(2);
  static const int ServiceMessage_SubscribeByNameMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage_SubscribeByNameMessage, sendername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage_SubscribeByNameMessage, subscribe_),
  };
  ServiceMessage_SubscribeByNameMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceMessage_SubscribeByNameMessage_descriptor_,
      ServiceMessage_SubscribeByNameMessage::default_instance_,
      ServiceMessage_SubscribeByNameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage_SubscribeByNameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage_SubscribeByNameMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceMessage_SubscribeByNameMessage));
  ServiceMessage_SubscribeByLabelMessage_descriptor_ = ServiceMessage_descriptor_->nested_type(3);
  static const int ServiceMessage_SubscribeByLabelMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage_SubscribeByLabelMessage, labelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage_SubscribeByLabelMessage, subscribe_),
  };
  ServiceMessage_SubscribeByLabelMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceMessage_SubscribeByLabelMessage_descriptor_,
      ServiceMessage_SubscribeByLabelMessage::default_instance_,
      ServiceMessage_SubscribeByLabelMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage_SubscribeByLabelMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceMessage_SubscribeByLabelMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceMessage_SubscribeByLabelMessage));
  ServiceMessage_MessageType_descriptor_ = ServiceMessage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServiceMessageProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceMessage_descriptor_, &ServiceMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceMessage_ErrorMessage_descriptor_, &ServiceMessage_ErrorMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceMessage_ConnectMessage_descriptor_, &ServiceMessage_ConnectMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceMessage_SubscribeByNameMessage_descriptor_, &ServiceMessage_SubscribeByNameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceMessage_SubscribeByLabelMessage_descriptor_, &ServiceMessage_SubscribeByLabelMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServiceMessageProto_2eproto() {
  delete ServiceMessage::default_instance_;
  delete ServiceMessage_reflection_;
  delete ServiceMessage_ErrorMessage::default_instance_;
  delete ServiceMessage_ErrorMessage_reflection_;
  delete ServiceMessage_ConnectMessage::default_instance_;
  delete ServiceMessage_ConnectMessage_reflection_;
  delete ServiceMessage_SubscribeByNameMessage::default_instance_;
  delete ServiceMessage_SubscribeByNameMessage_reflection_;
  delete ServiceMessage_SubscribeByLabelMessage::default_instance_;
  delete ServiceMessage_SubscribeByLabelMessage_reflection_;
}

void protobuf_AddDesc_ServiceMessageProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031ServiceMessageProto.proto\022\003EMS\"\223\007\n\016Ser"
    "viceMessage\022-\n\004type\030\001 \002(\0162\037.EMS.ServiceM"
    "essage.MessageType\022;\n\016connectMessage\030\351\007 "
    "\001(\0132\".EMS.ServiceMessage.ConnectMessage\022"
    "I\n\024subscribeNameMessage\030\352\007 \001(\0132*.EMS.Ser"
    "viceMessage.SubscribeByNameMessage\022K\n\025su"
    "bscribeLabelMessage\030\353\007 \001(\0132+.EMS.Service"
    "Message.SubscribeByLabelMessage\0227\n\014error"
    "Message\030\354\007 \001(\0132 .EMS.ServiceMessage.Erro"
    "rMessage\032\200\002\n\014ErrorMessage\0228\n\004type\030\001 \002(\0162"
    "*.EMS.ServiceMessage.ErrorMessage.ErrorT"
    "ype\022\023\n\013description\030\002 \002(\t\022\032\n\013noReconnect\030"
    "\003 \001(\010:\005false\"\204\001\n\tErrorType\022\030\n\024SUBSCRIBE_"
    "WRONG_NAME\020\001\022\025\n\021SENDER_WRONG_NAME\020\002\022\027\n\023C"
    "ONNECT_OTHER_PLACE\020\003\022\026\n\022CONNECT_OTHER_NA"
    "ME\020\004\022\025\n\021CONNECT_SAME_NAME\020\005\032C\n\016ConnectMe"
    "ssage\022\022\n\nclientName\030\001 \002(\t\022\035\n\016maxMessageS"
    "ize\030\002 \001(\005:\00510000\032E\n\026SubscribeByNameMessa"
    "ge\022\022\n\nsenderName\030\001 \002(\t\022\027\n\tsubscribe\030\002 \001("
    "\010:\004true\032E\n\027SubscribeByLabelMessage\022\021\n\tla"
    "belName\030\001 \003(\t\022\027\n\tsubscribe\030\002 \001(\010:\004true\"n"
    "\n\013MessageType\022\023\n\017CONNECT_MESSAGE\020\000\022\032\n\026SU"
    "BSCRIBE_NAME_MESSAGE\020\001\022\033\n\027SUBSCRIBE_LABE"
    "L_MESSAGE\020\002\022\021\n\rERROR_MESSAGE\020\003B\032\n\003EMSB\023S"
    "erviceMessageProto", 978);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServiceMessageProto.proto", &protobuf_RegisterTypes);
  ServiceMessage::default_instance_ = new ServiceMessage();
  ServiceMessage_ErrorMessage::default_instance_ = new ServiceMessage_ErrorMessage();
  ServiceMessage_ConnectMessage::default_instance_ = new ServiceMessage_ConnectMessage();
  ServiceMessage_SubscribeByNameMessage::default_instance_ = new ServiceMessage_SubscribeByNameMessage();
  ServiceMessage_SubscribeByLabelMessage::default_instance_ = new ServiceMessage_SubscribeByLabelMessage();
  ServiceMessage::default_instance_->InitAsDefaultInstance();
  ServiceMessage_ErrorMessage::default_instance_->InitAsDefaultInstance();
  ServiceMessage_ConnectMessage::default_instance_->InitAsDefaultInstance();
  ServiceMessage_SubscribeByNameMessage::default_instance_->InitAsDefaultInstance();
  ServiceMessage_SubscribeByLabelMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServiceMessageProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServiceMessageProto_2eproto {
  StaticDescriptorInitializer_ServiceMessageProto_2eproto() {
    protobuf_AddDesc_ServiceMessageProto_2eproto();
  }
} static_descriptor_initializer_ServiceMessageProto_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ServiceMessage_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceMessage_MessageType_descriptor_;
}
bool ServiceMessage_MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ServiceMessage_MessageType ServiceMessage::CONNECT_MESSAGE;
const ServiceMessage_MessageType ServiceMessage::SUBSCRIBE_NAME_MESSAGE;
const ServiceMessage_MessageType ServiceMessage::SUBSCRIBE_LABEL_MESSAGE;
const ServiceMessage_MessageType ServiceMessage::ERROR_MESSAGE;
const ServiceMessage_MessageType ServiceMessage::MessageType_MIN;
const ServiceMessage_MessageType ServiceMessage::MessageType_MAX;
const int ServiceMessage::MessageType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ServiceMessage_ErrorMessage_ErrorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceMessage_ErrorMessage_ErrorType_descriptor_;
}
bool ServiceMessage_ErrorMessage_ErrorType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ServiceMessage_ErrorMessage_ErrorType ServiceMessage_ErrorMessage::SUBSCRIBE_WRONG_NAME;
const ServiceMessage_ErrorMessage_ErrorType ServiceMessage_ErrorMessage::SENDER_WRONG_NAME;
const ServiceMessage_ErrorMessage_ErrorType ServiceMessage_ErrorMessage::CONNECT_OTHER_PLACE;
const ServiceMessage_ErrorMessage_ErrorType ServiceMessage_ErrorMessage::CONNECT_OTHER_NAME;
const ServiceMessage_ErrorMessage_ErrorType ServiceMessage_ErrorMessage::CONNECT_SAME_NAME;
const ServiceMessage_ErrorMessage_ErrorType ServiceMessage_ErrorMessage::ErrorType_MIN;
const ServiceMessage_ErrorMessage_ErrorType ServiceMessage_ErrorMessage::ErrorType_MAX;
const int ServiceMessage_ErrorMessage::ErrorType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ServiceMessage_ErrorMessage::kTypeFieldNumber;
const int ServiceMessage_ErrorMessage::kDescriptionFieldNumber;
const int ServiceMessage_ErrorMessage::kNoReconnectFieldNumber;
#endif  // !_MSC_VER

ServiceMessage_ErrorMessage::ServiceMessage_ErrorMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceMessage_ErrorMessage::InitAsDefaultInstance() {
}

ServiceMessage_ErrorMessage::ServiceMessage_ErrorMessage(const ServiceMessage_ErrorMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceMessage_ErrorMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  noreconnect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceMessage_ErrorMessage::~ServiceMessage_ErrorMessage() {
  SharedDtor();
}

void ServiceMessage_ErrorMessage::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void ServiceMessage_ErrorMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceMessage_ErrorMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceMessage_ErrorMessage_descriptor_;
}

const ServiceMessage_ErrorMessage& ServiceMessage_ErrorMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceMessageProto_2eproto();
  return *default_instance_;
}

ServiceMessage_ErrorMessage* ServiceMessage_ErrorMessage::default_instance_ = NULL;

ServiceMessage_ErrorMessage* ServiceMessage_ErrorMessage::New() const {
  return new ServiceMessage_ErrorMessage;
}

void ServiceMessage_ErrorMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    noreconnect_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceMessage_ErrorMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EMS.ServiceMessage.ErrorMessage.ErrorType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EMS::ServiceMessage_ErrorMessage_ErrorType_IsValid(value)) {
            set_type(static_cast< ::EMS::ServiceMessage_ErrorMessage_ErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // required string description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_noReconnect;
        break;
      }

      // optional bool noReconnect = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noReconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &noreconnect_)));
          set_has_noreconnect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceMessage_ErrorMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EMS.ServiceMessage.ErrorMessage.ErrorType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->description(), output);
  }

  // optional bool noReconnect = 3 [default = false];
  if (has_noreconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->noreconnect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceMessage_ErrorMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EMS.ServiceMessage.ErrorMessage.ErrorType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional bool noReconnect = 3 [default = false];
  if (has_noreconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->noreconnect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceMessage_ErrorMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EMS.ServiceMessage.ErrorMessage.ErrorType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional bool noReconnect = 3 [default = false];
    if (has_noreconnect()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceMessage_ErrorMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceMessage_ErrorMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceMessage_ErrorMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceMessage_ErrorMessage::MergeFrom(const ServiceMessage_ErrorMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_noreconnect()) {
      set_noreconnect(from.noreconnect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceMessage_ErrorMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceMessage_ErrorMessage::CopyFrom(const ServiceMessage_ErrorMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceMessage_ErrorMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ServiceMessage_ErrorMessage::Swap(ServiceMessage_ErrorMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(description_, other->description_);
    std::swap(noreconnect_, other->noreconnect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceMessage_ErrorMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceMessage_ErrorMessage_descriptor_;
  metadata.reflection = ServiceMessage_ErrorMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServiceMessage_ConnectMessage::kClientNameFieldNumber;
const int ServiceMessage_ConnectMessage::kMaxMessageSizeFieldNumber;
#endif  // !_MSC_VER

ServiceMessage_ConnectMessage::ServiceMessage_ConnectMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceMessage_ConnectMessage::InitAsDefaultInstance() {
}

ServiceMessage_ConnectMessage::ServiceMessage_ConnectMessage(const ServiceMessage_ConnectMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceMessage_ConnectMessage::SharedCtor() {
  _cached_size_ = 0;
  clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxmessagesize_ = 10000;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceMessage_ConnectMessage::~ServiceMessage_ConnectMessage() {
  SharedDtor();
}

void ServiceMessage_ConnectMessage::SharedDtor() {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (this != default_instance_) {
  }
}

void ServiceMessage_ConnectMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceMessage_ConnectMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceMessage_ConnectMessage_descriptor_;
}

const ServiceMessage_ConnectMessage& ServiceMessage_ConnectMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceMessageProto_2eproto();
  return *default_instance_;
}

ServiceMessage_ConnectMessage* ServiceMessage_ConnectMessage::default_instance_ = NULL;

ServiceMessage_ConnectMessage* ServiceMessage_ConnectMessage::New() const {
  return new ServiceMessage_ConnectMessage;
}

void ServiceMessage_ConnectMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clientname()) {
      if (clientname_ != &::google::protobuf::internal::kEmptyString) {
        clientname_->clear();
      }
    }
    maxmessagesize_ = 10000;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceMessage_ConnectMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string clientName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientname().data(), this->clientname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxMessageSize;
        break;
      }

      // optional int32 maxMessageSize = 2 [default = 10000];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxMessageSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmessagesize_)));
          set_has_maxmessagesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceMessage_ConnectMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string clientName = 1;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->clientname(), output);
  }

  // optional int32 maxMessageSize = 2 [default = 10000];
  if (has_maxmessagesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxmessagesize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceMessage_ConnectMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string clientName = 1;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientname(), target);
  }

  // optional int32 maxMessageSize = 2 [default = 10000];
  if (has_maxmessagesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxmessagesize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceMessage_ConnectMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string clientName = 1;
    if (has_clientname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientname());
    }

    // optional int32 maxMessageSize = 2 [default = 10000];
    if (has_maxmessagesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxmessagesize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceMessage_ConnectMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceMessage_ConnectMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceMessage_ConnectMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceMessage_ConnectMessage::MergeFrom(const ServiceMessage_ConnectMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientname()) {
      set_clientname(from.clientname());
    }
    if (from.has_maxmessagesize()) {
      set_maxmessagesize(from.maxmessagesize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceMessage_ConnectMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceMessage_ConnectMessage::CopyFrom(const ServiceMessage_ConnectMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceMessage_ConnectMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServiceMessage_ConnectMessage::Swap(ServiceMessage_ConnectMessage* other) {
  if (other != this) {
    std::swap(clientname_, other->clientname_);
    std::swap(maxmessagesize_, other->maxmessagesize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceMessage_ConnectMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceMessage_ConnectMessage_descriptor_;
  metadata.reflection = ServiceMessage_ConnectMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServiceMessage_SubscribeByNameMessage::kSenderNameFieldNumber;
const int ServiceMessage_SubscribeByNameMessage::kSubscribeFieldNumber;
#endif  // !_MSC_VER

ServiceMessage_SubscribeByNameMessage::ServiceMessage_SubscribeByNameMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceMessage_SubscribeByNameMessage::InitAsDefaultInstance() {
}

ServiceMessage_SubscribeByNameMessage::ServiceMessage_SubscribeByNameMessage(const ServiceMessage_SubscribeByNameMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceMessage_SubscribeByNameMessage::SharedCtor() {
  _cached_size_ = 0;
  sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subscribe_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceMessage_SubscribeByNameMessage::~ServiceMessage_SubscribeByNameMessage() {
  SharedDtor();
}

void ServiceMessage_SubscribeByNameMessage::SharedDtor() {
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (this != default_instance_) {
  }
}

void ServiceMessage_SubscribeByNameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceMessage_SubscribeByNameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceMessage_SubscribeByNameMessage_descriptor_;
}

const ServiceMessage_SubscribeByNameMessage& ServiceMessage_SubscribeByNameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceMessageProto_2eproto();
  return *default_instance_;
}

ServiceMessage_SubscribeByNameMessage* ServiceMessage_SubscribeByNameMessage::default_instance_ = NULL;

ServiceMessage_SubscribeByNameMessage* ServiceMessage_SubscribeByNameMessage::New() const {
  return new ServiceMessage_SubscribeByNameMessage;
}

void ServiceMessage_SubscribeByNameMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sendername()) {
      if (sendername_ != &::google::protobuf::internal::kEmptyString) {
        sendername_->clear();
      }
    }
    subscribe_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceMessage_SubscribeByNameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string senderName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendername().data(), this->sendername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_subscribe;
        break;
      }

      // optional bool subscribe = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subscribe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &subscribe_)));
          set_has_subscribe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceMessage_SubscribeByNameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string senderName = 1;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sendername(), output);
  }

  // optional bool subscribe = 2 [default = true];
  if (has_subscribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->subscribe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceMessage_SubscribeByNameMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string senderName = 1;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sendername(), target);
  }

  // optional bool subscribe = 2 [default = true];
  if (has_subscribe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->subscribe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceMessage_SubscribeByNameMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string senderName = 1;
    if (has_sendername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendername());
    }

    // optional bool subscribe = 2 [default = true];
    if (has_subscribe()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceMessage_SubscribeByNameMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceMessage_SubscribeByNameMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceMessage_SubscribeByNameMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceMessage_SubscribeByNameMessage::MergeFrom(const ServiceMessage_SubscribeByNameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendername()) {
      set_sendername(from.sendername());
    }
    if (from.has_subscribe()) {
      set_subscribe(from.subscribe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceMessage_SubscribeByNameMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceMessage_SubscribeByNameMessage::CopyFrom(const ServiceMessage_SubscribeByNameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceMessage_SubscribeByNameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServiceMessage_SubscribeByNameMessage::Swap(ServiceMessage_SubscribeByNameMessage* other) {
  if (other != this) {
    std::swap(sendername_, other->sendername_);
    std::swap(subscribe_, other->subscribe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceMessage_SubscribeByNameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceMessage_SubscribeByNameMessage_descriptor_;
  metadata.reflection = ServiceMessage_SubscribeByNameMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServiceMessage_SubscribeByLabelMessage::kLabelNameFieldNumber;
const int ServiceMessage_SubscribeByLabelMessage::kSubscribeFieldNumber;
#endif  // !_MSC_VER

ServiceMessage_SubscribeByLabelMessage::ServiceMessage_SubscribeByLabelMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceMessage_SubscribeByLabelMessage::InitAsDefaultInstance() {
}

ServiceMessage_SubscribeByLabelMessage::ServiceMessage_SubscribeByLabelMessage(const ServiceMessage_SubscribeByLabelMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceMessage_SubscribeByLabelMessage::SharedCtor() {
  _cached_size_ = 0;
  subscribe_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceMessage_SubscribeByLabelMessage::~ServiceMessage_SubscribeByLabelMessage() {
  SharedDtor();
}

void ServiceMessage_SubscribeByLabelMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServiceMessage_SubscribeByLabelMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceMessage_SubscribeByLabelMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceMessage_SubscribeByLabelMessage_descriptor_;
}

const ServiceMessage_SubscribeByLabelMessage& ServiceMessage_SubscribeByLabelMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceMessageProto_2eproto();
  return *default_instance_;
}

ServiceMessage_SubscribeByLabelMessage* ServiceMessage_SubscribeByLabelMessage::default_instance_ = NULL;

ServiceMessage_SubscribeByLabelMessage* ServiceMessage_SubscribeByLabelMessage::New() const {
  return new ServiceMessage_SubscribeByLabelMessage;
}

void ServiceMessage_SubscribeByLabelMessage::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    subscribe_ = true;
  }
  labelname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceMessage_SubscribeByLabelMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string labelName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_labelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->labelname(this->labelname_size() - 1).data(),
            this->labelname(this->labelname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_labelName;
        if (input->ExpectTag(16)) goto parse_subscribe;
        break;
      }

      // optional bool subscribe = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subscribe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &subscribe_)));
          set_has_subscribe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceMessage_SubscribeByLabelMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string labelName = 1;
  for (int i = 0; i < this->labelname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->labelname(i).data(), this->labelname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->labelname(i), output);
  }

  // optional bool subscribe = 2 [default = true];
  if (has_subscribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->subscribe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceMessage_SubscribeByLabelMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string labelName = 1;
  for (int i = 0; i < this->labelname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->labelname(i).data(), this->labelname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->labelname(i), target);
  }

  // optional bool subscribe = 2 [default = true];
  if (has_subscribe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->subscribe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceMessage_SubscribeByLabelMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool subscribe = 2 [default = true];
    if (has_subscribe()) {
      total_size += 1 + 1;
    }

  }
  // repeated string labelName = 1;
  total_size += 1 * this->labelname_size();
  for (int i = 0; i < this->labelname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labelname(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceMessage_SubscribeByLabelMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceMessage_SubscribeByLabelMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceMessage_SubscribeByLabelMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceMessage_SubscribeByLabelMessage::MergeFrom(const ServiceMessage_SubscribeByLabelMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  labelname_.MergeFrom(from.labelname_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_subscribe()) {
      set_subscribe(from.subscribe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceMessage_SubscribeByLabelMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceMessage_SubscribeByLabelMessage::CopyFrom(const ServiceMessage_SubscribeByLabelMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceMessage_SubscribeByLabelMessage::IsInitialized() const {

  return true;
}

void ServiceMessage_SubscribeByLabelMessage::Swap(ServiceMessage_SubscribeByLabelMessage* other) {
  if (other != this) {
    labelname_.Swap(&other->labelname_);
    std::swap(subscribe_, other->subscribe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceMessage_SubscribeByLabelMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceMessage_SubscribeByLabelMessage_descriptor_;
  metadata.reflection = ServiceMessage_SubscribeByLabelMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServiceMessage::kTypeFieldNumber;
const int ServiceMessage::kConnectMessageFieldNumber;
const int ServiceMessage::kSubscribeNameMessageFieldNumber;
const int ServiceMessage::kSubscribeLabelMessageFieldNumber;
const int ServiceMessage::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

ServiceMessage::ServiceMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceMessage::InitAsDefaultInstance() {
  connectmessage_ = const_cast< ::EMS::ServiceMessage_ConnectMessage*>(&::EMS::ServiceMessage_ConnectMessage::default_instance());
  subscribenamemessage_ = const_cast< ::EMS::ServiceMessage_SubscribeByNameMessage*>(&::EMS::ServiceMessage_SubscribeByNameMessage::default_instance());
  subscribelabelmessage_ = const_cast< ::EMS::ServiceMessage_SubscribeByLabelMessage*>(&::EMS::ServiceMessage_SubscribeByLabelMessage::default_instance());
  errormessage_ = const_cast< ::EMS::ServiceMessage_ErrorMessage*>(&::EMS::ServiceMessage_ErrorMessage::default_instance());
}

ServiceMessage::ServiceMessage(const ServiceMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  connectmessage_ = NULL;
  subscribenamemessage_ = NULL;
  subscribelabelmessage_ = NULL;
  errormessage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceMessage::~ServiceMessage() {
  SharedDtor();
}

void ServiceMessage::SharedDtor() {
  if (this != default_instance_) {
    delete connectmessage_;
    delete subscribenamemessage_;
    delete subscribelabelmessage_;
    delete errormessage_;
  }
}

void ServiceMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceMessage_descriptor_;
}

const ServiceMessage& ServiceMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceMessageProto_2eproto();
  return *default_instance_;
}

ServiceMessage* ServiceMessage::default_instance_ = NULL;

ServiceMessage* ServiceMessage::New() const {
  return new ServiceMessage;
}

void ServiceMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_connectmessage()) {
      if (connectmessage_ != NULL) connectmessage_->::EMS::ServiceMessage_ConnectMessage::Clear();
    }
    if (has_subscribenamemessage()) {
      if (subscribenamemessage_ != NULL) subscribenamemessage_->::EMS::ServiceMessage_SubscribeByNameMessage::Clear();
    }
    if (has_subscribelabelmessage()) {
      if (subscribelabelmessage_ != NULL) subscribelabelmessage_->::EMS::ServiceMessage_SubscribeByLabelMessage::Clear();
    }
    if (has_errormessage()) {
      if (errormessage_ != NULL) errormessage_->::EMS::ServiceMessage_ErrorMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EMS.ServiceMessage.MessageType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EMS::ServiceMessage_MessageType_IsValid(value)) {
            set_type(static_cast< ::EMS::ServiceMessage_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8010)) goto parse_connectMessage;
        break;
      }

      // optional .EMS.ServiceMessage.ConnectMessage connectMessage = 1001;
      case 1001: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connectMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connectmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8018)) goto parse_subscribeNameMessage;
        break;
      }

      // optional .EMS.ServiceMessage.SubscribeByNameMessage subscribeNameMessage = 1002;
      case 1002: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscribeNameMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscribenamemessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8026)) goto parse_subscribeLabelMessage;
        break;
      }

      // optional .EMS.ServiceMessage.SubscribeByLabelMessage subscribeLabelMessage = 1003;
      case 1003: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscribeLabelMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscribelabelmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8034)) goto parse_errorMessage;
        break;
      }

      // optional .EMS.ServiceMessage.ErrorMessage errorMessage = 1004;
      case 1004: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errormessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EMS.ServiceMessage.MessageType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .EMS.ServiceMessage.ConnectMessage connectMessage = 1001;
  if (has_connectmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, this->connectmessage(), output);
  }

  // optional .EMS.ServiceMessage.SubscribeByNameMessage subscribeNameMessage = 1002;
  if (has_subscribenamemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1002, this->subscribenamemessage(), output);
  }

  // optional .EMS.ServiceMessage.SubscribeByLabelMessage subscribeLabelMessage = 1003;
  if (has_subscribelabelmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1003, this->subscribelabelmessage(), output);
  }

  // optional .EMS.ServiceMessage.ErrorMessage errorMessage = 1004;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1004, this->errormessage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EMS.ServiceMessage.MessageType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .EMS.ServiceMessage.ConnectMessage connectMessage = 1001;
  if (has_connectmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1001, this->connectmessage(), target);
  }

  // optional .EMS.ServiceMessage.SubscribeByNameMessage subscribeNameMessage = 1002;
  if (has_subscribenamemessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1002, this->subscribenamemessage(), target);
  }

  // optional .EMS.ServiceMessage.SubscribeByLabelMessage subscribeLabelMessage = 1003;
  if (has_subscribelabelmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1003, this->subscribelabelmessage(), target);
  }

  // optional .EMS.ServiceMessage.ErrorMessage errorMessage = 1004;
  if (has_errormessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1004, this->errormessage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EMS.ServiceMessage.MessageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .EMS.ServiceMessage.ConnectMessage connectMessage = 1001;
    if (has_connectmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connectmessage());
    }

    // optional .EMS.ServiceMessage.SubscribeByNameMessage subscribeNameMessage = 1002;
    if (has_subscribenamemessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subscribenamemessage());
    }

    // optional .EMS.ServiceMessage.SubscribeByLabelMessage subscribeLabelMessage = 1003;
    if (has_subscribelabelmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subscribelabelmessage());
    }

    // optional .EMS.ServiceMessage.ErrorMessage errorMessage = 1004;
    if (has_errormessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->errormessage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceMessage::MergeFrom(const ServiceMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_connectmessage()) {
      mutable_connectmessage()->::EMS::ServiceMessage_ConnectMessage::MergeFrom(from.connectmessage());
    }
    if (from.has_subscribenamemessage()) {
      mutable_subscribenamemessage()->::EMS::ServiceMessage_SubscribeByNameMessage::MergeFrom(from.subscribenamemessage());
    }
    if (from.has_subscribelabelmessage()) {
      mutable_subscribelabelmessage()->::EMS::ServiceMessage_SubscribeByLabelMessage::MergeFrom(from.subscribelabelmessage());
    }
    if (from.has_errormessage()) {
      mutable_errormessage()->::EMS::ServiceMessage_ErrorMessage::MergeFrom(from.errormessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceMessage::CopyFrom(const ServiceMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_connectmessage()) {
    if (!this->connectmessage().IsInitialized()) return false;
  }
  if (has_subscribenamemessage()) {
    if (!this->subscribenamemessage().IsInitialized()) return false;
  }
  if (has_errormessage()) {
    if (!this->errormessage().IsInitialized()) return false;
  }
  return true;
}

void ServiceMessage::Swap(ServiceMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(connectmessage_, other->connectmessage_);
    std::swap(subscribenamemessage_, other->subscribenamemessage_);
    std::swap(subscribelabelmessage_, other->subscribelabelmessage_);
    std::swap(errormessage_, other->errormessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceMessage_descriptor_;
  metadata.reflection = ServiceMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EMS

// @@protoc_insertion_point(global_scope)
