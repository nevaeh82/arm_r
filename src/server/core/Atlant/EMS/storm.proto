package Storm;
option optimize_for = LITE_RUNTIME;
//запрос пеленгования одного источника
// "DIRECTION_FINDING_REQUEST"
message DirectionFindingRequest
{
	//id Запроса, используется в ответе
	required int32 id = 1;

	//центральная частота / набор ППРЧ частот
	repeated double frequency = 101;
	//ширина пика
	required double width = 102;
	//
	optional string description = 103;
}

//запрос остановки 
// "DF_STOP_REQUEST"
message DFStopRequest
{
	//id Запроса
	required int32 id = 1;
}

/// "START_STOP_REQUEST"
message StartStopRequest
{
	/// true - start, false - stop
	required bool active = 1;
}

// запрос сканирования
// при сканировании нет местоопределения
// SCAN_REQUEST
message ScanRequest
{
	//id Запроса, используется в ответе
	required int32 id = 1;

	//центральная частота
	required double frequency = 101;
	//ширина полосы
	required double width = 102;
}

// "SCAN_STOP_REQUEST"
message ScanStopRequest
{
	//id Запроса
	required int32 id = 1;
}

// "DIRECTION_ANSWER_MESSAGE"
message DirectionAnswerMessage
{
	//id запроса
	required int32 requestId = 1;
	//id источника, при ответе на DirectionFindingRequest совпадает с айди запроса
	//              при ответе на ScanRequest назначается пеленгатором
	required int32 sourceId = 2;
	//время засечки
	//DateTime.Utc.Now - время в 100наносекундных интервалах начиная с 1 января 1 года
	required int64 dateTime = 3;
	
	//имя поста
	required string post = 101;
	optional double postLatitude = 102;     //GPS Geo Coords
	optional double postLongitude = 103;    //GPS Geo Coords
	optional double postHeight = 104;       //meters
	
	//центральная частота
	required double frequency = 201;
	//ширина пика
	required double widht = 202;

    //пеленг
	required double direction = 301;
	//угол места
	required double angle = 302;
	//уровень
	required double level = 303;
	//качество
	required double quality = 304;

	enum MotionType
	{
		STATIONARY = 0;
		UNDERWAY = 1;
		UNCERTAIN = 2;
		LACKOFDATA = 3;
	}

	optional MotionType motionType = 401;
	optional double motionConfidence = 402;  
}

// POSITION_ANSWER_MESSAGE
message PositionAnswerMessage
{
	//id запроса
	required int32 requestId = 1;
	//id источника, при ответе на DirectionFindingRequest совпадает с айди запроса
	//              при ответе на ScanRequest назначается пеленгатором
	required int32 sourceId = 2;
	//время засечки
	required int64 dateTime = 3;

	 //Geo Coords
	required double longitude = 10;
	 //Geo Coords
	required double latitude = 102;
	 //качество
	required double quality = 103;
}

// "STATUS_MESSAGE"
message StatusMessage
{
	enum StatusType
	{
		// про запас
		NO_ERROR = 0;
		
		// отсутствует пост
		// в postID имя поста
		POST_IS_OFF = 1;
		
		// задания не посместились в 20Mhz
		// в requestID - не поместившееся задание
		TASK_OUT_OUTSIDE_20_MHZ = 2;

		// запрос на удаление несуществующего задания
		NO_TASK_FOR_ID = 3;
	}	

	required StatusType status = 1;
	// человекочитаемое описание
	required string description = 2;
	
	optional int32 requestID = 101;
	optional string postID = 102;
}