// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceMessageProto.proto

#ifndef PROTOBUF_ServiceMessageProto_2eproto__INCLUDED
#define PROTOBUF_ServiceMessageProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace EMS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ServiceMessageProto_2eproto();
void protobuf_AssignDesc_ServiceMessageProto_2eproto();
void protobuf_ShutdownFile_ServiceMessageProto_2eproto();

class ServiceMessage;
class ServiceMessage_ErrorMessage;
class ServiceMessage_ConnectMessage;
class ServiceMessage_SubscribeByNameMessage;
class ServiceMessage_SubscribeByLabelMessage;

enum ServiceMessage_ErrorMessage_ErrorType {
  ServiceMessage_ErrorMessage_ErrorType_SUBSCRIBE_WRONG_NAME = 1,
  ServiceMessage_ErrorMessage_ErrorType_SENDER_WRONG_NAME = 2,
  ServiceMessage_ErrorMessage_ErrorType_CONNECT_OTHER_PLACE = 3,
  ServiceMessage_ErrorMessage_ErrorType_CONNECT_OTHER_NAME = 4,
  ServiceMessage_ErrorMessage_ErrorType_CONNECT_SAME_NAME = 5
};
bool ServiceMessage_ErrorMessage_ErrorType_IsValid(int value);
const ServiceMessage_ErrorMessage_ErrorType ServiceMessage_ErrorMessage_ErrorType_ErrorType_MIN = ServiceMessage_ErrorMessage_ErrorType_SUBSCRIBE_WRONG_NAME;
const ServiceMessage_ErrorMessage_ErrorType ServiceMessage_ErrorMessage_ErrorType_ErrorType_MAX = ServiceMessage_ErrorMessage_ErrorType_CONNECT_SAME_NAME;
const int ServiceMessage_ErrorMessage_ErrorType_ErrorType_ARRAYSIZE = ServiceMessage_ErrorMessage_ErrorType_ErrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServiceMessage_ErrorMessage_ErrorType_descriptor();
inline const ::std::string& ServiceMessage_ErrorMessage_ErrorType_Name(ServiceMessage_ErrorMessage_ErrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServiceMessage_ErrorMessage_ErrorType_descriptor(), value);
}
inline bool ServiceMessage_ErrorMessage_ErrorType_Parse(
    const ::std::string& name, ServiceMessage_ErrorMessage_ErrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceMessage_ErrorMessage_ErrorType>(
    ServiceMessage_ErrorMessage_ErrorType_descriptor(), name, value);
}
enum ServiceMessage_MessageType {
  ServiceMessage_MessageType_CONNECT_MESSAGE = 0,
  ServiceMessage_MessageType_SUBSCRIBE_NAME_MESSAGE = 1,
  ServiceMessage_MessageType_SUBSCRIBE_LABEL_MESSAGE = 2,
  ServiceMessage_MessageType_ERROR_MESSAGE = 3
};
bool ServiceMessage_MessageType_IsValid(int value);
const ServiceMessage_MessageType ServiceMessage_MessageType_MessageType_MIN = ServiceMessage_MessageType_CONNECT_MESSAGE;
const ServiceMessage_MessageType ServiceMessage_MessageType_MessageType_MAX = ServiceMessage_MessageType_ERROR_MESSAGE;
const int ServiceMessage_MessageType_MessageType_ARRAYSIZE = ServiceMessage_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServiceMessage_MessageType_descriptor();
inline const ::std::string& ServiceMessage_MessageType_Name(ServiceMessage_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServiceMessage_MessageType_descriptor(), value);
}
inline bool ServiceMessage_MessageType_Parse(
    const ::std::string& name, ServiceMessage_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceMessage_MessageType>(
    ServiceMessage_MessageType_descriptor(), name, value);
}
// ===================================================================

class ServiceMessage_ErrorMessage : public ::google::protobuf::Message {
 public:
  ServiceMessage_ErrorMessage();
  virtual ~ServiceMessage_ErrorMessage();

  ServiceMessage_ErrorMessage(const ServiceMessage_ErrorMessage& from);

  inline ServiceMessage_ErrorMessage& operator=(const ServiceMessage_ErrorMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceMessage_ErrorMessage& default_instance();

  void Swap(ServiceMessage_ErrorMessage* other);

  // implements Message ----------------------------------------------

  ServiceMessage_ErrorMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceMessage_ErrorMessage& from);
  void MergeFrom(const ServiceMessage_ErrorMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ServiceMessage_ErrorMessage_ErrorType ErrorType;
  static const ErrorType SUBSCRIBE_WRONG_NAME = ServiceMessage_ErrorMessage_ErrorType_SUBSCRIBE_WRONG_NAME;
  static const ErrorType SENDER_WRONG_NAME = ServiceMessage_ErrorMessage_ErrorType_SENDER_WRONG_NAME;
  static const ErrorType CONNECT_OTHER_PLACE = ServiceMessage_ErrorMessage_ErrorType_CONNECT_OTHER_PLACE;
  static const ErrorType CONNECT_OTHER_NAME = ServiceMessage_ErrorMessage_ErrorType_CONNECT_OTHER_NAME;
  static const ErrorType CONNECT_SAME_NAME = ServiceMessage_ErrorMessage_ErrorType_CONNECT_SAME_NAME;
  static inline bool ErrorType_IsValid(int value) {
    return ServiceMessage_ErrorMessage_ErrorType_IsValid(value);
  }
  static const ErrorType ErrorType_MIN =
    ServiceMessage_ErrorMessage_ErrorType_ErrorType_MIN;
  static const ErrorType ErrorType_MAX =
    ServiceMessage_ErrorMessage_ErrorType_ErrorType_MAX;
  static const int ErrorType_ARRAYSIZE =
    ServiceMessage_ErrorMessage_ErrorType_ErrorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorType_descriptor() {
    return ServiceMessage_ErrorMessage_ErrorType_descriptor();
  }
  static inline const ::std::string& ErrorType_Name(ErrorType value) {
    return ServiceMessage_ErrorMessage_ErrorType_Name(value);
  }
  static inline bool ErrorType_Parse(const ::std::string& name,
      ErrorType* value) {
    return ServiceMessage_ErrorMessage_ErrorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .EMS.ServiceMessage.ErrorMessage.ErrorType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::EMS::ServiceMessage_ErrorMessage_ErrorType type() const;
  inline void set_type(::EMS::ServiceMessage_ErrorMessage_ErrorType value);

  // required string description = 2;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 2;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional bool noReconnect = 3 [default = false];
  inline bool has_noreconnect() const;
  inline void clear_noreconnect();
  static const int kNoReconnectFieldNumber = 3;
  inline bool noreconnect() const;
  inline void set_noreconnect(bool value);

  // @@protoc_insertion_point(class_scope:EMS.ServiceMessage.ErrorMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_noreconnect();
  inline void clear_has_noreconnect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* description_;
  int type_;
  bool noreconnect_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ServiceMessageProto_2eproto();
  friend void protobuf_AssignDesc_ServiceMessageProto_2eproto();
  friend void protobuf_ShutdownFile_ServiceMessageProto_2eproto();

  void InitAsDefaultInstance();
  static ServiceMessage_ErrorMessage* default_instance_;
};
// -------------------------------------------------------------------

class ServiceMessage_ConnectMessage : public ::google::protobuf::Message {
 public:
  ServiceMessage_ConnectMessage();
  virtual ~ServiceMessage_ConnectMessage();

  ServiceMessage_ConnectMessage(const ServiceMessage_ConnectMessage& from);

  inline ServiceMessage_ConnectMessage& operator=(const ServiceMessage_ConnectMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceMessage_ConnectMessage& default_instance();

  void Swap(ServiceMessage_ConnectMessage* other);

  // implements Message ----------------------------------------------

  ServiceMessage_ConnectMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceMessage_ConnectMessage& from);
  void MergeFrom(const ServiceMessage_ConnectMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string clientName = 1;
  inline bool has_clientname() const;
  inline void clear_clientname();
  static const int kClientNameFieldNumber = 1;
  inline const ::std::string& clientname() const;
  inline void set_clientname(const ::std::string& value);
  inline void set_clientname(const char* value);
  inline void set_clientname(const char* value, size_t size);
  inline ::std::string* mutable_clientname();
  inline ::std::string* release_clientname();
  inline void set_allocated_clientname(::std::string* clientname);

  // optional int32 maxMessageSize = 2 [default = 10000];
  inline bool has_maxmessagesize() const;
  inline void clear_maxmessagesize();
  static const int kMaxMessageSizeFieldNumber = 2;
  inline ::google::protobuf::int32 maxmessagesize() const;
  inline void set_maxmessagesize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EMS.ServiceMessage.ConnectMessage)
 private:
  inline void set_has_clientname();
  inline void clear_has_clientname();
  inline void set_has_maxmessagesize();
  inline void clear_has_maxmessagesize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* clientname_;
  ::google::protobuf::int32 maxmessagesize_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ServiceMessageProto_2eproto();
  friend void protobuf_AssignDesc_ServiceMessageProto_2eproto();
  friend void protobuf_ShutdownFile_ServiceMessageProto_2eproto();

  void InitAsDefaultInstance();
  static ServiceMessage_ConnectMessage* default_instance_;
};
// -------------------------------------------------------------------

class ServiceMessage_SubscribeByNameMessage : public ::google::protobuf::Message {
 public:
  ServiceMessage_SubscribeByNameMessage();
  virtual ~ServiceMessage_SubscribeByNameMessage();

  ServiceMessage_SubscribeByNameMessage(const ServiceMessage_SubscribeByNameMessage& from);

  inline ServiceMessage_SubscribeByNameMessage& operator=(const ServiceMessage_SubscribeByNameMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceMessage_SubscribeByNameMessage& default_instance();

  void Swap(ServiceMessage_SubscribeByNameMessage* other);

  // implements Message ----------------------------------------------

  ServiceMessage_SubscribeByNameMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceMessage_SubscribeByNameMessage& from);
  void MergeFrom(const ServiceMessage_SubscribeByNameMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string senderName = 1;
  inline bool has_sendername() const;
  inline void clear_sendername();
  static const int kSenderNameFieldNumber = 1;
  inline const ::std::string& sendername() const;
  inline void set_sendername(const ::std::string& value);
  inline void set_sendername(const char* value);
  inline void set_sendername(const char* value, size_t size);
  inline ::std::string* mutable_sendername();
  inline ::std::string* release_sendername();
  inline void set_allocated_sendername(::std::string* sendername);

  // optional bool subscribe = 2 [default = true];
  inline bool has_subscribe() const;
  inline void clear_subscribe();
  static const int kSubscribeFieldNumber = 2;
  inline bool subscribe() const;
  inline void set_subscribe(bool value);

  // @@protoc_insertion_point(class_scope:EMS.ServiceMessage.SubscribeByNameMessage)
 private:
  inline void set_has_sendername();
  inline void clear_has_sendername();
  inline void set_has_subscribe();
  inline void clear_has_subscribe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sendername_;
  bool subscribe_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ServiceMessageProto_2eproto();
  friend void protobuf_AssignDesc_ServiceMessageProto_2eproto();
  friend void protobuf_ShutdownFile_ServiceMessageProto_2eproto();

  void InitAsDefaultInstance();
  static ServiceMessage_SubscribeByNameMessage* default_instance_;
};
// -------------------------------------------------------------------

class ServiceMessage_SubscribeByLabelMessage : public ::google::protobuf::Message {
 public:
  ServiceMessage_SubscribeByLabelMessage();
  virtual ~ServiceMessage_SubscribeByLabelMessage();

  ServiceMessage_SubscribeByLabelMessage(const ServiceMessage_SubscribeByLabelMessage& from);

  inline ServiceMessage_SubscribeByLabelMessage& operator=(const ServiceMessage_SubscribeByLabelMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceMessage_SubscribeByLabelMessage& default_instance();

  void Swap(ServiceMessage_SubscribeByLabelMessage* other);

  // implements Message ----------------------------------------------

  ServiceMessage_SubscribeByLabelMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceMessage_SubscribeByLabelMessage& from);
  void MergeFrom(const ServiceMessage_SubscribeByLabelMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string labelName = 1;
  inline int labelname_size() const;
  inline void clear_labelname();
  static const int kLabelNameFieldNumber = 1;
  inline const ::std::string& labelname(int index) const;
  inline ::std::string* mutable_labelname(int index);
  inline void set_labelname(int index, const ::std::string& value);
  inline void set_labelname(int index, const char* value);
  inline void set_labelname(int index, const char* value, size_t size);
  inline ::std::string* add_labelname();
  inline void add_labelname(const ::std::string& value);
  inline void add_labelname(const char* value);
  inline void add_labelname(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& labelname() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_labelname();

  // optional bool subscribe = 2 [default = true];
  inline bool has_subscribe() const;
  inline void clear_subscribe();
  static const int kSubscribeFieldNumber = 2;
  inline bool subscribe() const;
  inline void set_subscribe(bool value);

  // @@protoc_insertion_point(class_scope:EMS.ServiceMessage.SubscribeByLabelMessage)
 private:
  inline void set_has_subscribe();
  inline void clear_has_subscribe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> labelname_;
  bool subscribe_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ServiceMessageProto_2eproto();
  friend void protobuf_AssignDesc_ServiceMessageProto_2eproto();
  friend void protobuf_ShutdownFile_ServiceMessageProto_2eproto();

  void InitAsDefaultInstance();
  static ServiceMessage_SubscribeByLabelMessage* default_instance_;
};
// -------------------------------------------------------------------

class ServiceMessage : public ::google::protobuf::Message {
 public:
  ServiceMessage();
  virtual ~ServiceMessage();

  ServiceMessage(const ServiceMessage& from);

  inline ServiceMessage& operator=(const ServiceMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceMessage& default_instance();

  void Swap(ServiceMessage* other);

  // implements Message ----------------------------------------------

  ServiceMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceMessage& from);
  void MergeFrom(const ServiceMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ServiceMessage_ErrorMessage ErrorMessage;
  typedef ServiceMessage_ConnectMessage ConnectMessage;
  typedef ServiceMessage_SubscribeByNameMessage SubscribeByNameMessage;
  typedef ServiceMessage_SubscribeByLabelMessage SubscribeByLabelMessage;

  typedef ServiceMessage_MessageType MessageType;
  static const MessageType CONNECT_MESSAGE = ServiceMessage_MessageType_CONNECT_MESSAGE;
  static const MessageType SUBSCRIBE_NAME_MESSAGE = ServiceMessage_MessageType_SUBSCRIBE_NAME_MESSAGE;
  static const MessageType SUBSCRIBE_LABEL_MESSAGE = ServiceMessage_MessageType_SUBSCRIBE_LABEL_MESSAGE;
  static const MessageType ERROR_MESSAGE = ServiceMessage_MessageType_ERROR_MESSAGE;
  static inline bool MessageType_IsValid(int value) {
    return ServiceMessage_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    ServiceMessage_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    ServiceMessage_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    ServiceMessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return ServiceMessage_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return ServiceMessage_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return ServiceMessage_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .EMS.ServiceMessage.MessageType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::EMS::ServiceMessage_MessageType type() const;
  inline void set_type(::EMS::ServiceMessage_MessageType value);

  // optional .EMS.ServiceMessage.ConnectMessage connectMessage = 1001;
  inline bool has_connectmessage() const;
  inline void clear_connectmessage();
  static const int kConnectMessageFieldNumber = 1001;
  inline const ::EMS::ServiceMessage_ConnectMessage& connectmessage() const;
  inline ::EMS::ServiceMessage_ConnectMessage* mutable_connectmessage();
  inline ::EMS::ServiceMessage_ConnectMessage* release_connectmessage();
  inline void set_allocated_connectmessage(::EMS::ServiceMessage_ConnectMessage* connectmessage);

  // optional .EMS.ServiceMessage.SubscribeByNameMessage subscribeNameMessage = 1002;
  inline bool has_subscribenamemessage() const;
  inline void clear_subscribenamemessage();
  static const int kSubscribeNameMessageFieldNumber = 1002;
  inline const ::EMS::ServiceMessage_SubscribeByNameMessage& subscribenamemessage() const;
  inline ::EMS::ServiceMessage_SubscribeByNameMessage* mutable_subscribenamemessage();
  inline ::EMS::ServiceMessage_SubscribeByNameMessage* release_subscribenamemessage();
  inline void set_allocated_subscribenamemessage(::EMS::ServiceMessage_SubscribeByNameMessage* subscribenamemessage);

  // optional .EMS.ServiceMessage.SubscribeByLabelMessage subscribeLabelMessage = 1003;
  inline bool has_subscribelabelmessage() const;
  inline void clear_subscribelabelmessage();
  static const int kSubscribeLabelMessageFieldNumber = 1003;
  inline const ::EMS::ServiceMessage_SubscribeByLabelMessage& subscribelabelmessage() const;
  inline ::EMS::ServiceMessage_SubscribeByLabelMessage* mutable_subscribelabelmessage();
  inline ::EMS::ServiceMessage_SubscribeByLabelMessage* release_subscribelabelmessage();
  inline void set_allocated_subscribelabelmessage(::EMS::ServiceMessage_SubscribeByLabelMessage* subscribelabelmessage);

  // optional .EMS.ServiceMessage.ErrorMessage errorMessage = 1004;
  inline bool has_errormessage() const;
  inline void clear_errormessage();
  static const int kErrorMessageFieldNumber = 1004;
  inline const ::EMS::ServiceMessage_ErrorMessage& errormessage() const;
  inline ::EMS::ServiceMessage_ErrorMessage* mutable_errormessage();
  inline ::EMS::ServiceMessage_ErrorMessage* release_errormessage();
  inline void set_allocated_errormessage(::EMS::ServiceMessage_ErrorMessage* errormessage);

  // @@protoc_insertion_point(class_scope:EMS.ServiceMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_connectmessage();
  inline void clear_has_connectmessage();
  inline void set_has_subscribenamemessage();
  inline void clear_has_subscribenamemessage();
  inline void set_has_subscribelabelmessage();
  inline void clear_has_subscribelabelmessage();
  inline void set_has_errormessage();
  inline void clear_has_errormessage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::EMS::ServiceMessage_ConnectMessage* connectmessage_;
  ::EMS::ServiceMessage_SubscribeByNameMessage* subscribenamemessage_;
  ::EMS::ServiceMessage_SubscribeByLabelMessage* subscribelabelmessage_;
  ::EMS::ServiceMessage_ErrorMessage* errormessage_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ServiceMessageProto_2eproto();
  friend void protobuf_AssignDesc_ServiceMessageProto_2eproto();
  friend void protobuf_ShutdownFile_ServiceMessageProto_2eproto();

  void InitAsDefaultInstance();
  static ServiceMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// ServiceMessage_ErrorMessage

// required .EMS.ServiceMessage.ErrorMessage.ErrorType type = 1;
inline bool ServiceMessage_ErrorMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceMessage_ErrorMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceMessage_ErrorMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceMessage_ErrorMessage::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::EMS::ServiceMessage_ErrorMessage_ErrorType ServiceMessage_ErrorMessage::type() const {
  return static_cast< ::EMS::ServiceMessage_ErrorMessage_ErrorType >(type_);
}
inline void ServiceMessage_ErrorMessage::set_type(::EMS::ServiceMessage_ErrorMessage_ErrorType value) {
  assert(::EMS::ServiceMessage_ErrorMessage_ErrorType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string description = 2;
inline bool ServiceMessage_ErrorMessage::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceMessage_ErrorMessage::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceMessage_ErrorMessage::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceMessage_ErrorMessage::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& ServiceMessage_ErrorMessage::description() const {
  return *description_;
}
inline void ServiceMessage_ErrorMessage::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void ServiceMessage_ErrorMessage::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void ServiceMessage_ErrorMessage::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceMessage_ErrorMessage::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* ServiceMessage_ErrorMessage::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServiceMessage_ErrorMessage::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool noReconnect = 3 [default = false];
inline bool ServiceMessage_ErrorMessage::has_noreconnect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceMessage_ErrorMessage::set_has_noreconnect() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceMessage_ErrorMessage::clear_has_noreconnect() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServiceMessage_ErrorMessage::clear_noreconnect() {
  noreconnect_ = false;
  clear_has_noreconnect();
}
inline bool ServiceMessage_ErrorMessage::noreconnect() const {
  return noreconnect_;
}
inline void ServiceMessage_ErrorMessage::set_noreconnect(bool value) {
  set_has_noreconnect();
  noreconnect_ = value;
}

// -------------------------------------------------------------------

// ServiceMessage_ConnectMessage

// required string clientName = 1;
inline bool ServiceMessage_ConnectMessage::has_clientname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceMessage_ConnectMessage::set_has_clientname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceMessage_ConnectMessage::clear_has_clientname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceMessage_ConnectMessage::clear_clientname() {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    clientname_->clear();
  }
  clear_has_clientname();
}
inline const ::std::string& ServiceMessage_ConnectMessage::clientname() const {
  return *clientname_;
}
inline void ServiceMessage_ConnectMessage::set_clientname(const ::std::string& value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void ServiceMessage_ConnectMessage::set_clientname(const char* value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void ServiceMessage_ConnectMessage::set_clientname(const char* value, size_t size) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceMessage_ConnectMessage::mutable_clientname() {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  return clientname_;
}
inline ::std::string* ServiceMessage_ConnectMessage::release_clientname() {
  clear_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientname_;
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServiceMessage_ConnectMessage::set_allocated_clientname(::std::string* clientname) {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (clientname) {
    set_has_clientname();
    clientname_ = clientname;
  } else {
    clear_has_clientname();
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 maxMessageSize = 2 [default = 10000];
inline bool ServiceMessage_ConnectMessage::has_maxmessagesize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceMessage_ConnectMessage::set_has_maxmessagesize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceMessage_ConnectMessage::clear_has_maxmessagesize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceMessage_ConnectMessage::clear_maxmessagesize() {
  maxmessagesize_ = 10000;
  clear_has_maxmessagesize();
}
inline ::google::protobuf::int32 ServiceMessage_ConnectMessage::maxmessagesize() const {
  return maxmessagesize_;
}
inline void ServiceMessage_ConnectMessage::set_maxmessagesize(::google::protobuf::int32 value) {
  set_has_maxmessagesize();
  maxmessagesize_ = value;
}

// -------------------------------------------------------------------

// ServiceMessage_SubscribeByNameMessage

// required string senderName = 1;
inline bool ServiceMessage_SubscribeByNameMessage::has_sendername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceMessage_SubscribeByNameMessage::set_has_sendername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceMessage_SubscribeByNameMessage::clear_has_sendername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceMessage_SubscribeByNameMessage::clear_sendername() {
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    sendername_->clear();
  }
  clear_has_sendername();
}
inline const ::std::string& ServiceMessage_SubscribeByNameMessage::sendername() const {
  return *sendername_;
}
inline void ServiceMessage_SubscribeByNameMessage::set_sendername(const ::std::string& value) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(value);
}
inline void ServiceMessage_SubscribeByNameMessage::set_sendername(const char* value) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(value);
}
inline void ServiceMessage_SubscribeByNameMessage::set_sendername(const char* value, size_t size) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceMessage_SubscribeByNameMessage::mutable_sendername() {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  return sendername_;
}
inline ::std::string* ServiceMessage_SubscribeByNameMessage::release_sendername() {
  clear_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendername_;
    sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServiceMessage_SubscribeByNameMessage::set_allocated_sendername(::std::string* sendername) {
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (sendername) {
    set_has_sendername();
    sendername_ = sendername;
  } else {
    clear_has_sendername();
    sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool subscribe = 2 [default = true];
inline bool ServiceMessage_SubscribeByNameMessage::has_subscribe() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceMessage_SubscribeByNameMessage::set_has_subscribe() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceMessage_SubscribeByNameMessage::clear_has_subscribe() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceMessage_SubscribeByNameMessage::clear_subscribe() {
  subscribe_ = true;
  clear_has_subscribe();
}
inline bool ServiceMessage_SubscribeByNameMessage::subscribe() const {
  return subscribe_;
}
inline void ServiceMessage_SubscribeByNameMessage::set_subscribe(bool value) {
  set_has_subscribe();
  subscribe_ = value;
}

// -------------------------------------------------------------------

// ServiceMessage_SubscribeByLabelMessage

// repeated string labelName = 1;
inline int ServiceMessage_SubscribeByLabelMessage::labelname_size() const {
  return labelname_.size();
}
inline void ServiceMessage_SubscribeByLabelMessage::clear_labelname() {
  labelname_.Clear();
}
inline const ::std::string& ServiceMessage_SubscribeByLabelMessage::labelname(int index) const {
  return labelname_.Get(index);
}
inline ::std::string* ServiceMessage_SubscribeByLabelMessage::mutable_labelname(int index) {
  return labelname_.Mutable(index);
}
inline void ServiceMessage_SubscribeByLabelMessage::set_labelname(int index, const ::std::string& value) {
  labelname_.Mutable(index)->assign(value);
}
inline void ServiceMessage_SubscribeByLabelMessage::set_labelname(int index, const char* value) {
  labelname_.Mutable(index)->assign(value);
}
inline void ServiceMessage_SubscribeByLabelMessage::set_labelname(int index, const char* value, size_t size) {
  labelname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceMessage_SubscribeByLabelMessage::add_labelname() {
  return labelname_.Add();
}
inline void ServiceMessage_SubscribeByLabelMessage::add_labelname(const ::std::string& value) {
  labelname_.Add()->assign(value);
}
inline void ServiceMessage_SubscribeByLabelMessage::add_labelname(const char* value) {
  labelname_.Add()->assign(value);
}
inline void ServiceMessage_SubscribeByLabelMessage::add_labelname(const char* value, size_t size) {
  labelname_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServiceMessage_SubscribeByLabelMessage::labelname() const {
  return labelname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServiceMessage_SubscribeByLabelMessage::mutable_labelname() {
  return &labelname_;
}

// optional bool subscribe = 2 [default = true];
inline bool ServiceMessage_SubscribeByLabelMessage::has_subscribe() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceMessage_SubscribeByLabelMessage::set_has_subscribe() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceMessage_SubscribeByLabelMessage::clear_has_subscribe() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceMessage_SubscribeByLabelMessage::clear_subscribe() {
  subscribe_ = true;
  clear_has_subscribe();
}
inline bool ServiceMessage_SubscribeByLabelMessage::subscribe() const {
  return subscribe_;
}
inline void ServiceMessage_SubscribeByLabelMessage::set_subscribe(bool value) {
  set_has_subscribe();
  subscribe_ = value;
}

// -------------------------------------------------------------------

// ServiceMessage

// required .EMS.ServiceMessage.MessageType type = 1;
inline bool ServiceMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::EMS::ServiceMessage_MessageType ServiceMessage::type() const {
  return static_cast< ::EMS::ServiceMessage_MessageType >(type_);
}
inline void ServiceMessage::set_type(::EMS::ServiceMessage_MessageType value) {
  assert(::EMS::ServiceMessage_MessageType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .EMS.ServiceMessage.ConnectMessage connectMessage = 1001;
inline bool ServiceMessage::has_connectmessage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceMessage::set_has_connectmessage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceMessage::clear_has_connectmessage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceMessage::clear_connectmessage() {
  if (connectmessage_ != NULL) connectmessage_->::EMS::ServiceMessage_ConnectMessage::Clear();
  clear_has_connectmessage();
}
inline const ::EMS::ServiceMessage_ConnectMessage& ServiceMessage::connectmessage() const {
  return connectmessage_ != NULL ? *connectmessage_ : *default_instance_->connectmessage_;
}
inline ::EMS::ServiceMessage_ConnectMessage* ServiceMessage::mutable_connectmessage() {
  set_has_connectmessage();
  if (connectmessage_ == NULL) connectmessage_ = new ::EMS::ServiceMessage_ConnectMessage;
  return connectmessage_;
}
inline ::EMS::ServiceMessage_ConnectMessage* ServiceMessage::release_connectmessage() {
  clear_has_connectmessage();
  ::EMS::ServiceMessage_ConnectMessage* temp = connectmessage_;
  connectmessage_ = NULL;
  return temp;
}
inline void ServiceMessage::set_allocated_connectmessage(::EMS::ServiceMessage_ConnectMessage* connectmessage) {
  delete connectmessage_;
  connectmessage_ = connectmessage;
  if (connectmessage) {
    set_has_connectmessage();
  } else {
    clear_has_connectmessage();
  }
}

// optional .EMS.ServiceMessage.SubscribeByNameMessage subscribeNameMessage = 1002;
inline bool ServiceMessage::has_subscribenamemessage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceMessage::set_has_subscribenamemessage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceMessage::clear_has_subscribenamemessage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServiceMessage::clear_subscribenamemessage() {
  if (subscribenamemessage_ != NULL) subscribenamemessage_->::EMS::ServiceMessage_SubscribeByNameMessage::Clear();
  clear_has_subscribenamemessage();
}
inline const ::EMS::ServiceMessage_SubscribeByNameMessage& ServiceMessage::subscribenamemessage() const {
  return subscribenamemessage_ != NULL ? *subscribenamemessage_ : *default_instance_->subscribenamemessage_;
}
inline ::EMS::ServiceMessage_SubscribeByNameMessage* ServiceMessage::mutable_subscribenamemessage() {
  set_has_subscribenamemessage();
  if (subscribenamemessage_ == NULL) subscribenamemessage_ = new ::EMS::ServiceMessage_SubscribeByNameMessage;
  return subscribenamemessage_;
}
inline ::EMS::ServiceMessage_SubscribeByNameMessage* ServiceMessage::release_subscribenamemessage() {
  clear_has_subscribenamemessage();
  ::EMS::ServiceMessage_SubscribeByNameMessage* temp = subscribenamemessage_;
  subscribenamemessage_ = NULL;
  return temp;
}
inline void ServiceMessage::set_allocated_subscribenamemessage(::EMS::ServiceMessage_SubscribeByNameMessage* subscribenamemessage) {
  delete subscribenamemessage_;
  subscribenamemessage_ = subscribenamemessage;
  if (subscribenamemessage) {
    set_has_subscribenamemessage();
  } else {
    clear_has_subscribenamemessage();
  }
}

// optional .EMS.ServiceMessage.SubscribeByLabelMessage subscribeLabelMessage = 1003;
inline bool ServiceMessage::has_subscribelabelmessage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServiceMessage::set_has_subscribelabelmessage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServiceMessage::clear_has_subscribelabelmessage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServiceMessage::clear_subscribelabelmessage() {
  if (subscribelabelmessage_ != NULL) subscribelabelmessage_->::EMS::ServiceMessage_SubscribeByLabelMessage::Clear();
  clear_has_subscribelabelmessage();
}
inline const ::EMS::ServiceMessage_SubscribeByLabelMessage& ServiceMessage::subscribelabelmessage() const {
  return subscribelabelmessage_ != NULL ? *subscribelabelmessage_ : *default_instance_->subscribelabelmessage_;
}
inline ::EMS::ServiceMessage_SubscribeByLabelMessage* ServiceMessage::mutable_subscribelabelmessage() {
  set_has_subscribelabelmessage();
  if (subscribelabelmessage_ == NULL) subscribelabelmessage_ = new ::EMS::ServiceMessage_SubscribeByLabelMessage;
  return subscribelabelmessage_;
}
inline ::EMS::ServiceMessage_SubscribeByLabelMessage* ServiceMessage::release_subscribelabelmessage() {
  clear_has_subscribelabelmessage();
  ::EMS::ServiceMessage_SubscribeByLabelMessage* temp = subscribelabelmessage_;
  subscribelabelmessage_ = NULL;
  return temp;
}
inline void ServiceMessage::set_allocated_subscribelabelmessage(::EMS::ServiceMessage_SubscribeByLabelMessage* subscribelabelmessage) {
  delete subscribelabelmessage_;
  subscribelabelmessage_ = subscribelabelmessage;
  if (subscribelabelmessage) {
    set_has_subscribelabelmessage();
  } else {
    clear_has_subscribelabelmessage();
  }
}

// optional .EMS.ServiceMessage.ErrorMessage errorMessage = 1004;
inline bool ServiceMessage::has_errormessage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServiceMessage::set_has_errormessage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServiceMessage::clear_has_errormessage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServiceMessage::clear_errormessage() {
  if (errormessage_ != NULL) errormessage_->::EMS::ServiceMessage_ErrorMessage::Clear();
  clear_has_errormessage();
}
inline const ::EMS::ServiceMessage_ErrorMessage& ServiceMessage::errormessage() const {
  return errormessage_ != NULL ? *errormessage_ : *default_instance_->errormessage_;
}
inline ::EMS::ServiceMessage_ErrorMessage* ServiceMessage::mutable_errormessage() {
  set_has_errormessage();
  if (errormessage_ == NULL) errormessage_ = new ::EMS::ServiceMessage_ErrorMessage;
  return errormessage_;
}
inline ::EMS::ServiceMessage_ErrorMessage* ServiceMessage::release_errormessage() {
  clear_has_errormessage();
  ::EMS::ServiceMessage_ErrorMessage* temp = errormessage_;
  errormessage_ = NULL;
  return temp;
}
inline void ServiceMessage::set_allocated_errormessage(::EMS::ServiceMessage_ErrorMessage* errormessage) {
  delete errormessage_;
  errormessage_ = errormessage;
  if (errormessage) {
    set_has_errormessage();
  } else {
    clear_has_errormessage();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EMS

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EMS::ServiceMessage_ErrorMessage_ErrorType>() {
  return ::EMS::ServiceMessage_ErrorMessage_ErrorType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EMS::ServiceMessage_MessageType>() {
  return ::EMS::ServiceMessage_MessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServiceMessageProto_2eproto__INCLUDED
